/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (function() { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./cartridges/int_aurus_sfra/cartridge/client/default/js/aurusCheckout.js":
/*!********************************************************************************!*\
  !*** ./cartridges/int_aurus_sfra/cartridge/client/default/js/aurusCheckout.js ***!
  \********************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval("var formHelpers = __webpack_require__(/*! base/checkout/formErrors */ \"../storefront-reference-architecture-master/cartridges/app_storefront_base/cartridge/client/default/js/checkout/formErrors.js\");\nvar scrollAnimate = __webpack_require__(/*! base/components/scrollAnimate */ \"../storefront-reference-architecture-master/cartridges/app_storefront_base/cartridge/client/default/js/components/scrollAnimate.js\");\n\n// IE 11 does not support ‘startsWith’ with strings.\n// Adding this prototype so that it supports the method.\nif (!String.prototype.startsWith) {\n    String.prototype.startsWith = function(searchString, position) { // eslint-disable-line\n        position = position || 0; // eslint-disable-line\n        return this.indexOf(searchString, position) === position;\n    };\n}\n\nfunction getAurusPayPalSession(params) {\n    return new Promise(function (resolve, reject) {\n    $.ajax({\n        url: 'AurusPay-GetSession',\n        type: 'get',\n        data: {\n            paypal: 'true'\n        },\n        success: function (data) {\n            if (!data.error) {\n                var payLoad = JSON.parse(data.session);\n                //window.console.log('PayPal Session Res',data);\n                var sessionId = payLoad.SessionResponse.SessionId;\n                resolve(sessionId); // Resolve with only SessionId\n                window.console.log('PayPal Session payload sessionId--->>>>',sessionId);\n            } else {\n                window.console.log('Error retrieving Aurus Pay iFrame url and session');\n                reject(new Error('Error retrieving Aurus Pay iFrame url and session'));\n            }\n        }\n    });\n});\n\n}\n\n// function getBillerToken(params) {\n//     $.ajax({\n//         url: 'AurusPay-GetBillerToken',\n//         type: 'get',\n//         success: function (data) {\n//             if (!data.error) {\n//                 var payLoad = JSON.parse(data.session);\n//                 window.console.log('AurusPay GetBillerToken--->>>>',payLoad);\n//             } else {\n//                 window.console.log('Error retrieving Aurus Pay PayPal token');\n//             }\n//         }\n//     });\n// }\n\n// Changed By me\nfunction onclickPaypalButton() {\n    paypal.Button.render({\n\n        env: 'sandbox',\n        commit: true,\n\n        style: {\n            label: 'paypal',\n            size: 'responsive',\n            color: 'gold',\n            shape: 'rect',\n            tagline: false,\n            height: 46\n        },\n        payment: function() {\n            return getBillerToken().then(function (payLoad) {\n                window.console.log('EcomToken--------------', payLoad.GetBillerTokenResponse.EcomToken);\n                return payLoad.GetBillerTokenResponse.EcomToken;\n            });\n        },\n\n        onAuthorize: function(data, actions) {\n            window.console.log('onAuthorize called---->>>>>>>>');\n      //getSessionToken call to get OTT of paypal request\n            getPayPalSessionToken();\n            return actions.redirect();\n        },\n\n        onCancel: function(data, actions) {\n            //\treturn actions.redirect();\n        }\n\n    }, '#aurus-paypal-containerId');\n}\n\nfunction getBillerToken() {\n     return new Promise(function (resolve, reject) {\n        $.ajax({\n            url: 'AurusPay-GetBillerToken',\n            type: 'get',\n            success: function (data) {\n                if (!data.error) {\n                    var payLoad = JSON.parse(data.session);\n                    window.console.log('AurusPay GetBillerToken--->>>>', payLoad);\n                    // window.console.log('EcomToken---->>>>>', payLoad.GetBillerTokenResponse.EcomToken);\n\n                    // // Extract the approval URL\n                    // var approvalLink = payLoad.GetBillerTokenResponse.WalletObject.links.find(link => link.rel === 'approval_url');\n                    // if (approvalLink) {\n                    //     var approvalUrl = approvalLink.href;\n                    //     window.console.log('Approval URL:', approvalUrl);\n                    // } else {\n                    //     window.console.log('Approval URL not found');\n                    // }\n\n                    resolve(payLoad);\n                } else {\n                    window.console.log('Error retrieving Aurus Pay PayPal token');\n                    reject(new Error('Error retrieving Aurus Pay PayPal token'));\n                }\n            },\n            error: function (jqXHR, textStatus, errorThrown) {\n                reject(new Error('AJAX request failed: ' + textStatus + ', ' + errorThrown));\n            }\n        });\n   });\n}\n//this function is for to get OTT \nfunction getPayPalSessionToken(){\n    window.console.log('get session token for paypal');\n    // $.ajax({\n    //     url: 'AurusPay-GetSessionToken',\n    //     type: 'get',\n    //     success: function (data) {\n    //         if (!data.error) {\n    //             var payLoad = JSON.parse(data.session);\n    //             window.console.log('AurusPay GetSessionTokenRequest--->>>>',payLoad);\n    //         } else {\n    //             window.console.log('Error retrieving Aurus Pay PayPal GetSessionToken for OTT');\n    //         }\n    //     }\n    // });\n}\n\n/**\n* Ajax call to get iframe url and attach to existing element\n* @param {string} storedPaymentId uuid and internal id for payment instrument\n*/\nfunction getAurusSession(storedPaymentId) {\n    var ccId = '';\n    if (storedPaymentId !== undefined) {\n        ccId = storedPaymentId.length > 0 ? storedPaymentId : '';\n    }\n    $.ajax({\n        url: 'AurusPay-GetSession',\n        type: 'get',\n        data: {\n            ccId: ccId\n        },\n        success: function (data) {\n            if (!data.error) {\n                var payLoad = JSON.parse(data.session);\n                 window.console.log('getAurusSession payLoad',payLoad);\n                $('#frame_carddetails').attr('src', payLoad.SessionResponse.IFrameUrl);\n            } else {\n                window.console.log('Error retrieving Aurus Pay iFrame url and session');\n            }\n        }\n    });\n}\n\n/**\n* Merchant needs to get this URL by doing substring of Aurus Iframe Url received in Session API.\n* URL example: var aurusURL = 'https://uat48.auruspay.com';\n* @returns {string} Aurus iframe Origin\n*/\nfunction getIframeUrl() {\n    var aurusURL;\n    if ($('#frame_carddetails').length) {\n        var aurusLongURL = $('#frame_carddetails').attr('src');\n        aurusURL = 'https://' + aurusLongURL.split('/')[2];\n    }\n    return aurusURL;\n}\n\n/**\n* This function initiates Ajax call within the Aurus iframe to retrieve the one time token (OTT)\n* This method needs to be called onSubmit button click present on Merchant's page.\n*/\nfunction getCardToken() {\n    var aurusURL = getIframeUrl();\n    var frame = document.getElementById('frame_carddetails');\n    frame.contentWindow.postMessage('aurus-token', aurusURL);\n}\n\n// /**\n// * This function initiates Ajax call within the Aurus iframe to retrieve the one time token (OTT)\n// * This method needs to be called onSubmit button click present on Merchant's page.\n// * @param {JSON} JSONdata the response data from the OTT request within the iFrame\n// */\n// function responseHandler(JSONdata) {\n//     window.console.log('responseHandler called----->>>');\n//     try {\n//         var $msg = $('#token-error');\n//         // Handle the Error Response here\n//         if (Number(JSONdata.response_code) > 0) {\n//             $msg.text('ERROR: ' + JSONdata.response_code + ' - ' + JSONdata.response_text);\n//             $('#buttonSubmit').prop('disabled', false);\n//         } else { // Handle the success response here like below:\n//             window.console.log('responseHandler called SUCCESS----->>>');\n//             $msg.text('SUCCESS');\n//             // var $form = $('#dwfrm_billing');\n\n//             // $form.append($('<input type=\"hidden\" name=\"card_token\">').val(JSONdata.card_token));\n//             // $form.append($('<input type=\"hidden\" name=\"card_holder_name\">').val(JSONdata.card_holder_name));\n\n//             $('#cardType').val(JSONdata.card_type);\n//             var maskedCardNum = 'dwfrm_billing_creditCardFields_cardNumber=' + JSONdata.masked_card_num + '&';\n//             var expiryDate = 'dwfrm_billing_creditCardFields_expirationDate=' + JSONdata.card_expiry_date + '&';\n//             var resCode = 'dwfrm_billing_creditCardFields_responseCode=' + JSONdata.response_code + '&';\n//             var resText = 'dwfrm_billing_creditCardFields_responseText=' + JSONdata.response_text + '&';\n//             var ott = 'dwfrm_billing_creditCardFields_ott=' + JSONdata.one_time_token;\n//             formHelpers.clearPreviousErrors('.payment-form');\n//             window.console.log('responseHandler called SUCCESS----->>>',ott);\n//             window.console.log('responseHandler called expiryDate----->>>',expiryDate);\n//             window.console.log('responseHandler called resCode----->>>',resCode);\n//             window.console.log('responseHandler called resText----->>>',resText);\n//             var shippingFormData = $('.single-shipping .shipping-form').serialize();\n\n//             $('body').trigger('checkout:serializeShipping', {\n//                 form: $('.single-shipping .shipping-form'),\n//                 data: shippingFormData,\n//                 callback: function (data) {\n//                     shippingFormData = data;\n//                 }\n//             });\n\n//             var billingAddressForm = $('#dwfrm_billing .billing-address-block :input').serialize();\n\n//             $('body').trigger('checkout:serializeBilling', {\n//                 form: $('#dwfrm_billing .billing-address-block'),\n//                 data: billingAddressForm,\n//                 callback: function (data) {\n//                     if (data) {\n//                         billingAddressForm = data;\n//                     }\n//                 }\n//             });\n\n//             var contactInfoForm = $('#dwfrm_billing .contact-info-block :input').serialize();\n\n//             $('body').trigger('checkout:serializeBilling', {\n//                 form: $('#dwfrm_billing .contact-info-block'),\n//                 data: contactInfoForm,\n//                 callback: function (data) {\n//                     if (data) {\n//                         contactInfoForm = data;\n//                     }\n//                 }\n//             });\n\n//             var activeTabId = $('.tab-pane.active').attr('id');\n\n//             var paymentInfoSelector = '#dwfrm_billing .' + activeTabId + ' .payment-form-fields :input';\n//             var paymentInfoForm = $(paymentInfoSelector).serialize();\n//             paymentInfoForm = paymentInfoForm + '&' + maskedCardNum + expiryDate + resCode + resText + ott;\n\n//             var paymentForm = shippingFormData + '&' + billingAddressForm + '&' + contactInfoForm + '&' + paymentInfoForm;\n//             window.console.log('paymentForm====>>',paymentForm);\n//             // disable the next:Place Order button here\n//             $('body').trigger('checkout:disableButton', '.next-step-button button');\n//             var defer = $.Deferred();// eslint-disable-line\n//             window.console.log('defer' ,defer);\n//             var test= $('#dwfrm_billing').attr('action');\n//             window.console.log('test...',test);\n//             // Ajax call to server side\n//             $.ajax({\n//                 url: $('#dwfrm_billing').attr('action'),\n//                 method: 'POST',\n//                 data: paymentForm,\n//                 success: function (data) {\n//                     // enable the next:Place Order button here\n//                     $('body').trigger('checkout:enableButton', '.next-step-button button');\n//                     // look for field validation errors\n//                     if (data.error) {\n//                         if (data.fieldErrors.length) {\n//                             data.fieldErrors.forEach(function (error) {\n//                                 if (Object.keys(error).length) {\n//                                     formHelpers.loadFormErrors('.payment-form', error);\n//                                 }\n//                             });\n//                         }\n\n//                         if (data.serverErrors.length) {\n//                             data.serverErrors.forEach(function (error) {\n//                                 $('.error-message').show();\n//                                 $('.error-message-text').text(error);\n//                                 scrollAnimate($('.error-message'));\n//                             });\n//                         }\n\n//                         if (data.cartError) {\n//                             window.location.href = data.redirectUrl;\n//                         }\n\n//                         defer.reject();\n//                     } else {\n//                         //\n//                         // Populate the Address Summary\n//                         //\n//                         $('body').trigger('checkout:updateCheckoutView',\n//                             { order: data.order, customer: data.customer });\n\n//                         if (data.renderedPaymentInstruments) {\n//                             $('.stored-payments').empty().html(\n//                                 data.renderedPaymentInstruments\n//                             );\n//                         }\n\n//                         if (data.customer.registeredUser\n//                             && data.customer.customerPaymentInstruments.length\n//                         ) {\n//                             $('.cancel-new-payment').removeClass('checkout-hidden');\n//                         }\n\n//                         scrollAnimate();\n//                         defer.resolve(data);\n//                     }\n//                 },\n//                 error: function (err) {\n//                     // enable the next:Place Order button here\n//                     $('body').trigger('checkout:enableButton', '.next-step-button button');\n//                     if (err.responseJSON && err.responseJSON.redirectUrl) {\n//                         window.location.href = err.responseJSON.redirectUrl;\n//                     }\n//                 }\n//             });\n//         }\n//     } catch (error) {\n//         window.console.log('ERROR: ' + error);\n//     }\n// }\n\n// This will get triggered when Aurus will post the OTT response on Merchant's page\n\nwindow.addEventListener('message', function (event) {\n    var aurusURL = getIframeUrl();\n    var data = event.data;\n    var splt;\n    var json;\n    if (event.origin !== aurusURL) {\n        window.console.log('Wrong Origin...');\n        return;\n    }\n    //  else if (data.startsWith('response')) {\n    //     splt = data.split('=');\n    //     json = JSON.parse(splt[1]);\n    //     //responseHandler(json);\n    // } else if (data.startsWith('enablePlaceOrder')) {\n    //     splt = data.split('=');\n    //     json = JSON.parse(splt[1]);\n    //     // TODO: if failure disable place order button\n    //     // var enableBtn = json ? true : false;\n    //     // enablePlaceOrderBtn(enableBtn);\n    else if (data.startsWith('iframeHeight')) {\n         splt = data.split('=');\n         json = splt[1];\n         console.log(\"Iframe height:\"+json); \n         $(\"#frame_carddetails\").css(\"height\",json);\n    }\n});\n\nmodule.exports = {\n    methods: {\n        getCardToken: getCardToken,\n        getAurusSession: getAurusSession,\n        getAurusPayPalSession: getAurusPayPalSession,\n        getBillerToken: getBillerToken,\n        onclickPaypalButton:onclickPaypalButton\n    }\n};\n\n\n//# sourceURL=webpack://int_aurus_sfra/./cartridges/int_aurus_sfra/cartridge/client/default/js/aurusCheckout.js?");

/***/ }),

/***/ "./cartridges/int_aurus_sfra/cartridge/client/default/js/test.js":
/*!***********************************************************************!*\
  !*** ./cartridges/int_aurus_sfra/cartridge/client/default/js/test.js ***!
  \***********************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval("\nvar aurusCheckout = __webpack_require__(/*! ./aurusCheckout */ \"./cartridges/int_aurus_sfra/cartridge/client/default/js/aurusCheckout.js\");\nvar scrollAnimate = __webpack_require__(/*! base/components/scrollAnimate */ \"../storefront-reference-architecture-master/cartridges/app_storefront_base/cartridge/client/default/js/components/scrollAnimate.js\");\nwindow.console.log('test.js file called ');\nvar appleWalletDiv = '<div class=\"apple-pay-button-with-text apple-pay-button-black-with-text\" onclick=\"applePayButtonClicked()\">' +\n    '<span class=\"text\"></span> <span class=\"logo\"></span>' +\n    '</div>';\n\nfunction showApplePayButton() {\n    HTMLCollection.prototype[Symbol.iterator] = Array.prototype[Symbol.iterator];\n    const buttons = document.getElementsByClassName(\"apple-pay-button-black-with-text\");\n    for (let button of buttons) {\n        button.className += \"block\";\n    }\n}\n\nfunction applePayButtonClicked() {\n    var paymentRequest = \"\";\n    if ((Aurus.getSkipShippingAddress != null && Aurus.getSkipShippingAddress != undefined && Aurus.getSkipShippingAddress != \"\") && (Aurus.getSkipBillingAddress != null && Aurus.getSkipBillingAddress != \"\" && Aurus.getSkipBillingAddress != undefined)) {\n        if (Aurus.getSkipShippingAddress == \"1\" && Aurus.getSkipBillingAddress == \"1\") {\n            paymentRequest = {\n                countryCode: Aurus.getPurchaseCountry,\n                requiredBillingContactFields: [\"postalAddress\", \"email\", \"name\", \"phone\"],\n                // requiredShippingContactFields: [\"postalAddress\",\"email\", \"name\", \"phone\"],\n                currencyCode: Aurus.getCurrencyCode,\n                total: {\n                    label: 'Estimated Order Total',\n                    amount: parseFloat(Aurus.getOrderAmount).toFixed(2),\n                },\n                lineItems: Aurus.getLineItems,\n                // shippingMethods :  Aurus.getShippingMethod,\n                supportedNetworks: ['amex', 'discover', 'masterCard', 'visa', 'privateLabel', 'maestro', 'jcb'],\n                merchantCapabilities: ['supports3DS'],\n\n            };\n        } else if (Aurus.getSkipShippingAddress == \"0\" && Aurus.getSkipBillingAddress == \"1\") {\n            paymentRequest = {\n                countryCode: Aurus.getPurchaseCountry,\n                requiredBillingContactFields: [\"postalAddress\", \"email\", \"name\", \"phone\"],\n                // requiredShippingContactFields: [\"postalAddress\", \"email\", \"name\", \"phone\"],\n                currencyCode: Aurus.getCurrencyCode,\n                // shippingType: \"storePickup\",\n                shippingContact: {\n                    phoneNumber: Aurus.getShippingAddress.phoneNumber,\n                    emailAddress: Aurus.getShippingAddress.emailAddress,\n                    givenName: Aurus.getShippingAddress.firstName,\n                    familyName: Aurus.getShippingAddress.lastName,\n                    addressLines: [Aurus.getShippingAddress.street, Aurus.getShippingAddress.street2],\n                    locality: Aurus.getShippingAddress.city,\n                    administrativeArea: Aurus.getShippingAddress.state,\n                    postalCode: Aurus.getShippingAddress.postalCode,\n                    countryCode: Aurus.getShippingAddress.countryCode,\n                },\n                // shippingContactEditingMode: \"storePickup\",\n                total: {\n                    label: 'Estimated Order Total',\n                    amount: parseFloat(Aurus.getOrderAmount).toFixed(2),\n                },\n                lineItems: Aurus.getLineItems,\n                shippingMethods: Aurus.getShippingMethod,\n                supportedNetworks: ['amex', 'discover', 'masterCard', 'visa', 'privateLabel', 'maestro', 'jcb'],\n                merchantCapabilities: ['supports3DS'],\n            };\n        } else if (Aurus.getSkipShippingAddress == \"1\" && Aurus.getSkipBillingAddress == \"0\") {\n            paymentRequest = {\n                countryCode: Aurus.getPurchaseCountry,\n                requiredBillingContactFields: [\"postalAddress\", \"email\", \"name\", \"phone\"],\n                // requiredShippingContactFields: [\"postalAddress\", \"email\", \"name\", \"phone\"],\n                currencyCode: Aurus.getCurrencyCode,\n                // shippingType: \"storePickup\",\n                billingContact: {\n                    phoneNumber: Aurus.getBillingAddress.phoneNumber,\n                    emailAddress: Aurus.getBillingAddress.emailAddress,\n                    givenName: Aurus.getBillingAddress.firstName,\n                    familyName: Aurus.getBillingAddress.lastName,\n                    addressLines: [Aurus.getBillingAddress.street, Aurus.getBillingAddress.street2],\n                    locality: Aurus.getBillingAddress.city,\n                    administrativeArea: Aurus.getBillingAddress.state,\n                    postalCode: Aurus.getBillingAddress.postalCode,\n                    countryCode: Aurus.getBillingAddress.countryCode,\n                },\n                // shippingContactEditingMode: \"storePickup\",\n                total: {\n                    label: 'Estimated Order Total',\n                    amount: parseFloat(Aurus.getOrderAmount).toFixed(2),\n                },\n                lineItems: Aurus.getLineItems,\n                // shippingMethods :  Aurus.getShippingMethod,\n                supportedNetworks: ['amex', 'discover', 'masterCard', 'visa', 'privateLabel', 'maestro', 'jcb'],\n                merchantCapabilities: ['supports3DS'],\n            };\n        } else if (Aurus.getSkipShippingAddress == \"0\" && Aurus.getSkipBillingAddress == \"0\") {\n            paymentRequest = {\n                countryCode: Aurus.getPurchaseCountry,\n                requiredBillingContactFields: [\"postalAddress\", \"email\", \"name\", \"phone\"],\n                // requiredShippingContactFields: [\"postalAddress\", \"email\", \"name\", \"phone\"],\n                currencyCode: Aurus.getCurrencyCode,\n                // shippingType: \"storePickup\",\n                shippingContact: {\n                    phoneNumber: Aurus.getShippingAddress.phoneNumber,\n                    emailAddress: Aurus.getShippingAddress.emailAddress,\n                    givenName: Aurus.getShippingAddress.firstName,\n                    familyName: Aurus.getShippingAddress.lastName,\n                    addressLines: [Aurus.getShippingAddress.street, Aurus.getShippingAddress.street2],\n                    locality: Aurus.getShippingAddress.city,\n                    administrativeArea: Aurus.getShippingAddress.state,\n                    postalCode: Aurus.getShippingAddress.postalCode,\n                    countryCode: Aurus.getShippingAddress.countryCode,\n                },\n                billingContact: {\n                    phoneNumber: Aurus.getBillingAddress.phoneNumber,\n                    emailAddress: Aurus.getBillingAddress.emailAddress,\n                    givenName: Aurus.getBillingAddress.firstName,\n                    familyName: Aurus.getBillingAddress.lastName,\n                    addressLines: [Aurus.getBillingAddress.street, Aurus.getBillingAddress.street2],\n                    locality: Aurus.getBillingAddress.city,\n                    administrativeArea: Aurus.getBillingAddress.state,\n                    postalCode: Aurus.getBillingAddress.postalCode,\n                    countryCode: Aurus.getBillingAddress.countryCode,\n                },\n                // shippingContactEditingMode: \"storePickup\",\n                total: {\n                    label: 'Estimated Order Total',\n                    amount: parseFloat(Aurus.getOrderAmount).toFixed(2),\n                },\n                lineItems: Aurus.getLineItems,\n                shippingMethods: Aurus.getShippingMethod,\n                supportedNetworks: ['amex', 'discover', 'masterCard', 'visa', 'privateLabel', 'maestro', 'jcb'],\n                merchantCapabilities: ['supports3DS'],\n            };\n        }\n    } else if ((Aurus.getSkipShippingAddress == null || Aurus.getSkipShippingAddress == undefined || Aurus.getSkipShippingAddress == \"\") && (Aurus.getSkipBillingAddress == null || Aurus.getSkipBillingAddress == \"\" || Aurus.getSkipBillingAddress == undefined)) {\n        paymentRequest = {\n            countryCode: Aurus.getPurchaseCountry,\n            requiredBillingContactFields: [\"postalAddress\", \"email\", \"name\", \"phone\"],\n            // requiredShippingContactFields: [\"postalAddress\",\"email\", \"name\", \"phone\"],\n            currencyCode: Aurus.getCurrencyCode,\n            total: {\n                label: 'Estimated Order Total',\n                amount: parseFloat(Aurus.getOrderAmount).toFixed(2),\n            },\n            lineItems: Aurus.getLineItems,\n            supportedNetworks: ['amex', 'discover', 'masterCard', 'visa', 'privateLabel', 'maestro', 'jcb'],\n            merchantCapabilities: ['supports3DS'],\n\n        };\n    } else if ((Aurus.getSkipShippingAddress == null || Aurus.getSkipShippingAddress == undefined || Aurus.getSkipShippingAddress == \"\") || (Aurus.getSkipBillingAddress == null || Aurus.getSkipBillingAddress == \"\" || Aurus.getSkipBillingAddress == undefined)) {\n        paymentRequest = {\n            countryCode: Aurus.getPurchaseCountry,\n            requiredBillingContactFields: [\"postalAddress\", \"email\", \"name\", \"phone\"],\n            // requiredShippingContactFields: [\"postalAddress\",\"email\", \"name\", \"phone\"],\n            currencyCode: Aurus.getCurrencyCode,\n            total: {\n                label: 'Estimated Order Total',\n                amount: parseFloat(Aurus.getOrderAmount).toFixed(2),\n            },\n            lineItems: Aurus.getLineItems,\n            supportedNetworks: ['amex', 'discover', 'masterCard', 'visa', 'privateLabel', 'maestro', 'jcb'],\n            merchantCapabilities: ['supports3DS'],\n\n        };\n        window.parent.postMessage(\"AurusScriptError=Invalid_Shipping or Billing Flag\", '*');\n    }\n    if (Aurus.getSkipRequiredShippingContact == \"1\") {\n        paymentRequest.requiredShippingContactFields = [\"email\", \"phone\"];\n    } else {\n        paymentRequest.requiredShippingContactFields = [\"postalAddress\", \"email\", \"name\", \"phone\"];\n    }\n    var session = new ApplePaySession(6, paymentRequest); // version 6\n\n    session.oncancel = (event) => {\n        try {\n            window.parent.postMessage(\"AurusApplePayCancelEvent=ApplePayCancelEvent\", '*');\n        } catch (e) {\n            //if (e instanceof ReferenceError) {}\n        }\n    };\n\n    session.onvalidatemerchant = (event) => {\n        var validationURL = event.validationURL;\n        getApplePaySession(validationURL).then(function (response) {\n            session.completeMerchantValidation(response);\n        });\n    };\n\n    session.onshippingmethodselected = (event) => {\n        var shippingMethodData = '';\n        var selectedShippingMethod = event.shippingMethod;\n        Aurus._selectedShippingMethod = selectedShippingMethod;\n        selectedShippingMethod = JSON.parse(JSON.stringify(selectedShippingMethod));\n        selectedShippingMethod.eventType = \"shippingMethod\";\n        try {\n            window.parent.postMessage(\"AurusApplePayEvent=\" + JSON.stringify(selectedShippingMethod), '*');\n        } catch (e) {\n            //if (e instanceof ReferenceError) {}\n        }\n        window.addEventListener(\"message\", function (e) {\n            var data = e.data;\n            if (data.startsWith('ApplePayUpdatedShippingMethod')) {\n                var splt = data.split('=');\n                shippingMethodData = JSON.parse(splt[1]);\n                const promis = new Promise(function (resolve, reject) {\n                    if (typeof shippingMethodData === 'object' && shippingMethodData != null && Object.keys(shippingMethodData).length !== 0) {\n                        if (shippingMethodData.shippingMethods != undefined && shippingMethodData.shippingMethods != \"\" && shippingMethodData.shippingMethods != null) {\n                            Aurus._shippingMethod = shippingMethodData.shippingMethods;\n                        }\n                        Aurus._orderAmount = parseFloat(shippingMethodData.order.order_amount.amount).toFixed(2);\n                        Aurus._subTotal = parseFloat(shippingMethodData.order.item_total.amount).toFixed(2);\n                        //   Aurus._discount = parseFloat(shippingMethodData.order.discounts.amount).toFixed(2);\n                        Aurus._estimatedTax = parseFloat(shippingMethodData.order.tax_amount.amount).toFixed(2);\n                        Aurus._shippingCost = parseFloat(shippingMethodData.order.shipping_amount.amount).toFixed(2);\n                        Aurus._giftWrap = parseFloat(shippingMethodData.order.gift_wrap.amount).toFixed(2);\n                        //    Aurus._coupon = parseFloat(shippingMethodData.order.coupon.amount).toFixed(2);\n                        Aurus._lineItems = Aurus.importLineItems(shippingMethodData);\n                        resolve(shippingMethodData);\n                    } else {\n                        reject(shippingMethodData);\n                    }\n                    // };\n                })\n                promis.then(function (resolveData) {\n                    var shippingMethodUpdate = {\n                        \"newTotal\": {\n                            \"label\": \"Estimated Order Total\",\n                            \"amount\": Aurus.getOrderAmount,\n                            \"type\": \"final\"\n                        },\n                        \"newLineItems\": Aurus.getLineItems,\n                    };\n                    session.completeShippingMethodSelection(shippingMethodUpdate);\n                }).catch(function (rejectData) {\n                    console.log(rejectData)\n                })\n            }\n        });\n    };\n\n    session.onshippingcontactselected = (event) => {\n            var custdata;\n            var selectedShippingContact = JSON.stringify(event.shippingContact);\n            selectedShippingContact = JSON.parse(selectedShippingContact);\n            selectedShippingContact.eventType = \"shippingContact\";\n            try {\n                window.parent.postMessage(\"AurusApplePayEvent=\" + JSON.stringify(selectedShippingContact), '*');\n            } catch (e) {\n                //if (e instanceof ReferenceError) {}\n            }\n            window.addEventListener(\"message\", function (e) {\n                var data = e.data;\n                if (data.startsWith('ApplePayUpdatedShippingContact')) {\n                    var splt = data.split('=');\n                    custdata = JSON.parse(splt[1]);\n                    const promis = new Promise(function (resolve, reject) {\n                        if (typeof custdata === 'object' && custdata != null && Object.keys(custdata).length !== 0) {\n                            if (custdata.shippingMethods != undefined && custdata.shippingMethods != \"\" && custdata.shippingMethods != null) {\n                                Aurus._shippingMethod = custdata.shippingMethods;\n                            } else {\n                                Aurus._shippingMethod = [];\n                            }\n                            Aurus._orderAmount = parseFloat(custdata.order.order_amount.amount).toFixed(2);\n                            Aurus._subTotal = parseFloat(custdata.order.item_total.amount).toFixed(2);\n                            //    Aurus._discount = parseFloat(custdata.order.discounts.amount).toFixed(2);\n                            Aurus._estimatedTax = parseFloat(custdata.order.tax_amount.amount).toFixed(2);\n                            Aurus._shippingCost = parseFloat(custdata.order.shipping_amount.amount).toFixed(2);\n                            Aurus._giftWrap = parseFloat(custdata.order.gift_wrap.amount).toFixed(2);\n                            //  Aurus._coupon = parseFloat(custdata.order.coupon.amount).toFixed(2);\n                            Aurus._lineItems = Aurus.importLineItems(custdata);\n                            resolve(custdata);\n                        } else {\n                            reject(custdata);\n                        }\n                    })\n                    promis.then(function (resolveData) {\n                        if (custdata.shippingMethods != undefined && custdata.shippingMethods != \"\" && custdata.shippingMethods != null) {\n                            for (i = 0; i < custdata.shippingMethods.length; i++) {\n                                if (JSON.stringify(custdata.shippingMethods[i].selected) == \"true\") {\n                                    Aurus._selectedShippingMethod = custdata.shippingMethods[i];\n                                }\n                            }\n                        }\n                        if (custdata.shippingAllowed == 1) {\n                            var paymentRequestUpdate = {\n                                \"newTotal\": {\n                                    \"label\": \"Estimated Order Total\",\n                                    \"amount\": Aurus.getOrderAmount,\n                                    \"type\": \"final\"\n                                },\n                                \"newLineItems\": Aurus.getLineItems,\n                                \"newShippingMethods\": Aurus.getShippingMethod,\n                            };\n                            session.completeShippingContactSelection(paymentRequestUpdate);\n                        } else {\n                            var shippingErrorObj = [];\n                            var errorCode = \"shippingContactInvalid\";\n                            for (i = 0; i < custdata.ShippingContactError.length; i++) {\n                                var errorField = custdata.ShippingContactError[i].errorField;\n                                var errorMessage = custdata.ShippingContactError[i].errorMessage;\n                                var objdata = new ApplePayError(errorCode, errorField, errorMessage);\n                                shippingErrorObj.push(objdata);\n                            }\n                            var paymentRequestUpdate = {\n                                \"newTotal\": {\n                                    \"label\": \"Estimated Order Total\",\n                                    \"amount\": Aurus.getOrderAmount,\n                                    \"type\": \"pending\"\n                                },\n                                \"newLineItems\": [],\n                                \"errors\": shippingErrorObj\n                            };\n                            session.completeShippingContactSelection(paymentRequestUpdate);\n                        }\n                    }).catch(function (rejectData) {\n                        console.log(rejectData)\n                    })\n                }\n            });\n        },\n\n        session.onpaymentauthorized = (event) => {\n            var jsondata = {\n                \"billingContact\": event.payment.billingContact,\n                \"shippingContact\": event.payment.shippingContact\n            };\n            var contactData = JSON.stringify(jsondata);\n            contactData = JSON.parse(contactData);\n            contactData.eventType = \"contactDetails\";\n            contactData = JSON.stringify(contactData);\n            var cdata = onApplePayUpdatedContact(contactData);\n            const promis = new Promise(function (resolve, reject) {\n                if (typeof cdata === 'object' && cdata != null && Object.keys(cdata).length !== 0) {\n                    resolve(cdata);\n                } else {\n                    reject(cdata);\n                }\n            })\n            promis.then(function (resolveData) {\n                if (cdata.ContactAllowed == \"0\" && cdata.shippingAllowed == \"0\" && cdata.billingAllowed == \"0\") {\n                    var ErrorObj = [];\n                    var shippingErrorCode = \"shippingContactInvalid\";\n                    var billingErrorCode = \"billingContactInvalid\";\n                    for (i = 0; i < cdata.ContactError.length; i++) {\n                        var errorField = cdata.ContactError[i].errorField;\n                        var errorMessage = cdata.ContactError[i].errorMessage;\n                        var objdata = new ApplePayError(shippingErrorCode, errorField, errorMessage);\n                        ErrorObj.push(objdata);\n                    }\n                    for (i = 0; i < cdata.ShippingContactError.length; i++) {\n                        var errorField = cdata.ShippingContactError[i].errorField;\n                        var errorMessage = cdata.ShippingContactError[i].errorMessage;\n                        var objdata = new ApplePayError(shippingErrorCode, errorField, errorMessage);\n                        ErrorObj.push(objdata);\n                    }\n                    for (i = 0; i < cdata.BillingContactError.length; i++) {\n                        var errorField = cdata.BillingContactError[i].errorField;\n                        var errorMessage = cdata.BillingContactError[i].errorMessage;\n                        var objdata = new ApplePayError(billingErrorCode, errorField, errorMessage);\n                        ErrorObj.push(objdata);\n                    }\n                    var applepayreq = {\n                        status: ApplePaySession.STATUS_FAILURE,\n                        errors: ErrorObj\n                    };\n                    session.completePayment(applepayreq);\n                } else if (cdata.ContactAllowed == \"0\" && cdata.shippingAllowed == \"0\" && cdata.billingAllowed == \"1\") {\n                    var ErrorObj = [];\n                    var shippingErrorCode = \"shippingContactInvalid\";\n                    var billingErrorCode = \"billingContactInvalid\";\n                    for (i = 0; i < cdata.ContactError.length; i++) {\n                        var errorField = cdata.ContactError[i].errorField;\n                        var errorMessage = cdata.ContactError[i].errorMessage;\n                        var objdata = new ApplePayError(shippingErrorCode, errorField, errorMessage);\n                        ErrorObj.push(objdata);\n                    }\n                    for (i = 0; i < cdata.ShippingContactError.length; i++) {\n                        var errorField = cdata.ShippingContactError[i].errorField;\n                        var errorMessage = cdata.ShippingContactError[i].errorMessage;\n                        var objdata = new ApplePayError(shippingErrorCode, errorField, errorMessage);\n                        ErrorObj.push(objdata);\n                    }\n                    var applepayreq = {\n                        status: ApplePaySession.STATUS_FAILURE,\n                        errors: ErrorObj\n                    };\n                    session.completePayment(applepayreq);\n                } else if (cdata.ContactAllowed == \"0\" && cdata.shippingAllowed == \"1\" && cdata.billingAllowed == \"0\") {\n                    var ErrorObj = [];\n                    var shippingErrorCode = \"shippingContactInvalid\";\n                    var billingErrorCode = \"billingContactInvalid\";\n                    for (i = 0; i < cdata.ContactError.length; i++) {\n                        var errorField = cdata.ContactError[i].errorField;\n                        var errorMessage = cdata.ContactError[i].errorMessage;\n                        var objdata = new ApplePayError(shippingErrorCode, errorField, errorMessage);\n                        ErrorObj.push(objdata);\n                    }\n                    for (i = 0; i < cdata.BillingContactError.length; i++) {\n                        var errorField = cdata.BillingContactError[i].errorField;\n                        var errorMessage = cdata.BillingContactError[i].errorMessage;\n                        var objdata = new ApplePayError(billingErrorCode, errorField, errorMessage);\n                        ErrorObj.push(objdata);\n                    }\n                    var applepayreq = {\n                        status: ApplePaySession.STATUS_FAILURE,\n                        errors: ErrorObj\n                    };\n                    session.completePayment(applepayreq);\n                } else if (cdata.ContactAllowed == \"1\" && cdata.shippingAllowed == \"0\" && cdata.billingAllowed == \"0\") {\n                    var ErrorObj = [];\n                    var shippingErrorCode = \"shippingContactInvalid\";\n                    var billingErrorCode = \"billingContactInvalid\";\n                    for (i = 0; i < cdata.ShippingContactError.length; i++) {\n                        var errorField = cdata.ShippingContactError[i].errorField;\n                        var errorMessage = cdata.ShippingContactError[i].errorMessage;\n                        var objdata = new ApplePayError(shippingErrorCode, errorField, errorMessage);\n                        ErrorObj.push(objdata);\n                    }\n                    for (i = 0; i < cdata.BillingContactError.length; i++) {\n                        var errorField = cdata.BillingContactError[i].errorField;\n                        var errorMessage = cdata.BillingContactError[i].errorMessage;\n                        var objdata = new ApplePayError(billingErrorCode, errorField, errorMessage);\n                        ErrorObj.push(objdata);\n                    }\n                    var applepayreq = {\n                        status: ApplePaySession.STATUS_FAILURE,\n                        errors: ErrorObj\n                    };\n                    session.completePayment(applepayreq);\n                } else if (cdata.ContactAllowed == \"1\" && cdata.shippingAllowed == \"1\" && cdata.billingAllowed == \"0\") {\n                    var ErrorObj = [];\n                    var shippingErrorCode = \"shippingContactInvalid\";\n                    var billingErrorCode = \"billingContactInvalid\";\n\n                    for (i = 0; i < cdata.BillingContactError.length; i++) {\n                        var errorField = cdata.BillingContactError[i].errorField;\n                        var errorMessage = cdata.BillingContactError[i].errorMessage;\n                        var objdata = new ApplePayError(billingErrorCode, errorField, errorMessage);\n                        ErrorObj.push(objdata);\n                    }\n                    var applepayreq = {\n                        status: ApplePaySession.STATUS_FAILURE,\n                        errors: ErrorObj\n                    };\n                    session.completePayment(applepayreq);\n                } else if (cdata.ContactAllowed == \"1\" && cdata.shippingAllowed == \"0\" && cdata.billingAllowed == \"1\") {\n                    var ErrorObj = [];\n                    var shippingErrorCode = \"shippingContactInvalid\";\n                    var billingErrorCode = \"billingContactInvalid\";\n\n                    for (i = 0; i < cdata.ShippingContactError.length; i++) {\n                        var errorField = cdata.ShippingContactError[i].errorField;\n                        var errorMessage = cdata.ShippingContactError[i].errorMessage;\n                        var objdata = new ApplePayError(shippingErrorCode, errorField, errorMessage);\n                        ErrorObj.push(objdata);\n                    }\n\n                    var applepayreq = {\n                        status: ApplePaySession.STATUS_FAILURE,\n                        errors: ErrorObj\n                    };\n                    session.completePayment(applepayreq);\n                } else if (cdata.ContactAllowed == \"0\" && cdata.shippingAllowed == \"1\" && cdata.billingAllowed == \"1\") {\n                    var ErrorObj = [];\n                    var shippingErrorCode = \"shippingContactInvalid\";\n                    for (i = 0; i < cdata.ContactError.length; i++) {\n                        var errorField = cdata.ContactError[i].errorField;\n                        var errorMessage = cdata.ContactError[i].errorMessage;\n                        var objdata = new ApplePayError(shippingErrorCode, errorField, errorMessage);\n                        ErrorObj.push(objdata);\n                    }\n                    var applepayreq = {\n                        status: ApplePaySession.STATUS_FAILURE,\n                        errors: ErrorObj\n                    };\n                    session.completePayment(applepayreq);\n                } else if (cdata.ContactAllowed == \"1\" && cdata.shippingAllowed == \"1\" && cdata.billingAllowed == \"1\") {\n                    const payment = event.payment;\n                    Aurus._applePayPaymetData = payment;\n                    session.completePayment(ApplePaySession.STATUS_SUCCESS);\n                } else if (cdata.ContactAllowed == \"0\") {\n                    var contactErrorObj = [];\n                    var errorCode = \"shippingContactInvalid\";\n                    for (i = 0; i < cdata.ContactError.length; i++) {\n                        var errorField = cdata.ContactError[i].errorField;\n                        var errorMessage = cdata.ContactError[i].errorMessage;\n                        var objdata = new ApplePayError(errorCode, errorField, errorMessage);\n                        contactErrorObj.push(objdata);\n                    }\n                    var applepayreq = {\n                        status: ApplePaySession.STATUS_FAILURE,\n                        errors: contactErrorObj\n                    };\n                    session.completePayment(applepayreq);\n                } else if (cdata.billingAllowed == \"0\") {\n                    var ErrorObj = [];\n                    var errorCode = \"billingContactInvalid\";\n                    for (i = 0; i < cdata.BillingContactError.length; i++) {\n                        var errorField = cdata.BillingContactError[i].errorField;\n                        var errorMessage = cdata.BillingContactError[i].errorMessage;\n                        var objdata = new ApplePayError(errorCode, errorField, errorMessage);\n                        ErrorObj.push(objdata);\n                    }\n                    var applepayreq = {\n                        status: ApplePaySession.STATUS_FAILURE,\n                        errors: ErrorObj\n                    };\n                    session.completePayment(applepayreq);\n                } else if (cdata.shippingAllowed == \"0\") {\n                    var shippingErrorObj = [];\n                    var errorCode = \"shippingContactInvalid\";\n                    for (i = 0; i < cdata.ShippingContactError.length; i++) {\n                        var errorField = cdata.ShippingContactError[i].errorField;\n                        var errorMessage = cdata.ShippingContactError[i].errorMessage;\n                        var objdata = new ApplePayError(errorCode, errorField, errorMessage);\n                        shippingErrorObj.push(objdata);\n                    }\n                    var applepayreq = {\n                        status: ApplePaySession.STATUS_FAILURE,\n                        errors: shippingErrorObj\n                    };\n                    session.completePayment(applepayreq);\n                }\n                // else if(cdata.ContactAllowed == \"1\" &&  cdata.shippingAllowed == \"1\" ){\n                //         const payment = event.payment;\n                //         Aurus._applePayPaymetData = payment;\n                //         session.completePayment(ApplePaySession.STATUS_SUCCESS);\n                // }\t\n                // else if(cdata.ContactAllowed == \"1\" || cdata.shippingAllowed == \"1\" ){\n                //         const payment = event.payment;\n                //         Aurus._applePayPaymetData = payment;\n                //         session.completePayment(ApplePaySession.STATUS_SUCCESS);\n                //     }\n            }).catch(function (rejectData) {\n                console.log(rejectData)\n            })\n        };\n\n    session.begin();\n\n}\n\nfunction getApplePaySession(url) {\n    return new Promise(function (resolve, reject) {\n        var xhr = new XMLHttpRequest();\n        var createSessionUrl = Aurus._priEcstBaseURL;\n        xhr.open('POST', createSessionUrl + 'createsessionApplePay');\n        xhr.onload = function () {\n            if (this.status >= 200 && this.status < 300) {\n                resolve(JSON.parse(xhr.response));\n            } else {\n                reject({\n                    status: this.status,\n                    statusText: xhr.statusText\n                });\n            }\n        };\n        xhr.onerror = function () {\n            reject({\n                status: this.status,\n                statusText: xhr.statusText\n            });\n        };\n        xhr.setRequestHeader(\"Content-Type\", \"application/x-www-form-urlencoded\");\n        xhr.send(\"validationUrl=\" + url);\n    });\n}\n\nfunction authorize(token) {\n    return new Promise(function (resolve, reject) {\n        var xhr = new XMLHttpRequest();\n        var createAuthorizeUrl = jQuery(\"#priEcstBase_urlId\").val();\n        xhr.open('POST', createAuthorizeUrl + 'authorize');\n        xhr.onload = function () {\n            if (this.status >= 200 && this.status < 300) {\n                resolve(xhr.response);\n            } else {\n                reject({\n                    status: this.status,\n                    statusText: xhr.statusText\n                });\n            }\n        };\n        xhr.onerror = function () {\n            reject({\n                status: this.status,\n                statusText: xhr.statusText\n            });\n        };\n        xhr.setRequestHeader(\"Content-Type\", \"application/json\");\n        xhr.send(JSON.stringify(token));\n    });\n}\n\n\n\n\nvar paypalCheckoutJs;\nvar jQuery;\nvar Aurus = {\n    googlePayLoaded: false,\n    klarnaClientToken: \"\",\n    klarnaAuthToken: \"\",\n    urlIndicator: \"\",\n    klarnaPayMethodType: \"\",\n    apiversion: \"\",\n    priEcstBaseURL: \"\",\n    secEcstBaseURL: \"\",\n    ecstCdnURL: \"\",\n    aurusSessionId: \"\",\n    applePayPaymetData: \"\",\n    orderAmount: \"0.00\",\n    shippingCost: \"0.00\",\n    subTotal: \"0.00\",\n    discount: \"0.00\",\n    estimatedTax: \"0.00\",\n    shippingMethod: [],\n    selectedShippingMethod: \"\",\n    newOrdertotal: \"0.00\",\n    newShippingCost: \"0.00\",\n    giftWrap: \"0.00\",\n    coupon: \"0.00\",\n    ottResponseData: \"\",\n    hostDomainURL: \"\",\n    billerToken: \"\",\n    PaypalOrderID: \"\",\n    AltPaypal: \"0\",\n    AltVenmo: \"0\",\n    AltKlarna: \"0\",\n    AltApplePay: \"0\",\n    env: \"\",\n    cid: \"\",\n    currencyCode: \"\",\n    purchaseCountry: \"\",\n    billerFailed: false,\n    sessionFailed: false,\n    applePayAbort: false,\n    walletID: \"\",\n    checkOutData: \"\",\n    shippingAddress: \"\",\n    billingAddress: \"\",\n    skipBillingAddressskipShippingAddress: \"\",\n    skipBillingAddress: \"\",\n    lineItems: \"\",\n    additionalChargeIndicator: [],\n    skipRequiredShippingContact: \"\",\n    get getAdditionalChargeIndicator() {\n        return this.additionalChargeIndicator;\n    },\n    set _additionalChargeIndicator(additionalChargeIndicator) {\n        this.additionalChargeIndicator = additionalChargeIndicator;\n    },\n    get getLineItems() {\n        return this.lineItems;\n    },\n    set _lineItems(lineItems) {\n        this.lineItems = lineItems;\n    },\n    get getSkipShippingAddress() {\n        return this.skipShippingAddress;\n    },\n    set _SkipShippingAddress(skipShippingAddress) {\n        this.skipShippingAddress = skipShippingAddress;\n    },\n    get getSkipBillingAddress() {\n        return this.skipBillingAddress;\n    },\n    set _SkipBillingAddress(skipBillingAddress) {\n        this.skipBillingAddress = skipBillingAddress;\n    },\n    get getShippingAddress() {\n        return this.shippingAddress;\n    },\n    set _ShippingAddress(shippingAddress) {\n        this.shippingAddress = shippingAddress;\n    },\n    get getBillingAddress() {\n        return this.billingAddress;\n    },\n    set _BillingAddress(billingAddress) {\n        this.billingAddress = billingAddress;\n    },\n    get getalternatePaymentMatrix() {\n        return JSON.parse(this.alternatePaymentMatrix);\n    },\n    set _AltPaypal(val) {\n        this.AltPaypal = val;\n    },\n    get getAltPaypal() {\n        return this.AltPaypal;\n    },\n    set _AltVenmo(val) {\n        this.AltVenmo = val;\n    },\n    get getAltVenmo() {\n        return this.AltVenmo;\n    },\n    set _AltKlarna(val) {\n        this.AltKlarna = val;\n    },\n    get getAltKlarna() {\n        return this.AltKlarna;\n    },\n    set _AltApplePay(val) {\n        this.AltApplePay = val;\n    },\n    get getAltApplePay() {\n        return this.AltApplePay;\n    },\n    get _apiversion() {\n        return this.apiversion;\n    },\n\n    set _orderAmount(amt) {\n        this.orderAmount = amt;\n    },\n    get getOrderAmount() {\n        return this.orderAmount;\n    },\n\n    set _shippingCost(cost) {\n        this.shippingCost = cost;\n    },\n    get getShippingCost() {\n        return this.shippingCost;\n    },\n    set _newOrdertotal(val) {\n        this.newOrdertotal = val;\n    },\n    get getNewOrdertotal() {\n        return this.newOrdertotal;\n    },\n    set _newShippingCost(cost) {\n        this.newShippingCost = cost;\n    },\n    get getNewShippingCost() {\n        return this.newShippingCost;\n    },\n\n    set _selectedShippingMethod(val) {\n        this.selectedShippingMethod = val;\n    },\n    get getSelectedShippingMethod() {\n        return this.selectedShippingMethod;\n    },\n    set _subTotal(total) {\n        this.subTotal = total;\n    },\n    get getSubTotal() {\n        return this.subTotal;\n    },\n\n    set _discount(disc) {\n        this.discount = disc;\n    },\n    get getDiscount() {\n        return this.discount;\n    },\n\n    set _estimatedTax(eTax) {\n        this.estimatedTax = eTax;\n    },\n    get getEstimatedTax() {\n        return this.estimatedTax;\n    },\n\n    set _shippingMethod(smethod) {\n        this.shippingMethod = smethod;\n    },\n    get getShippingMethod() {\n        return this.shippingMethod;\n    },\n\n    set _currencyCode(val) {\n        this.currencyCode = val;\n    },\n    get getCurrencyCode() {\n        return this.currencyCode;\n    },\n    set _purchaseCountry(val) {\n        this.purchaseCountry = val;\n    },\n    get getPurchaseCountry() {\n        return this.purchaseCountry;\n    },\n\n    set _giftWrap(val) {\n        this.giftWrap = val;\n    },\n    get getGiftWrap() {\n        return this.giftWrap;\n    },\n    set _coupon(val) {\n        this.coupon = val;\n    },\n    get getCoupon() {\n        return this.coupon;\n    },\n\n    set _ottResponseData(ottResp) {\n        this.ottResponseData = ottResp;\n    },\n    get getOttResponseData() {\n        return this.ottResponseData;\n    },\n    set setKlarnaPayMethodType(setKlarnaPayMethodType) {\n        this.klarnaPayMethodType = setKlarnaPayMethodType;\n    },\n    get getKlarnaPayMethodType() {\n        return this.klarnaPayMethodType;\n    },\n    set _paypalData(pdata) {\n        this.paypalCheckoutData = pdata;\n    },\n    set kct(kct) {\n        this.klarnaClientToken = kct;\n    },\n    set kat(kat) {\n        this.klarnaAuthToken = kat;\n    },\n\n    get getKlarnaClientToken() {\n        return this.klarnaClientToken;\n    },\n    get getKlarnaAuthToken() {\n        return this.klarnaAuthToken;\n    },\n\n    set _setEnv(data) {\n        this.env = data;\n    },\n    get getEnv() {\n        return this.env;\n    },\n    set _setCid(data) {\n        this.cid = data;\n    },\n    get getCid() {\n        return this.cid;\n    },\n    set _setBillerFailed(data) {\n        this.billerFailed = data;\n    },\n    get getBillerFailed() {\n        return this.billerFailed;\n    },\n    set _setWalletID(data) {\n        this.walletID = data;\n    },\n    get getWalletID() {\n        return this.walletID;\n    },\n    set _setSessionFailed(data) {\n        this.sessionFailed = data;\n    },\n    get getSessionFailed() {\n        return this.sessionFailed;\n    },\n    set _setApplePayAbort(data) {\n        this.applePayAbort = data;\n    },\n    get getApplePayAbort() {\n        return this.applePayAbort;\n    },\n    set _checkOutData(bToken) {\n        this.checkOutData = bToken;\n    },\n    get getCheckOutData() {\n        return this.checkOutData;\n    },\n    getcdate() {\n        var now = new Date();\n        return ('0' + (now.getMonth() + 1)).slice(-2) + '' + ('0' + now.getDate()).slice(-2) + '' + now.getFullYear();\n    },\n\n    getctime() {\n        var now = new Date();\n        return ('0' + now.getHours()).slice(-2) + '' + ('0' + (now.getMinutes())).slice(-2) + '' + ('0' + now.getSeconds()).slice(-2);\n    },\n\n    set _urlIndicator(_urlIndicator) {\n        this.urlIndicator = _urlIndicator;\n    },\n\n    get getUrlIndicator() {\n        return this.urlIndicator;\n    },\n\n    set _aurusSessionId(session) {\n        this.aurusSessionId = session;\n    },\n    get getAurusSession() {\n        return this.aurusSessionId;\n    },\n    get _priEcstBaseURL() {\n        return this.priEcstBaseURL;\n    },\n    get _secEcstBaseURL() {\n        return this.secEcstBaseURL;\n    },\n    get _ecstCdnURL() {\n        return this.ecstCdnURL;\n    },\n\n    get _hostDomainURL() {\n        return this.hostDomainURL;\n    },\n    get getSkipRequiredShippingContact() {\n        return this.skipRequiredShippingContact;\n    },\n    set _skipRequiredShippingContact(skipRequiredShippingContact) {\n        this.skipRequiredShippingContact = skipRequiredShippingContact;\n    },\n\n    aurusInit: function (custData, jquery) {\n        window.console.log('custData:::::', custData);\n        jQuery = jquery;\n        Aurus._orderAmount = custData.order.order_amount.amount;\n        Aurus._purchaseCountry = custData.order.purchaseCountry;\n        Aurus._currencyCode = custData.order.purchaseCurrency;\n        Aurus._aurusSessionId = custData.sessionId;\n        Aurus._ShippingAddress = custData.customer.shipping_address;\n        Aurus._BillingAddress = custData.customer.billing_address;\n        Aurus._SkipShippingAddress = custData.customer.skipShippingAddress;\n        Aurus._urlIndicator = custData.apmMatrix;\n        Aurus._skipRequiredShippingContact = custData.customer.skipRequiredShippingContact;\n        Aurus._setEnv = custData.env.toLowerCase();\n        Aurus._setCid = custData.aurusClientId;\n        if (this.getEnv == \"live\" || this.getEnv == \"sandbox\") {\n            if (this.getEnv == \"live\") {\n                Aurus.priEcstBaseURL = \"https://pecst03.aurusepay.com/storeservices/ecom/\";\n                Aurus.secEcstBaseURL = \"https://ecst03.auruspay.com/storeservices/ecom/\";\n                Aurus.ecstCdnURL = \"https://pecst03.aurusepay.com/storeservices/\";\n                Aurus.hostDomainURL = \"?d1=es43.auruspay.com&d2=es03.auruspay.com\";\n            } else if (this.getEnv == \"sandbox\") {\n                Aurus.priEcstBaseURL = \"https://uatps48.aurusepay.com/storeservices/ecom/\";\n                Aurus.secEcstBaseURL = \"https://uatps48.aurusepay.com/storeservices/ecom/\";\n                Aurus.ecstCdnURL = \"https://uatps48.aurusepay.com/storeservices/\";\n                Aurus.hostDomainURL = \"?d1=uat42.auruspay.com&d2=uat42.auruspay.com\";\n            } else {\n                window.parent.postMessage(\"AurusScriptError=Invalid_Environment\", '*');\n            }\n\n            if (((this.getUrlIndicator).charAt(6) == '1') && (jQuery(\"#applepayDiv\").length)) {\n                jQuery(\".apple-pay-button-with-text\").attr(\"style\", \"display:block\");\n                this.enableApplePay(custData);\n            } else {}\n\n            if (((this.getUrlIndicator).charAt(14) == '1') && (jQuery(\"#venmoDiv\").length)) {\n                if (!jQuery('#venmoDiv').children().length > 0) {\n                    jQuery(\"#venmoDiv\").empty();\n                    this.initVenmo();\n                }\n            } else {}\n\n            if (((this.getUrlIndicator).charAt(3) == '1') && (jQuery(\"#paypalDiv\").length)) {\n\n                if (!jQuery('#paypalDiv').children().length > 0) {\n                    jQuery(\"#paypalDiv\").empty();\n                    this.importPaypalURL(custData);\n\n                } else {\n                    //paypalCheckoutJs = true;\n                    this.importPaypalURL(custData);\n                }\n                this.initPayPal(custData);\n            } else {}\n\n            if (((this.getUrlIndicator).charAt(13) == '1') && (jQuery(\"#klarnaDiv\").length)) {\n                jQuery(\"#klarnaDiv\").empty();\n                this.enableKlarna(custData);\n            } else {}\n\n\n            if (((this.getUrlIndicator).charAt(10) == '1') && (jQuery(\"#googlepayDiv\").length)) {\n                this.initGooglePay(custData);\n            } else {\n                console.log(\"GooglePay not Suppoerted\");\n            }\n\n        } else {\n            window.parent.postMessage(\"AurusScriptError=Invalid_Environment\", '*');\n        }\n\n    },\n\n    /* Google Pay Starts here*/\n\n    googleGatewayId: \"\",\n    googleMerchantId: \"\",\n    googlePayPaymentData: \"\",\n\n    set _googleGatewayId(gatewayId) {\n        this.googleGatewayId = gatewayId;\n    },\n    get getGoogleGatewayId() {\n        return this.googleGatewayId;\n    },\n\n    set _googleMerchantId(merchantId) {\n        this.googleMerchantId = merchantId;\n    },\n    get getGoogleMerchantId() {\n        return this.googleMerchantId;\n    },\n    set _gPayPaymetData(gpaydata) {\n        this.googlePayPaymentData = gpaydata;\n        Aurus._setWalletID = \"11\";\n        Aurus.initWalletToken();\n    },\n\n    get gPayPaymetData() {\n        return this.googlePayPaymentData;\n    },\n\n    initGooglePay: function (custData) {\n\n        if (!jQuery('#googlepayDiv').children().length > 0) {\n            var wAreaId = document.getElementById('googlepayDiv');\n            wAreaId.innerHTML = ''\n            var gPayDiv = document.createElement(\"div\");\n            gPayDiv.setAttribute(\"id\", \"aurus-google-pay-containerId\");\n            //gPayDiv.setAttribute(\"class\", \"aurus-sezzel-checkout\");\n            wAreaId.appendChild(gPayDiv);\n        }\n        //  if (jQuery(\"#googlePayDiv_Bottom\").length) {\n        //      if (!jQuery('#googlePayDiv_Bottom').children().length > 0) {\n        //          var wAreaId = document.getElementById('googlePayDiv_Bottom');\n        //          wAreaId.innerHTML = ''\n        //          var gPayDiv = document.createElement(\"div\");\n        //          gPayDiv.setAttribute(\"id\", \"aurus-google-pay-containerId-bottom\");\n        //          gPayDiv.setAttribute(\"class\", \"aurus-sezzel-checkout\");\n        //          wAreaId.appendChild(gPayDiv);\n        //      }\n        //  }\n        //Aurus._googleGatewayId=\"auruspay\";\n        //Aurus._googleMerchantId=\"22731101231178566\";\n        if (!Aurus.googlePayLoaded) {\n            Aurus.importGooglePayurl();\n            Aurus.googlePayLoaded = true; // Set the flag to true after loading\n        }\n    },\n\n    importGooglePayurl: function () {\n\n        let googlePayPaymentJS = document.createElement('script');\n        googlePayPaymentJS.setAttribute(\"type\", \"text/javascript\")\n        googlePayPaymentJS.setAttribute(\"src\", \"https://pay.google.com/gp/p/js/pay.js\")\n\n        googlePayPaymentJS.onload = function () {\n            onGooglePayLoaded();\n        };\n        document.head.append(googlePayPaymentJS);\n    },\n\n    initWalletToken: function () {\n\n        var tokenReqdata = Aurus.getHostRequestJSON(Aurus.buildGooglePaySessionTokenRequestJson());\n        Aurus.getSessionTokenPrimary(tokenReqdata, Aurus.googlepaySessionTokenResponseHandler);\n    },\n\n    buildGooglePaySessionTokenRequestJson: function () {\n        //  alert(\"inside getBillerTokenRequestJson\");\n        var gPayTokenJson = \"\";\n        gPayTokenJson = {\n            \"4.20\": \"840\",\n            \"4.21\": \"840\",\n            \"12.63\": Aurus.aurusSessionId,\n            \"12.88\": \"1\",\n            \"4.36\": \"28\",\n            \"12.89\": Aurus.getWalletID,\n            \"3.21\": Aurus._apiversion,\n            \"12.90\": this.toHex(Aurus.googlePayPaymentData),\n            \"1.1\": \"\",\n            \"1.2\": \"\",\n            \"2.1\": \"C0N43N4U45RLN8R1\",\n            \"1.3\": \"\",\n            \"1.4\": Aurus.getCid,\n            \"2.2\": \"EE928BC346F8\",\n            \"3.1\": \"8\",\n            \"2.3\": Aurus.srcIPAddress,\n            \"4.1\": \"132\",\n            \"4.2\": \"000018\",\n            \"3.4\": \"00\",\n            \"3.5\": \"1.0\",\n            \"3.6\": \"1.0\",\n            \"3.8\": \"1\",\n            \"4.18\": this.getcdate(),\n            \"4.19\": this.getctime()\n        };\n\n        return JSON.stringify(gPayTokenJson);\n    },\n\n    googlepaySessionTokenResponseHandler: function (data) {\n        if (data.response_code == \"00000\" && data.response_text == \"APPROVED\") {\n            //   Aurus.blankToken();\n            digitalWalletResponseHandler(buildMerchantResponseJson(data));\n        } else {\n            //  Aurus.blankToken();\n            Aurus._setSessionFailed = true;\n            Aurus._setWalletID = \"11\";\n            digitalWalletResponseHandler(buildMerchantResponseJson(data));\n        }\n    },\n\n    /* Google Pay Ends hete */\n\n    set _applePayPaymetData(applepayToken) {\n        this.applePayPaymetData = applepayToken;\n        Aurus.initappleWalletToken();\n    },\n    get getapplePayPaymetData() {\n        return this.applePayPaymetData;\n    },\n    set _billerToken(bToken) {\n        this.billerToken = bToken;\n    },\n    get geBillerToken() {\n        return this.billerToken;\n    },\n    set _PaypalOrderID(orderID) {\n        this.PaypalOrderID = orderID;\n    },\n    get getPaypalOrderID() {\n        return this.PaypalOrderID;\n    },\n\n    enableKlarna: function (custData) {\n        Aurus.setKlarnaPayMethodType = custData.paymentMethod;\n        Aurus._setWalletID = \"14\",\n            this.createKlarnaContainer(); // creating container for KlarnaPay\n        var klarnaCustData = this.getCustInfoForKlarna(custData); // creating custDataObj for KlarnaPay\n        this.getBillerToken(klarnaCustData, this.klarnaPayBillerTokenResponseHandler); // get client token, pay-Method-Type\n\n    },\n\n    createKlarnaContainer: function () {\n        if (jQuery('#klarnaDiv').is(':empty')) {\n            var klarnaContainer = document.createElement(\"div\");\n            klarnaContainer.setAttribute(\"id\", \"klarna_container\");\n            klarnaContainer.setAttribute(\"style\", \"width: 100%;\");\n            document.getElementById('klarnaDiv').appendChild(klarnaContainer);\n        }\n    },\n\n    getCustInfoForPaypal: function (custData) {\n        var consumerData;\n        if (custData.customer.skipShippingAddress == 1) {\n            consumerData = {\n                \"intent\": custData.order.intent,\n                \"processing_instruction\": \"ORDER_SAVED_EXPLICITLY\",\n                \"purchase_units\": [{\n                    \"amount\": {\n                        \"currency_code\": custData.order.order_amount.currency,\n                        \"value\": custData.order.order_amount.amount,\n                    },\n                    \"invoice_number\": custData.order.invoiceNumber,\n                    \"soft_descriptor\": custData.order.softDescriptor\n                }]\n            };\n        } else {\n            consumerData = {\n                \"intent\": custData.order.intent,\n                \"processing_instruction\": \"ORDER_SAVED_EXPLICITLY\",\n\n                \"purchase_units\": [{\n                    \"amount\": {\n                        \"currency_code\": custData.order.order_amount.currency,\n                        \"value\": custData.order.order_amount.amount,\n                    },\n                    \"invoice_number\": custData.order.invoiceNumber,\n                    \"soft_descriptor\": custData.order.softDescriptor,\n                    \"shipping\": {\n                        \"name\": {\n                            \"full_name\": custData.customer.shipping_address.firstName.trim() + \" \" + custData.customer.shipping_address.lastName.trim()\n                        },\n                        \"address\": {\n                            \"address_line_1\": custData.customer.shipping_address.street,\n                            \"address_line_2\": custData.customer.shipping_address.street2,\n                            \"admin_area_2\": custData.customer.shipping_address.city,\n                            \"admin_area_1\": custData.customer.shipping_address.state,\n                            \"postal_code\": custData.customer.shipping_address.postalCode,\n                            \"country_code\": custData.customer.shipping_address.countryCode\n                        }\n                    }\n                }]\n            };\n            if (custData.customer.isShippingPreference == 1) {\n                consumerData.application_context = {\n                    \"shipping_preference\": \"SET_PROVIDED_ADDRESS\"\n                }\n            }\n        }\n        console.log('consumerData===', consumerData);\n        return consumerData;\n    },\n\n\n    getCustInfoForKlarna: function (custData) {\n        var consumerData = {\n            \"purchase_country\": \"\" + custData.order.purchaseCountry + \"\",\n            \"purchase_currency\": \"\" + custData.order.purchaseCurrency + \"\",\n            \"locale\": \"\" + custData.order.locale + \"\",\n            \"order_amount\": \"\" + custData.order.order_amount.amount + \"\",\n            \"order_tax_amount\": \"\" + custData.order.tax_amount.amount + \"\",\n            \"order_lines\": [],\n            \"billing_address\": {\n                \"given_name\": custData.customer.billing_address.firstName,\n                \"family_name\": custData.customer.billing_address.lastName,\n                \"email\": custData.customer.billing_address.emailAddress,\n                \"street_address\": custData.customer.billing_address.street,\n                \"street_address2\": custData.customer.billing_address.street2,\n                \"postal_code\": custData.customer.billing_address.postalCode,\n                \"city\": custData.customer.billing_address.city,\n                \"region\": custData.customer.billing_address.state,\n                \"phone\": custData.customer.billing_address.phoneNumber,\n                \"country\": custData.customer.billing_address.countryCode\n            }\n        }\n        if ((custData.isBopis != \"\" && custData.isBopis != undefined && custData.isBopis != null) || (custData.isBopac != \"\" && custData.isBopac != undefined && custData.isBopac != null)) {\n            if (custData.isBopis == \"0\" && custData.isBopac == \"0\") {\n                var shipping_address = {\n                    \"given_name\": custData.customer.shipping_address.firstName,\n                    \"family_name\": custData.customer.shipping_address.lastName,\n                    \"email\": custData.customer.shipping_address.emailAddress,\n                    \"street_address\": custData.customer.shipping_address.street,\n                    \"street_address2\": custData.customer.shipping_address.street2,\n                    \"postal_code\": custData.customer.shipping_address.postalCode,\n                    \"city\": custData.customer.shipping_address.city,\n                    \"region\": custData.customer.shipping_address.state,\n                    \"phone\": custData.customer.shipping_address.phoneNumber,\n                    \"country\": custData.customer.shipping_address.countryCode\n                }\n                consumerData.shipping_address = shipping_address;\n            }\n        } else {\n            var shipping_address = {\n                \"given_name\": custData.customer.shipping_address.firstName,\n                \"family_name\": custData.customer.shipping_address.lastName,\n                \"email\": custData.customer.shipping_address.emailAddress,\n                \"street_address\": custData.customer.shipping_address.street,\n                \"street_address2\": custData.customer.shipping_address.street2,\n                \"postal_code\": custData.customer.shipping_address.postalCode,\n                \"city\": custData.customer.shipping_address.city,\n                \"region\": custData.customer.shipping_address.state,\n                \"phone\": custData.customer.shipping_address.phoneNumber,\n                \"country\": custData.customer.shipping_address.countryCode\n            }\n            consumerData.shipping_address = shipping_address;\n        }\n\n\n        for (var i = 0; i < (custData.order.items.length); i++) {\n            var obj = {\n                \"reference\": \"\" + custData.order.items[i].reference + \"\",\n                \"quantity\": custData.order.items[i].quantity,\n                \"total_amount\": custData.order.items[i].totalAmount,\n                \"name\": \"\" + custData.order.items[i].name + \"\",\n                \"total_discount_amount\": custData.order.items[i].totalDiscountAmount,\n                \"total_tax_amount\": custData.order.items[i].totalTaxAmount,\n                \"type\": \"\" + custData.order.items[i].type + \"\",\n                \"unit_price\": custData.order.items[i].price.amount,\n                \"tax_rate\": custData.order.items[i].taxRate\n            }\n            consumerData['order_lines'].push(obj);\n\n        }\n\n        if (custData.store_pickup) {\n            var shippingMethod = \"\";\n            if ((custData.isBopis != \"\" && custData.isBopis != undefined && custData.isBopis != null) || (custData.isBopac != \"\" && custData.isBopac != undefined && custData.isBopac != null)) {\n                if (custData.isBopis == \"1\") {\n                    shippingMethod = \"store pick-up\"\n                } else if (custData.isBopac == \"1\") {\n                    shippingMethod = \"pick-up point\"\n                } else if (custData.isBopac == \"1\" && custData.isBopis == \"1\") {\n                    shippingMethod = \"store pick-up\";\n                } else {\n                    shippingMethod = \"\";\n                }\n            } else {\n                shippingMethod = \"\"\n            }\n            var attachment = {\n                \"content_type\": \"application/vnd.klarna.internal.emd-v2+json\",\n                \"body\": {\n                    \"other_delivery_address\": [{\n                        \"shipping_method\": shippingMethod,\n                        \"shipping_type\": \"normal\",\n                        \"first_name\": custData.customer.billing_address.firstName,\n                        \"last_name\": custData.customer.billing_address.lastName,\n                        \"street_address\": custData.store_pickup.street_address,\n                        \"street_number\": custData.store_pickup.street_number,\n                        \"postal_code\": custData.store_pickup.postal_code,\n                        \"city\": custData.store_pickup.city,\n                        \"country\": custData.store_pickup.country,\n\n                    }]\n                }\n\n            }\n            if (shippingMethod != \"\") {\n                consumerData.attachment = attachment;\n            }\n        }\n        return consumerData;\n    },\n\n    getBillerToken: function (custData, responseHandler) {\n        var url = Aurus._priEcstBaseURL + \"altbillertoken\" + Aurus._hostDomainURL;\n        var requestData = Aurus.getHostRequestJSON(Aurus.buildBillerRequestPayload(custData));\n        this.ajaxCall(requestData, url, responseHandler);\n    },\n\n    buildBillerRequestPayload: function (custData) {\n        var payload = {\n            \"1.1\": \"\",\n            \"1.2\": \"\",\n            \"1.3\": \"\",\n            \"1.4\": Aurus.getCid,\n            \"4.1\": \"130\",\n            \"12.73\": \"1\",\n            \"12.63\": Aurus.getAurusSession,\n            \"4.36\": \"33\",\n            \"4.15\": \"1\",\n            \"12.89\": Aurus.getWalletID,\n            \"3.21\": Aurus._apiversion,\n            \"12.90\": this.toHex(JSON.stringify(custData)),\n            \"2.1\": \"C0N43N4U45RLN8R1\",\n            \"12.102\": \"4\",\n            \"2.2\": \"000C29BFD6C0\",\n            \"2.3\": Aurus.srcIPAddress,\n            \"4.18\": this.getcdate(),\n            \"4.19\": this.getctime()\n        };\n        return JSON.stringify(payload);\n\n    },\n\n\n    ajaxCall: function (requestData, url, responseHandler) {\n        jQuery.ajax({\n            url: url,\n            async: false,\n            dataType: 'json',\n            type: 'post',\n            contentType: 'application/x-www-form-urlencoded',\n            data: requestData,\n            success: function (data) {\n                responseHandler(data);\n            },\n            error: function (jqXHR, textStatus, errorThrown) {}\n        });\n    },\n    enableApplePay: function (custData) {\n        this.initApplePay(custData);\n    },\n\n    initApplePay: function (custData) {\n        if (window.ApplePaySession) {\n            if (ApplePaySession.canMakePayments) {\n                if (!!document.getElementById(\"applepayDiv\")) {\n                    document.getElementById(\"applepayDiv\").innerHTML = \"\";\n                    document.getElementById(\"applepayDiv\").insertAdjacentHTML('afterbegin', appleWalletDiv);\n                } else {}\n\n                if (!!document.getElementById(\"applepayDiv_Bottom\")) {\n                    document.getElementById(\"applepayDiv_Bottom\").innerHTML = \"\";\n                    document.getElementById(\"applepayDiv_Bottom\").insertAdjacentHTML('afterbegin', appleWalletDiv);\n                }\n                showApplePayButton();\n            }\n        } else {}\n\n        // Aurus._lineItems =this.importLineItems(custData);\n        Aurus._orderAmount = parseFloat(custData.order.order_amount.amount).toFixed(2);\n        Aurus._shippingCost = parseFloat(custData.order.shipping_amount.amount).toFixed(2);\n        Aurus._subTotal = parseFloat(custData.order.item_total.amount).toFixed(2);\n        //  Aurus._discount = parseFloat(custData.order.discounts.amount).toFixed(2);\n        Aurus._estimatedTax = parseFloat(custData.order.tax_amount.amount).toFixed(2);\n        if (custData.shippingMethods != undefined && custData.shippingMethods != \"\" && custData.shippingMethods != null) {\n            Aurus._shippingMethod = custData.shippingMethods;\n        }\n        Aurus._giftWrap = parseFloat(custData.order.gift_wrap.amount).toFixed(2);\n        //  Aurus._coupon = parseFloat(custData.order.coupon.amount).toFixed(2);\n        Aurus.importApplePayurl();\n        Aurus._lineItems = this.importLineItems(custData);\n        Aurus.checkBillingAddress(custData);\n    },\n\n    checkBillingAddress: function (custData) {\n        if (Aurus.getBillingAddress != \"\" && Aurus.getBillingAddress != null && Aurus.getBillingAddress != undefined) {\n            if (\n                (Aurus.getBillingAddress.firstName != \"\" && Aurus.getBillingAddress.lastName != \"\" && Aurus.getBillingAddress.emailAddress != \"\" && Aurus.getBillingAddress.phoneNumber != \"\" && Aurus.getBillingAddress.street != \"\" && Aurus.getBillingAddress.city != \"\" && Aurus.getBillingAddress.state != \"\" && Aurus.getBillingAddress.postalCode != \"\" && Aurus.getBillingAddress.countryCode != \"\") &&\n                (Aurus.getBillingAddress.firstName != null && Aurus.getBillingAddress.lastName != null && Aurus.getBillingAddress.emailAddress != null && Aurus.getBillingAddress.phoneNumber != null && Aurus.getBillingAddress.street != null && Aurus.getBillingAddress.city != null && Aurus.getBillingAddress.state != null && Aurus.getBillingAddress.postalCode != null && Aurus.getBillingAddress.countryCode != null) &&\n                (Aurus.getBillingAddress.firstName != undefined && Aurus.getBillingAddress.lastName != undefined && Aurus.getBillingAddress.emailAddress != undefined && Aurus.getBillingAddress.phoneNumber != undefined && Aurus.getBillingAddress.street != undefined && Aurus.getBillingAddress.city != undefined && Aurus.getBillingAddress.state != undefined && Aurus.getBillingAddress.postalCode != undefined && Aurus.getBillingAddress.countryCode != undefined)\n            ) {\n                Aurus._SkipBillingAddress = \"0\";\n            } else {\n                Aurus._SkipBillingAddress = \"1\";\n            }\n        } else {\n            Aurus._SkipBillingAddress = \"1\";\n        }\n    },\n\n    importLineItems: function (custData) {\n        var lineItems = '';\n        if (custData.order.coupon != null && custData.order.coupon != undefined && custData.order.discounts != null && custData.order.discounts != undefined) {\n            Aurus._discount = parseFloat(custData.order.discounts.amount).toFixed(2);\n            Aurus._coupon = parseFloat(custData.order.coupon.amount).toFixed(2);\n            lineItems = [{\n                    \"label\": \"Subtotal\",\n                    \"amount\": Aurus.getSubTotal,\n                    \"type\": \"final\"\n                },\n                {\n                    \"label\": \"Gift Wrap\",\n                    \"amount\": Aurus.getGiftWrap,\n                    \"type\": \"final\"\n                },\n                {\n                    \"label\": \"Coupon\",\n                    \"amount\": Aurus.getCoupon,\n                    \"type\": \"final\"\n                },\n                {\n                    \"label\": \"Discount\",\n                    \"amount\": Aurus.getDiscount,\n                    \"type\": \"final\"\n                },\n                {\n                    \"label\": \"Shipping\",\n                    \"amount\": Aurus.getShippingCost,\n                    \"type\": \"final\"\n                },\n                {\n                    \"label\": \"Estimated Tax\",\n                    \"amount\": Aurus.getEstimatedTax,\n                    \"type\": \"final\"\n                },\n            ];\n        } else {\n\n            lineItems = [{\n                    \"label\": \"Subtotal\",\n                    \"amount\": Aurus.getSubTotal,\n                    \"type\": \"final\"\n                },\n                {\n                    \"label\": \"Gift Wrap\",\n                    \"amount\": Aurus.getGiftWrap,\n                    \"type\": \"final\"\n                },\n                {\n                    \"label\": \"Shipping\",\n                    \"amount\": Aurus.getShippingCost,\n                    \"type\": \"final\"\n                },\n                {\n                    \"label\": \"Estimated Tax\",\n                    \"amount\": Aurus.getEstimatedTax,\n                    \"type\": \"final\"\n                },\n            ];\n\n        }\n\n        if (custData.order.items != \"\" && custData.order.items != undefined && custData.order.items != null) {\n            var jObj = [];\n            for (i = 0; i < custData.order.items.length; i++) {\n                var obj;\n                if (custData.order.items[i].additionalChargeIndicator == \"1\") {\n                    obj = {\n                        \"label\": custData.order.items[i].name,\n                        \"amount\": custData.order.items[i].totalAmount,\n                    }\n                    lineItems.push(obj);\n                    jObj.push(obj);\n                }\n            }\n            Aurus._additionalChargeIndicator = jObj;\n            // lineItems.push(jObj);\n        }\n\n        return lineItems;\n    },\n\n    importApplePayurl: function () {\n\n        var applePayCss = document.getElementsByTagName('head')[0];\n        var csslink = document.createElement('link');\n        csslink.rel = 'stylesheet';\n        csslink.type = 'text/css';\n        csslink.href = Aurus._ecstCdnURL + 'css/applePayLbrands.css';\n        csslink.media = 'all';\n        applePayCss.appendChild(csslink);\n    },\n    getApplePayRequestJson: function () {\n        var gPayTokenJson = \"\";\n        gPayTokenJson = {\n            \"4.20\": \"840\",\n            \"4.21\": \"840\",\n            \"12.63\": Aurus.aurusSessionId,\n            \"12.88\": \"1\",\n            \"12.89\": \"7\",\n            \"3.21\": Aurus._apiversion,\n            \"12.90\": this.toHex(JSON.stringify(Aurus.applePayPaymetData)),\n            \"1.1\": \"\",\n            \"1.2\": \"\",\n            \"2.1\": \"C0N43N4U45RLN8R1\",\n            \"1.3\": \"\",\n            \"1.4\": Aurus.getCid,\n            \"2.2\": \"EE928BC346F8\",\n            \"3.1\": \"8\",\n            \"2.3\": Aurus.srcIPAddress,\n            \"4.1\": \"132\",\n            \"4.2\": \"000018\",\n            \"3.4\": \"00\",\n            \"3.5\": \"1.0\",\n            \"3.6\": \"1.0\",\n            \"3.8\": \"1\",\n            \"4.18\": this.getcdate(),\n            \"4.19\": this.getctime()\n        };\n\n        return JSON.stringify(gPayTokenJson);\n\n    },\n    initappleWalletToken: function () {\n        var url = Aurus._priEcstBaseURL + 'altsessiontoken' + Aurus._hostDomainURL;\n        var requestData = Aurus.getHostRequestJSON(Aurus.getApplePayRequestJson());\n        this.ajaxCall(requestData, url, Aurus.applepayTokenResponseHandler);\n    },\n    applepayTokenResponseHandler: function (data) {\n        if (data.response_code == \"00000\" && data.response_text == \"APPROVAL\") {\n            Aurus.blankToken();\n            Aurus._setWalletID = \"7\";\n            digitalWalletResponseHandler(buildMerchantResponseJson(data));\n        } else {\n            Aurus.blankToken();\n            Aurus._setWalletID = \"7\";\n            Aurus._setSessionFailed = true;\n            digitalWalletResponseHandler(buildMerchantResponseJson(data));\n        }\n\n\n\n    },\n    klarnaPayBillerTokenResponseHandler: function (data) {\n        if (data.response_code == \"00000\" && data.response_text == \"APPROVAL\") {\n            Aurus.kct = data.billerToken;\n            Aurus.renderKlarnaElements();\n        } else {\n            Aurus._setBillerFailed = true;\n            Aurus._setWalletID = \"14\",\n                digitalWalletResponseHandler(buildMerchantResponseJson(data));\n        }\n\n\n    },\n\n    renderKlarnaElements: function () {\n        var importscript = document.createElement('script');\n        importscript.setAttribute(\"type\", \"text/javascript\");\n        importscript.setAttribute(\"src\", \"https://x.klarnacdn.net/kp/lib/v1/api.js\");\n        document.getElementsByTagName(\"head\")[0].appendChild(importscript);\n        if (jQuery(\"#klarnaButtonDiv_Top\").length) {\n            jQuery(\"#KlarnaButton\").remove();\n            var klarnaButtonDiv = document.createElement(\"div\");\n            klarnaButtonDiv.setAttribute(\"style\", \"width: 100%;\");\n            klarnaButtonDiv.setAttribute(\"id\", \"KlarnaButton\");\n            document.getElementById('klarnaButtonDiv_Top').appendChild(klarnaButtonDiv);\n\n            var klarnaButton = document.createElement(\"button\");\n            klarnaButton.setAttribute(\"class\", \"authorize\");\n            klarnaButton.setAttribute(\"style\", \" height: 50px;  background-color: #000000; color: white;  border: none; width: 100%; \");\n            klarnaButtonDiv.appendChild(klarnaButton);\n\n            var firstTXT = document.createElement(\"span\");\n            firstTXT.setAttribute(\"class\", \"Span\");\n            firstTXT.innerHTML = 'Buy with ';\n            klarnaButton.appendChild(firstTXT);\n\n            var secTXT = document.createElement(\"img\");\n            secTXT.setAttribute(\"class\", \"img\");\n            secTXT.setAttribute(\"style\", \"width: 56px;margin-bottom: 0px;\");\n            secTXT.setAttribute(\"src\", Aurus._ecstCdnURL + \"images/klarna.svg\");\n            klarnaButton.appendChild(secTXT);\n\n            // var KlarnaLegalText_Lbrands = document.createElement(\"label\");\n            // KlarnaLegalText_Lbrands.setAttribute(\"class\", \"KLARNA_Legal_Text\");\n            // KlarnaLegalText_Lbrands.innerHTML = \"By clicking Buy with Klarna.I am instructing Victoria's Secret to send my order and billing information to Klarna and understand that information will be subjected to the Klarna Terms and Klarna Privacy Policy\";\n            // KlarnaLegalText_Lbrands.setAttribute(\"style\", \"width: 100%;\");\n            // klarnaButtonDiv.appendChild(KlarnaLegalText_Lbrands);\n        }\n        if (jQuery(\"#klarnaButtonDiv_Bottom\").length) {\n            if (jQuery('#klarnaButtonDiv_Bottom').is(':empty')) {\n                var klarnaButtonDiv = document.createElement(\"div\");\n                klarnaButtonDiv.setAttribute(\"style\", \"width: 100%;\");\n                document.getElementById('klarnaButtonDiv_Bottom').appendChild(klarnaButtonDiv);\n\n                var klarnaButton = document.createElement(\"button\");\n                klarnaButton.setAttribute(\"class\", \"authorize\");\n                klarnaButton.setAttribute(\"style\", \" height: 50px;  background-color: #000000; color: white;  border: none; width: 100%; \");\n                klarnaButtonDiv.appendChild(klarnaButton);\n\n                var firstTXT = document.createElement(\"span\");\n                firstTXT.setAttribute(\"class\", \"Span\");\n                firstTXT.innerHTML = 'Buy with ';\n                klarnaButton.appendChild(firstTXT);\n\n                var secTXT = document.createElement(\"img\");\n                secTXT.setAttribute(\"class\", \"img\");\n                secTXT.setAttribute(\"style\", \"width: 56px;margin-bottom: 0px;\");\n                secTXT.setAttribute(\"src\", Aurus._ecstCdnURL + \"images/klarna.svg\");\n                klarnaButton.appendChild(secTXT);\n\n                var KlarnaLegalText_Lbrands = document.createElement(\"label\");\n                KlarnaLegalText_Lbrands.setAttribute(\"class\", \"KLARNA_Legal_Text\");\n                KlarnaLegalText_Lbrands.innerHTML = \"By clicking Buy with Klarna.I am instructing Victoria's Secret to send my order and billing information to Klarna and understand that information will be subjected to the Klarna Terms and Klarna Privacy Policy\";\n                KlarnaLegalText_Lbrands.setAttribute(\"style\", \"width: 100%;\");\n                klarnaButtonDiv.appendChild(KlarnaLegalText_Lbrands);\n            }\n        }\n\n    },\n    PayPalBillerTokenResponseHandler: function (data) {\n        if (data.response_code == \"00000\" && data.response_text == \"APPROVAL\") {\n            Aurus._PaypalOrderID = data.billerToken;\n\n        } else {\n            Aurus._setBillerFailed = true;\n            Aurus._setWalletID = \"4\",\n                digitalWalletResponseHandler(buildMerchantResponseJson(data));\n        }\n\n    },\n    buildPayPalSessionTokenRequestJson: function () {\n        var paypalJson = {\n            \"cartId\": Aurus.getAurusSession,\n            \"walletAuthToken\": Aurus.PaypalOrderID\n        };\n        var payload = {\n            \"12.63\": Aurus.getAurusSession,\n            \"12.88\": \"1\",\n            \"12.89\": \"4\",\n            \"12.102\": \"4\",\n            \"3.21\": Aurus._apiversion,\n            \"12.90\": this.toHex(JSON.stringify(paypalJson)),\n            \"12.97\": \"T1824667292\",\n            \"1.1\": \"\",\n            \"1.2\": \"\",\n            \"2.1\": \"0000000\",\n            \"3.1\": \"8\",\n            \"1.3\": \"\",\n            \"1.4\": Aurus.getCid,\n            \"2.2\": \"0000000\",\n            \"2.3\": Aurus.srcIPAddress,\n            \"4.1\": \"132\",\n            \"4.2\": \"000036\",\n            \"3.4\": \"00\",\n            \"3.5\": \"1.0\",\n            \"3.6\": \"1.0\",\n            \"3.8\": \"1\",\n            \"4.18\": this.getcdate(),\n            \"4.19\": this.getctime(),\n            \"12.71\": Aurus.ecomUrlType,\n            \"12.132\": Aurus.pageType\n\n        };\n        return JSON.stringify(payload);\n    },\n    paypalSessionTokenResponseHandler: function (data) {\n        if (data.response_code == \"00000\" && data.response_text == \"APPROVED\") {\n            Aurus.blankToken();\n            digitalWalletResponseHandler(buildMerchantResponseJson(data));\n        } else {\n            Aurus.blankToken();\n            Aurus._setSessionFailed = true;\n            Aurus._setWalletID = \"4\";\n            digitalWalletResponseHandler(buildMerchantResponseJson(data));\n        }\n\n    },\n    blankToken: function () {\n        Aurus._PaypalOrderID = \"\";\n        Aurus.kct = \"\";\n        Aurus.vct = \"\";\n        Aurus.applePayPaymetData = \"\";\n    },\n    klarnaAuthTokenHandler: function (response) {\n        if (response.approved == true) {\n            Aurus.kat = response.authorization_token;\n            this.getSessionToken(Aurus.getKlarnaAuthToken, this.klarnaPaySessionTokenResponseHandler);\n        }\n    },\n\n    getSessionToken: function (token, responseHandler) {\n        var url = Aurus._priEcstBaseURL + \"altsessiontoken\" + Aurus._hostDomainURL;\n        var requestData = Aurus.getHostRequestJSON(Aurus.buildSessionTokenRequestPayload(token));\n        this.ajaxCall(requestData, url, responseHandler);\n\n    },\n\n\n    buildSessionTokenRequestPayload: function (ecomToken) {\n        var ecomTokenJson = {\n            \"walletAuthToken\": ecomToken\n        };\n        var payload = {\n            \"12.97\": \"\",\n            \"4.11\": \"\",\n            \"12.74\": \"\",\n            \"12.98\": \"\",\n            \"3.21\": Aurus._apiversion,\n            \"12.90\": this.toHex(JSON.stringify(ecomTokenJson)),\n            \"12.71\": \"\",\n            \"12.102\": \"0\",\n            \"12.109\": \"\",\n            \"4.20\": \"840\",\n            \"6.45\": \"Sample for klarnapay\",\n            \"4.21\": \"840\",\n            \"12.85\": \"\",\n            \"12.63\": Aurus.getAurusSession,\n            \"12.88\": \"1\",\n            \"12.89\": \"14\",\n            \"1.1\": \"\",\n            \"1.2\": \"\",\n            \"1.3\": \"\",\n            \"1.4\": Aurus.getCid,\n            \"2.1\": \"C0N43N4U45RLN8R1\",\n            \"2.2\": \"000C29BFD6C0\",\n            \"3.1\": \"8\",\n            \"2.3\": Aurus.srcIPAddress,\n            \"4.1\": \"132\",\n            \"4.2\": \"114848\",\n            \"3.4\": \"00\",\n            \"3.5\": \"1.0\",\n            \"3.6\": \"1.0\",\n            \"3.8\": \"1\",\n            \"4.18\": this.getcdate(),\n            \"4.19\": this.getctime()\n\n        };\n        return JSON.stringify(payload);\n\n    },\n\n    klarnaPaySessionTokenResponseHandler: function (data) {\n        if (data.response_text == \"APPROVAL\" && data.response_code == \"00000\") {\n            Aurus.blankToken();\n            var oneTimeToken = data.one_time_token;\n            digitalWalletResponseHandler(buildMerchantResponseJson(data));\n        } else {\n            Aurus.blankToken();\n            Aurus._setWalletID = \"14\";\n            Aurus._setSessionFailed = true;\n            digitalWalletResponseHandler(buildMerchantResponseJson(data));\n        }\n    },\n\n    toHex: function (str) {\n        var byteArray = this.toUTF8Array(str);\n        return byteArray.map(function (byte) {\n            return ('0' + (byte & 0xFF).toString(16)).slice(-2);\n        }).join('');\n    },\n\n    getHostRequestJSON(json) {\n        return \"formFactorId=\" + this.tid + \"&txnDateTime=\" + this.getcdate() + this.getctime() + \"&encryptionFlag=00&payload=STX\" + this.toHex(json) + \"ETX\";\n    },\n\n    toUTF8Array: function (str) {\n        var utf8 = [];\n        for (var i = 0; i < str.length; i++) {\n            var charcode = str.charCodeAt(i);\n            if (charcode < 0x80) utf8.push(charcode);\n            else if (charcode < 0x800) {\n                utf8.push(0xc0 | (charcode >> 6),\n                    0x80 | (charcode & 0x3f));\n            } else if (charcode < 0xd800 || charcode >= 0xe000) {\n                utf8.push(0xe0 | (charcode >> 12),\n                    0x80 | ((charcode >> 6) & 0x3f),\n                    0x80 | (charcode & 0x3f));\n            } else {\n                i++;\n                charcode = 0x10000 + (((charcode & 0x3ff) << 10) |\n                    (str.charCodeAt(i) & 0x3ff));\n                utf8.push(0xf0 | (charcode >> 18),\n                    0x80 | ((charcode >> 12) & 0x3f),\n                    0x80 | ((charcode >> 6) & 0x3f),\n                    0x80 | (charcode & 0x3f));\n            }\n        }\n        return utf8;\n    },\n\n    //VenmoIntegration Starts here\n\n    venmoClientToken: \"\",\n    venmoPayNonce: \"\",\n\n    set vct(vct) {\n        this.venmoClientToken = vct;\n    },\n    get getVenmoClientToken() {\n        return this.venmoClientToken;\n    },\n    set _venmoPayNonce(kat) {\n        this.venmoPayNonce = kat;\n    },\n    get getVenmoPayNonce() {\n        return this.venmoPayNonce;\n    },\n\n    initPayPal: function (paypalConsumerDtl) {\n        this.createPaypalContainer();\n        Aurus._paypalData = paypalConsumerDtl;\n        jQuery.ajaxSetup({\n            cache: true\n        });\n        getScripts([paypalCheckoutJs], function () {\n\n            paypal.Buttons({\n\n                style: {\n                    layout: 'horizontal',\n                    color: 'black',\n                    shape: 'rect',\n                    label: 'pay',\n                    size: 'responsive',\n                    tagline: 'false'\n                },\n                // Set up the transaction\n                createOrder: function (data, actions) {\n                    Aurus._setWalletID = \"4\",\n                        Aurus.getBillerToken(Aurus.getCustInfoForPaypal(Aurus.paypalCheckoutData), Aurus.PayPalBillerTokenResponseHandler);\n                    return Aurus.getPaypalOrderID;\n                },\n\n                // Finalize the transaction\n                onApprove: function (data, actions) {\n                    Aurus._PaypalOrderID = data.orderID;\n                    var tokenReqdata = Aurus.getHostRequestJSON(Aurus.buildPayPalSessionTokenRequestJson());\n                    Aurus.getSessionTokenPrimary(tokenReqdata, Aurus.paypalSessionTokenResponseHandler);\n                }\n            }).render('#paypal-button-container');\n\n            if (jQuery(\"#paypalDiv_Bottom\").length) {\n                paypal.Buttons({\n                    style: {\n                        layout: 'horizontal',\n                        color: 'black',\n                        shape: 'rect',\n                        label: 'pay',\n                        size: 'responsive',\n                        tagline: 'false'\n                    },\n                    // Set up the transaction\n                    createOrder: function (data, actions) {\n                        Aurus._setWalletID = \"4\",\n                            Aurus.getBillerToken(Aurus.getCustInfoForPaypal(Aurus.paypalCheckoutData), Aurus.PayPalBillerTokenResponseHandler);\n                        return Aurus.getPaypalOrderID;\n                    },\n\n                    // Finalize the transaction\n                    onApprove: function (data, actions) {\n                        Aurus._PaypalOrderID = data.orderID;\n                        var tokenReqdata = Aurus.getHostRequestJSON(Aurus.buildPayPalSessionTokenRequestJson());\n                        Aurus.getSessionTokenPrimary(tokenReqdata, Aurus.paypalSessionTokenResponseHandler);\n                    }\n                }).render('#paypal-button-container_bottom');\n            }\n\n        });\n        jQuery.ajaxSetup({\n            cache: false\n        });\n\n    },\n    importPaypalURL: function (custData) {\n\n        if (custData.customer.skipShippingAddress == 1) {\n            if (this.getEnv == \"live\") {\n                paypalCheckoutJs = \"https://www.paypal.com/sdk/js?client-id=AfQUYZxO_oL-qSfMnvqTzWk_lANnQzu_YIsddRZ4AFQTH58YP-Cl6DkZZwWzY-XkxeVEaf95w3mJ4_ci&intent=order&disable-funding=credit,card&commit=false\";\n            } else if (this.getEnv == \"sandbox\") {\n                paypalCheckoutJs = \"https://www.paypal.com/sdk/js?client-id=AbsRowaCV-7remgpCSWWAYIxv1ZnIN20UAumnWFYgCS561CZoSA-BoPUGoBnMiXHAODT6yT7srfQAuQz&intent=order&disable-funding=credit,card&commit=false\";\n            } else {\n                window.parent.postMessage(\"AurusScriptError=Invalid_Environment\", '*');\n            }\n        } else {\n            if (this.getEnv == \"live\") {\n                paypalCheckoutJs = \"https://www.paypal.com/sdk/js?client-id=AfQUYZxO_oL-qSfMnvqTzWk_lANnQzu_YIsddRZ4AFQTH58YP-Cl6DkZZwWzY-XkxeVEaf95w3mJ4_ci&intent=order&disable-funding=credit,card&commit=true\";\n            } else if (this.getEnv == \"sandbox\") {\n                paypalCheckoutJs = \"https://www.paypal.com/sdk/js?client-id=AbsRowaCV-7remgpCSWWAYIxv1ZnIN20UAumnWFYgCS561CZoSA-BoPUGoBnMiXHAODT6yT7srfQAuQz&intent=order&disable-funding=credit,card&commit=true\";\n            } else {\n                window.parent.postMessage(\"AurusScriptError=Invalid_Environment\", '*');\n            }\n        }\n\n        if (jQuery('script[src=\"' + paypalCheckoutJs + '\"]').length < 1) {\n            jQuery(\"head\").append(paypalCheckoutJs);\n        }\n\n    },\n    createPaypalContainer: function () {\n        if (!jQuery('#paypalDiv').children().length > 0) {\n            var paypalContainer = document.createElement(\"div\");\n            paypalContainer.setAttribute(\"id\", \"paypal-button-container\");\n            paypalContainer.setAttribute(\"style\", \"width: 100%;\");\n            document.getElementById('paypalDiv').appendChild(paypalContainer);\n        }\n        if (jQuery(\"#paypalDiv_Bottom\").length) {\n            if (!jQuery('#paypalDiv_Bottom').children().length > 0) {\n                var paypalContainer = document.createElement(\"div\");\n                paypalContainer.setAttribute(\"id\", \"paypal-button-container_bottom\");\n                paypalContainer.setAttribute(\"style\", \"width: 100%;\");\n                document.getElementById('paypalDiv_Bottom').appendChild(paypalContainer);\n            }\n        }\n    },\n    initVenmo: function () {\n\n        if (jQuery('#venmoDiv').is(':empty')) {\n            var venmoImage = document.createElement('img')\n            venmoImage.setAttribute(\"id\", \"venmo-button\")\n            venmoImage.setAttribute(\"style\", \"display: none; width:100% ;\")\n            venmoImage.setAttribute(\"src\", Aurus._ecstCdnURL + \"images/blue_venmo_button_active_280x48.svg\")\n            venmoImage.onload = function () {\n\n            };\n            document.getElementById(\"venmoDiv\").appendChild(venmoImage)\n        }\n\n        if (jQuery(\"#venmoDiv_Bottom\").length) {\n            if (!jQuery('#venmoDiv_Bottom').children().length > 0) {\n                var venmoImage = document.createElement('img')\n                venmoImage.setAttribute(\"id\", \"venmo-button_Bottom\")\n                venmoImage.setAttribute(\"style\", \"display: none; width:100% ;\")\n                venmoImage.setAttribute(\"src\", Aurus._ecstCdnURL + \"images/blue_venmo_button_active_280x48.svg\")\n                venmoImage.onload = function () {\n\n                };\n                document.getElementById(\"venmoDiv_Bottom\").appendChild(venmoImage)\n            }\n        }\n        Aurus._setWalletID = \"15\",\n            this.getBillerToken(\"\", this.venmoBillerTokenResponseHandler);\n\n    },\n\n    venmoBillerTokenResponseHandler: function (data) {\n        if (data.response_code == \"00000\" && data.response_text == \"APPROVAL\") {\n            Aurus.vct = data.billerToken;\n            var clientMinJs = \"https://js.braintreegateway.com/web/3.73.1/js/client.min.js\";\n            var venmoMinJs = \"https://js.braintreegateway.com/web/3.73.1/js/venmo.min.js\";\n            var dataCollectorJs = \"https://js.braintreegateway.com/web/3.73.1/js/data-collector.min.js\";\n\n\n            getScripts([clientMinJs, venmoMinJs, dataCollectorJs], function () {\n\n                braintree.client.create({\n                    authorization: Aurus.getVenmoClientToken\n                }, function (clientErr, clientInstance) {\n\n                    if (clientErr) {\n                        return;\n                    }\n                    braintree.venmo.create({\n                        client: clientInstance,\n                        authorization: Aurus.getVenmoClientToken,\n                        allowDesktop: true,\n                        allowNewBrowserTab: true\n                    }, function (venmoErr, venmoInstance) {\n                        if (venmoErr) {\n                            return;\n                        }\n\n                        if (!venmoInstance.isBrowserSupported()) {\n                            return;\n                        }\n\n                        displayVenmoButton(venmoInstance);\n\n                        if (venmoInstance.hasTokenizationResult()) {\n                            venmoInstance.tokenize(function (tokenizeErr, payload) {\n                                if (err) {\n                                    handleVenmoError(tokenizeErr);\n                                } else {\n                                    handleVenmoSuccess(payload);\n                                }\n                            });\n                            return;\n                        }\n                    });\n                });\n\n            });\n        } else {\n            Aurus._setBillerFailed = true;\n            Aurus._setWalletID = \"15\",\n                digitalWalletResponseHandler(buildMerchantResponseJson(data));\n        }\n    },\n    getVenmoSessionToken: function (payload) {\n        Aurus._venmoPayNonce = payload.nonce;\n\n        var reqdata = Aurus.getHostRequestJSON(Aurus.buildSessionTokenRequestPayloadVenmo(Aurus.getVenmoPayNonce));\n        this.getSessionTokenPrimary(reqdata, this.venmoSessionTokenResponseHandler);\n    },\n    buildSessionTokenRequestPayloadVenmo: function (ecomToken) {\n        var ecomTokenJson = {\n            \"walletAuthToken\": ecomToken\n        };\n        var payload = {\n            \"4.15\": \"1\",\n            \"12.89\": \"15\",\n            \"3.21\": Aurus._apiversion,\n            \"12.90\": this.toHex(JSON.stringify(ecomTokenJson)),\n            \"1.1\": \"\",\n            \"1.2\": \"\",\n            \"1.3\": \"\",\n            \"1.4\": Aurus.getCid,\n            \"2.1\": \"C0N43N4U45RLN8R1\",\n            \"12.102\": \"\",\n            \"2.2\": \"000C29BFD6C0\",\n            \"2.3\": Aurus.srcIPAddress,\n            \"4.1\": \"132\",\n            \"4.18\": this.getcdate(),\n            \"4.19\": this.getctime(),\n            \"12.63\": Aurus.getAurusSession\n        };\n        return JSON.stringify(payload);\n    },\n    getSessionTokenPrimary: function (reqData, responseHandler) {\n        jQuery.ajax({\n            url: Aurus._priEcstBaseURL + \"altsessiontoken\" + Aurus._hostDomainURL,\n            async: false,\n            dataType: 'json',\n            type: 'post',\n            contentType: 'application/x-www-form-urlencoded',\n            data: reqData,\n            success: function (data) {\n                responseHandler(data);\n            },\n            error: function (jqXHR, textStatus, errorThrown) {\n                Aurus.getSessionTokenSecondary(reqData, responseHandler);\n            }\n        });\n\n    },\n    getSessionTokenSecondary: function (reqData, responseHandler) {\n        jQuery.ajax({\n            url: Aurus._secEcstBaseURL + \"altsessiontoken\" + Aurus._hostDomainURL,\n            async: true,\n            dataType: 'json',\n            type: 'post',\n            contentType: 'application/x-www-form-urlencoded',\n            data: reqData,\n            success: function (data) {\n                responseHandler(data);\n            },\n            error: function (jqXHR, textStatus, errorThrown) {}\n        });\n    },\n    venmoSessionTokenResponseHandler: function (data) {\n        if (data.response_code == \"00000\" && data.response_text == \"APPROVAL\") {\n            Aurus.blankToken();\n            digitalWalletResponseHandler(buildMerchantResponseJson(data));\n        } else {\n            Aurus.blankToken();\n            Aurus._setWalletID = \"15\";\n            Aurus._setSessionFailed = true;\n            digitalWalletResponseHandler(buildMerchantResponseJson(data));\n        }\n    }\n}\n\nfunction getScripts(scripts, callback) {\n    var progress = 0;\n    scripts.forEach(function (script) {\n        jQuery.getScript(script, function () {\n            if (++progress == scripts.length) callback();\n        });\n    });\n}\n\nfunction importVenmoScripts() {\n    var isClientJsLoaded = false;\n    var isVenmoMinJsLoaded = false;\n    var isDataCollectorJsLoaded = false;\n    var venmoscript1 = document.createElement('script')\n    venmoscript1.setAttribute(\"type\", \"text/javascript\")\n    venmoscript1.setAttribute(\"src\", \"https://js.braintreegateway.com/web/3.62.0/js/client.min.js\")\n    venmoscript1.onload = function () {\n        isClientJsLoaded = true;\n    };\n    document.getElementsByTagName(\"head\")[0].appendChild(venmoscript1)\n}\n\nfunction displayVenmoButton(venmoInstance) {\n    var venmoButton = document.getElementById('venmo-button');\n    venmoButton.style.display = 'block';\n    venmoButton.addEventListener('click', function () {\n        venmoButton.disabled = true;\n        venmoInstance.tokenize(function (tokenizeErr, payload) {\n            venmoButton.removeAttribute('disabled');\n\n            if (tokenizeErr) {\n                handleVenmoError(tokenizeErr);\n            } else {\n                handleVenmoSuccess(payload);\n            }\n        });\n    });\n\n    if (jQuery(\"#venmoDiv_Bottom\").length) {\n        var venmoButton2 = document.getElementById('venmo-button_Bottom');\n        venmoButton2.style.display = 'block';\n        venmoButton2.addEventListener('click', function () {\n            venmoButton2.disabled = true;\n            venmoInstance.tokenize(function (tokenizeErr, payload) {\n                venmoButton2.removeAttribute('disabled');\n\n                if (tokenizeErr) {\n                    handleVenmoError(tokenizeErr);\n                } else {\n                    handleVenmoSuccess(payload);\n                }\n            });\n        });\n    }\n}\n\nfunction handleVenmoError(err) {\n    //if (err.code === 'VENMO_CANCELED') {} else if (err.code === 'VENMO_APP_CANCELED') {} else {}\n}\n\nfunction handleVenmoSuccess(payload) {\n    Aurus.getVenmoSessionToken(payload);\n\n}\n\n\n\nwindow.klarnaAsyncCallback = function () {\n\n    Klarna.Payments.init({\n        client_token: Aurus.getKlarnaClientToken\n    });\n\n    Klarna.Payments.load({\n        container: \"#klarna_container\",\n        payment_method_category: Aurus.getKlarnaPayMethodType\n\n    }, function (res) {\n        //document.write(res);\n    });\n\n    jQuery(function () {\n        jQuery(\"button.authorize\").on('click', function () {\n            Klarna.Payments.authorize({\n                    payment_method_category: Aurus.getKlarnaPayMethodType\n                },\n                function (res) {\n                    Aurus.klarnaAuthTokenHandler(res);\n\n                })\n        })\n    })\n\n}\n\n\n\nfunction buildMerchantResponseJson(data) {\n    var merchantResponseJson = {\n        \"GetSessionTokenResponse\": {\n            \"CardNumber\": \"\" + checkProperty(data, 'masked_card_num') + \"\",\n            \"ProfileId\": \"\" + checkProperty(data, 'profileId') + \"\",\n            \"ResponseCode\": \"\" + checkProperty(data, 'response_code') + \"\",\n            \"RequestId\": \"\" + checkProperty(data, 'requestId') + \"\",\n            \"MerchantSessionId\": \"\" + checkProperty(data, 'merchantSessionId') + \"\",\n            \"ProcessorToken\": \"\" + checkProperty(data, 'processorToken') + \"\",\n            \"ProcessorPayerId\": \"\" + checkProperty(data, 'processorPayerId') + \"\",\n            \"ECOMMInfo\": {\n                \"OneTimeToken\": \"\" + checkProperty(data, 'one_time_token') + \"\",\n                \"StoreId\": \"\" + checkProperty(data, 'sid') + \"\",\n                \"MerchantIdentifier\": \"\" + checkProperty(data, 'mid') + \"\",\n                \"TerminalId\": \"\" + checkProperty(data, 'tid') + \"\"\n            },\n            \"Pay_Wallet\": \"\" + checkProperty(data, 'payWalletData') + \"\",\n            \"CardToken\": \"\" + checkProperty(data, 'cardToken') + \"\",\n            \"BillingAddress\": {\n                \"BillingAddressLine1\": \"\" + checkProperty(data, 'billingaddr1') + \"\",\n                \"BillingAddressLine2\": \"\" + checkProperty(data, 'billingaddr2') + \"\",\n                \"BillingCountry\": \"\" + checkProperty(data, 'billingcountry') + \"\",\n                \"BillingEmailId\": \"\" + checkProperty(data, 'billingemailid') + \"\",\n                \"BillingCity\": \"\" + checkProperty(data, 'billingcity') + \"\",\n                \"BillingMobileNumber\": \"\" + checkProperty(data, 'billingcellno') + \"\",\n                \"BillingFirstName\": \"\" + checkProperty(data, 'billingfn') + \"\",\n                \"BillingLastName\": \"\" + checkProperty(data, 'billingln') + \"\",\n                \"BillingZip\": \"\" + checkProperty(data, 'billingzip') + \"\",\n                \"BillingState\": \"\" + checkProperty(data, 'billingstate') + \"\",\n                \"BillingMiddleName\": \"\" + checkProperty(data, 'billingmn') + \"\"\n            },\n            \"CardType\": \"\" + checkProperty(data, 'card_type') + \"\",\n            \"SubCardType\": \"\" + checkProperty(data, 'subcard_type') + \"\",\n            \"TransactionIdentifier\": \"\" + checkProperty(data, 'transactionIdentifier') + \"\",\n            \"CardExpiryDate\": \"\" + checkProperty(data, 'CardExpiryDate') + \"\",\n            \"ShippingAddress\": {\n                \"ShippingAddressLine1\": \"\" + checkProperty(data, 'shippingaddr1') + \"\",\n                \"ShippingEmailId\": \"\" + checkProperty(data, 'shippingemailid') + \"\",\n                \"ShippingMiddleName\": \"\" + checkProperty(data, 'shippingmn') + \"\",\n                \"ShippingFirstName\": \"\" + checkProperty(data, 'shippingfn') + \"\",\n                \"ShippingZip\": \"\" + checkProperty(data, 'shippingzip') + \"\",\n                \"ShippingCountry\": \"\" + checkProperty(data, 'shippingcountry') + \"\",\n                \"ShippingCity\": \"\" + checkProperty(data, 'shippingcity') + \"\",\n                \"ShippingState\": \"\" + checkProperty(data, 'shippingstate') + \"\",\n                \"ShippingMobileNumber\": \"\" + checkProperty(data, 'shippingcellno') + \"\",\n                \"ShippingAddressLine2\": \"\" + checkProperty(data, 'shippingaddr2') + \"\",\n                \"ShippingLastName\": \"\" + checkProperty(data, 'shippingln') + \"\"\n            },\n            \"ResponseText\": \"\" + checkProperty(data, 'response_text') + \"\",\n            \"CartId\": \"\" + checkProperty(data, 'cartId') + \"\",\n            \"WalletIdentifier\": \"\" + checkProperty(data, 'WalletIdentifier') + \"\",\n            \"ShippingMethod\": \"\" + checkProperty(data, 'ShippingMethod') + \"\",\n            \"ModifiedOrder\": {\n                \"OrderTotal\": \"\" + +\"\",\n                \"Subtotal\": \"\" + +\"\",\n                \"Discount\": \"\" + +\"\",\n                \"TaxAmount\": \"\" + +\"\",\n                \"ShippingAmount\": \"\" + +\"\",\n                \"Gift_Wrap\": \"\" + +\"\",\n                \"Coupon\": \"\" + +\"\",\n                \"AdditionalTax\": \"\" + [] + \"\",\n            },\n        }\n    };\n    if (Aurus.getBillerFailed || Aurus.getSessionFailed) {\n        merchantResponseJson.GetSessionTokenResponse.WalletIdentifier = Aurus.getWalletID;\n        Aurus._setBillerFailed = false;\n        Aurus._setSessionFailed = false;\n    }\n    if (Aurus.getWalletID == \"7\") {\n        merchantResponseJson.GetSessionTokenResponse.ShippingMethod = Aurus.getSelectedShippingMethod;\n        merchantResponseJson.GetSessionTokenResponse.ModifiedOrder.OrderTotal = Aurus.getOrderAmount;\n        merchantResponseJson.GetSessionTokenResponse.ModifiedOrder.Subtotal = Aurus.getSubTotal;\n        merchantResponseJson.GetSessionTokenResponse.ModifiedOrder.Discount = Aurus.getDiscount;\n        merchantResponseJson.GetSessionTokenResponse.ModifiedOrder.TaxAmount = Aurus.getEstimatedTax;\n        merchantResponseJson.GetSessionTokenResponse.ModifiedOrder.ShippingAmount = Aurus.getShippingCost;\n        merchantResponseJson.GetSessionTokenResponse.ModifiedOrder.Gift_Wrap = Aurus.getGiftWrap;\n        merchantResponseJson.GetSessionTokenResponse.ModifiedOrder.Coupon = Aurus.getCoupon;\n        merchantResponseJson.GetSessionTokenResponse.ModifiedOrder.AdditionalTax = Aurus.getAdditionalChargeIndicator;\n    }\n    return merchantResponseJson;\n}\n\nfunction checkProperty(data, property) {\n    if (data.hasOwnProperty(property)) {\n        return data[property];\n    } else {\n        return \"\";\n    }\n}\n\nfunction postAurusScriptLoadedEvent() {\n    try {\n        window.parent.postMessage(\"AurusScriptLoaded=true\", '*');\n    } catch (e) {\n        //if (e instanceof ReferenceError) {}\n    }\n}\n/* GooglePay Support Js starts */\n\nconst baseRequest = {\n    apiVersion: 2,\n    apiVersionMinor: 0,\n    emailRequired: true\n};\n\nconst allowedCardNetworks = [\"AMEX\", \"DISCOVER\", \"JCB\", \"MASTERCARD\", \"VISA\"];\nconst allowedCardAuthMethods = [\"PAN_ONLY\", \"CRYPTOGRAM_3DS\"];\n\nconst tokenizationSpecification = {\n    type: 'PAYMENT_GATEWAY',\n    parameters: {\n        'gateway': 'auruspay',\n        'gatewayMerchantId': \"22731101231178566\"\n    }\n\n    /* type: 'DIRECT',\n     parameters: {\n     protocolVersion: 'ECv2',\n     publicKey: 'BOxnUMXdAh5VSr4jXwTKR/RS7zXyDbYkGkarLg0Mc4F8HLA5N20EY5kK1Mq4m2oZo/MtANLV6oCcU2Vt7e8Af3I='\n  }     */\n};\n\nconst baseCardPaymentMethod = {\n    type: 'CARD',\n    parameters: {\n        allowedAuthMethods: allowedCardAuthMethods,\n        allowedCardNetworks: allowedCardNetworks,\n        billingAddressRequired: true,\n        \"billingAddressParameters\": {\n            \"format\": \"FULL\",\n            \"phoneNumberRequired\": true\n\n        }\n    }\n};\n\nconst cardPaymentMethod = Object.assign({},\n    baseCardPaymentMethod, {\n        tokenizationSpecification: tokenizationSpecification\n    }\n);\n\n//let paymentsClient = null;\nfunction getGoogleIsReadyToPayRequest() {\n    return Object.assign({},\n        baseRequest, {\n            allowedPaymentMethods: [baseCardPaymentMethod]\n        }\n    );\n}\n\nfunction getGooglePaymentDataRequest() {\n    const paymentDataRequest = Object.assign({}, baseRequest);\n    paymentDataRequest.allowedPaymentMethods = [cardPaymentMethod];\n    paymentDataRequest.transactionInfo = getGoogleTransactionInfo();\n    paymentDataRequest.merchantInfo = {\n        //merchantId: Aurus.getGoogleMerchantId, \n        merchantName: 'Aurusinc' //optional\n    };\n    return paymentDataRequest;\n}\n\nfunction getGooglePaymentsClient() {\n    //if ( paymentsClient === null ) {\n    var paymentsClient = new google.payments.api.PaymentsClient({\n        environment: 'TEST'\n    }); /*TEST OR PRODUCTION*/\n    //}\n    return paymentsClient;\n}\n\nfunction onGooglePayLoaded() {\n    const paymentsClient = getGooglePaymentsClient();\n    paymentsClient.isReadyToPay(getGoogleIsReadyToPayRequest())\n        .then(function (response) {\n            if (response.result) {\n                addGooglePayButton();\n            }\n        })\n        .catch(function (err) {\n            console.error(err);\n        });\n}\n\nfunction addGooglePayButton() {\n    const paymentsClient = getGooglePaymentsClient();\n    const button =\n        paymentsClient.createButton({\n            onClick: onGooglePaymentButtonClicked,\n            buttonSizeMode: 'fill',\n            buttonType: 'plain'\n        }); //buttonColor: 'black'\n    // const button_bottom =\n    //     paymentsClient.createButton({onClick: onGooglePaymentButtonClicked,buttonSizeMode:'fill',buttonType: 'plain'});\n\n    document.getElementById('aurus-google-pay-containerId').appendChild(button);\n    //document.getElementById('aurus-google-pay-containerId-bottom').appendChild(button_bottom);\n\n\n    /*if(document.getElementsByClassName(\"gpay-button\")[0]){\n    \n     document.getElementsByClassName(\"gpay-button\")[0].setAttribute('style','width:10px');\n    \n    }*/\n\n\n}\n\nfunction getGoogleTransactionInfo() {\n    return {\n        currencyCode: Aurus.getCurrencyCode,\n        totalPriceStatus: 'FINAL',\n        totalPrice: parseFloat(Aurus.getOrderAmount).toFixed(2),\n    };\n}\n\nfunction prefetchGooglePaymentData() {\n    const paymentDataRequest = getGooglePaymentDataRequest();\n    paymentDataRequest.transactionInfo = {\n        totalPriceStatus: 'NOT_CURRENTLY_KNOWN',\n        currencyCode: Aurus.getCurrencyCode\n    };\n    const paymentsClient = getGooglePaymentsClient();\n    paymentsClient.prefetchPaymentData(paymentDataRequest);\n}\n\nfunction onGooglePaymentButtonClicked() {\n    const paymentDataRequest = getGooglePaymentDataRequest();\n    paymentDataRequest.transactionInfo = getGoogleTransactionInfo();\n\n    const paymentsClient = getGooglePaymentsClient();\n    paymentsClient.loadPaymentData(paymentDataRequest)\n        .then(function (paymentData) {\n            processPayment(paymentData);\n\n        })\n        .catch(function (err) {\n            console.error(err);\n        });\n}\n\nfunction processPayment(paymentData) {\n\n    /*var paymentToken = paymentData.paymentMethodData.tokenizationData.token;*/\n\n    var paymentToken = JSON.stringify(paymentData);\n\n    Aurus._gPayPaymetData = paymentToken;\n\n\n    // document.write(paymentToken);\n}\n\n\n/* GooglePay Support Js Ends*/\n\npostAurusScriptLoadedEvent();\n\n\n\n\n\nfunction digitalWalletResponseHandler(JSONdata) {\n    // Merchant Response handler for Session Token\n    console.log(\"Inside digitalWalletResponseHandler\" + JSON.stringify(JSONdata));\n    var responseCode = JSONdata.GetSessionTokenResponse.ResponseCode;\n    console.log('JSONdata.GetSessionTokenResponse.BillingAddress------>>>>', JSONdata.GetSessionTokenResponse.BillingAddress);\n    console.log('JSONdata.GetSessionTokenResponse.ShippingAddress------>>>>', JSONdata.GetSessionTokenResponse.ShippingAddress);\n    if (responseCode == \"00000\") {\n        //alert(JSON.stringify(JSONdata));\n        console.log(\"Success : Session Token Received - \" + JSONdata.GetSessionTokenResponse.ECOMMInfo.OneTimeToken);\n        console.log(\"Success : CardType - \" + JSONdata.GetSessionTokenResponse.CardType);\n        console.log(\"Success : WalletIdentifier - \" + JSONdata.GetSessionTokenResponse.WalletIdentifier);\n        var WalletIdentifier = JSONdata.GetSessionTokenResponse.WalletIdentifier;\n        var defer = $.Deferred();\n        $.ajax({\n            url: aurusWalletPlaceOrder, //var aurusWalletPlaceOrder = \"${URLUtils.url('AurusWallet-PlaceOrder')}\";\n            method: 'POST',\n            data: {\n                OneTimeToken: JSONdata.GetSessionTokenResponse.ECOMMInfo.OneTimeToken,\n                cardType: JSONdata.GetSessionTokenResponse.CardType,\n                BillingAddress: JSON.stringify(JSONdata.GetSessionTokenResponse.BillingAddress),\n                ShippingAddress: JSON.stringify(JSONdata.GetSessionTokenResponse.ShippingAddress),\n                WalletIdentifier: WalletIdentifier\n            },\n            success: function (data) {\n                // enable the placeOrder button here\n                $('body').trigger('checkout:enableButton', '.next-step-button button');\n                if (data.errorMessage) {\n                    $('.error-message').show();\n                    $('.error-message-text').text(data.errorMessage);\n                    scrollAnimate($('.error-message'));\n                } else {\n                    if (data.apm) {\n                        var params = data.continueUrl.slice(data.continueUrl.indexOf('?') + 1).split('&');\n                        var redirect = $('<form>')\n                            .appendTo(document.body)\n                            .attr({\n                                method: 'GET',\n                                action: data.continueUrl,\n                            });\n\n                        Object.keys(params).forEach(function (keys) {\n                            var param = params[keys].split('=');\n                            $('<input>')\n                                .appendTo(redirect)\n                                .attr({\n                                    name: param[0],\n                                    value: param[1],\n                                });\n                        });\n\n                        $('<input>')\n                            .appendTo(redirect)\n                            .attr({\n                                name: 'orderID',\n                                value: data.orderID,\n                            });\n\n                        $('<input>')\n                            .appendTo(redirect)\n                            .attr({\n                                name: 'orderToken',\n                                value: data.orderToken,\n                            });\n\n                        redirect.submit();\n                        defer.resolve(data);\n                    } else {\n                        var redirect = $('<form>')\n                            .appendTo(document.body)\n                            .attr({\n                                method: 'POST',\n                                action: data.continueUrl,\n                            });\n\n                        $('<input>')\n                            .appendTo(redirect)\n                            .attr({\n                                name: 'orderID',\n                                value: data.orderID,\n                            });\n\n                        $('<input>')\n                            .appendTo(redirect)\n                            .attr({\n                                name: 'orderToken',\n                                value: data.orderToken,\n                            });\n\n                        redirect.submit();\n                        defer.resolve(data);\n                    }\n                }\n            },\n            error: function () {\n                // enable the placeOrder button here\n                $('body').trigger('checkout:enableButton', $('.next-step-button button'));\n            },\n        });\n\n        return defer;\n\n\n    } else {\n        //failure response handling\n        // alert(JSONdata.GetSessionTokenResponse.ResponseText+' PLEASE CONTACT TO AURUS');\n        $('.error-message').show();\n        $('.error-message-text').text(JSONdata.GetSessionTokenResponse.ResponseText);\n        scrollAnimate($('.error-message'));\n    }\n}\n\n\nmodule.exports = Aurus;\n\n//# sourceURL=webpack://int_aurus_sfra/./cartridges/int_aurus_sfra/cartridge/client/default/js/test.js?");

/***/ }),

/***/ "../storefront-reference-architecture-master/cartridges/app_storefront_base/cartridge/client/default/js/checkout/formErrors.js":
/*!*************************************************************************************************************************************!*\
  !*** ../storefront-reference-architecture-master/cartridges/app_storefront_base/cartridge/client/default/js/checkout/formErrors.js ***!
  \*************************************************************************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval("\n\nvar scrollAnimate = __webpack_require__(/*! ../components/scrollAnimate */ \"../storefront-reference-architecture-master/cartridges/app_storefront_base/cartridge/client/default/js/components/scrollAnimate.js\");\n\n/**\n * Display error messages and highlight form fields with errors.\n * @param {string} parentSelector - the form which contains the fields\n * @param {Object} fieldErrors - the fields with errors\n */\nfunction loadFormErrors(parentSelector, fieldErrors) { // eslint-disable-line\n    // Display error messages and highlight form fields with errors.\n    $.each(fieldErrors, function (attr) {\n        $('*[name=' + attr + ']', parentSelector)\n            .addClass('is-invalid')\n            .siblings('.invalid-feedback')\n            .html(fieldErrors[attr]);\n    });\n    // Animate to top of form that has errors\n    scrollAnimate($(parentSelector));\n}\n\n/**\n * Clear the form errors.\n * @param {string} parentSelector - the parent form selector.\n */\nfunction clearPreviousErrors(parentSelector) {\n    $(parentSelector).find('.form-control.is-invalid').removeClass('is-invalid');\n    $('.error-message').hide();\n}\n\nmodule.exports = {\n    loadFormErrors: loadFormErrors,\n    clearPreviousErrors: clearPreviousErrors\n};\n\n\n//# sourceURL=webpack://int_aurus_sfra/../storefront-reference-architecture-master/cartridges/app_storefront_base/cartridge/client/default/js/checkout/formErrors.js?");

/***/ }),

/***/ "../storefront-reference-architecture-master/cartridges/app_storefront_base/cartridge/client/default/js/components/scrollAnimate.js":
/*!******************************************************************************************************************************************!*\
  !*** ../storefront-reference-architecture-master/cartridges/app_storefront_base/cartridge/client/default/js/components/scrollAnimate.js ***!
  \******************************************************************************************************************************************/
/***/ (function(module) {

"use strict";
eval("\n\nmodule.exports = function (element) {\n    var position = element && element.length ? element.offset().top : 0;\n    $('html, body').animate({\n        scrollTop: position\n    }, 500);\n    if (!element) {\n        $('.logo-home').focus();\n    }\n};\n\n\n//# sourceURL=webpack://int_aurus_sfra/../storefront-reference-architecture-master/cartridges/app_storefront_base/cartridge/client/default/js/components/scrollAnimate.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = __webpack_require__("./cartridges/int_aurus_sfra/cartridge/client/default/js/test.js");
/******/ 	
/******/ })()
;