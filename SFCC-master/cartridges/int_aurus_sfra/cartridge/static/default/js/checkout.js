/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (function() { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./cartridges/int_aurus_sfra/cartridge/client/default/js/aurusCheckout.js":
/*!********************************************************************************!*\
  !*** ./cartridges/int_aurus_sfra/cartridge/client/default/js/aurusCheckout.js ***!
  \********************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval("var formHelpers = __webpack_require__(/*! base/checkout/formErrors */ \"../storefront-reference-architecture-master/cartridges/app_storefront_base/cartridge/client/default/js/checkout/formErrors.js\");\nvar scrollAnimate = __webpack_require__(/*! base/components/scrollAnimate */ \"../storefront-reference-architecture-master/cartridges/app_storefront_base/cartridge/client/default/js/components/scrollAnimate.js\");\n\n// IE 11 does not support ‘startsWith’ with strings.\n// Adding this prototype so that it supports the method.\nif (!String.prototype.startsWith) {\n    String.prototype.startsWith = function(searchString, position) { // eslint-disable-line\n        position = position || 0; // eslint-disable-line\n        return this.indexOf(searchString, position) === position;\n    };\n}\n\nfunction getAurusPayPalSession(params) {\n    return new Promise(function (resolve, reject) {\n    $.ajax({\n        url: 'AurusPay-GetSession',\n        type: 'get',\n        data: {\n            paypal: 'true'\n        },\n        success: function (data) {\n            if (!data.error) {\n                var payLoad = JSON.parse(data.session);\n                //window.console.log('PayPal Session Res',data);\n                var sessionId = payLoad.SessionResponse.SessionId;\n                resolve(sessionId); // Resolve with only SessionId\n                window.console.log('PayPal Session payload sessionId--->>>>',sessionId);\n            } else {\n                window.console.log('Error retrieving Aurus Pay iFrame url and session');\n                reject(new Error('Error retrieving Aurus Pay iFrame url and session'));\n            }\n        }\n    });\n});\n\n}\n\n// function getBillerToken(params) {\n//     $.ajax({\n//         url: 'AurusPay-GetBillerToken',\n//         type: 'get',\n//         success: function (data) {\n//             if (!data.error) {\n//                 var payLoad = JSON.parse(data.session);\n//                 window.console.log('AurusPay GetBillerToken--->>>>',payLoad);\n//             } else {\n//                 window.console.log('Error retrieving Aurus Pay PayPal token');\n//             }\n//         }\n//     });\n// }\n\n// Changed By me\nfunction onclickPaypalButton() {\n    paypal.Button.render({\n\n        env: 'sandbox',\n        commit: true,\n\n        style: {\n            label: 'paypal',\n            size: 'responsive',\n            color: 'gold',\n            shape: 'rect',\n            tagline: false,\n            height: 46\n        },\n        payment: function() {\n            return getBillerToken().then(function (payLoad) {\n                window.console.log('EcomToken--------------', payLoad.GetBillerTokenResponse.EcomToken);\n                return payLoad.GetBillerTokenResponse.EcomToken;\n            });\n        },\n\n        onAuthorize: function(data, actions) {\n            window.console.log('onAuthorize called---->>>>>>>>');\n      //getSessionToken call to get OTT of paypal request\n            getPayPalSessionToken();\n            return actions.redirect();\n        },\n\n        onCancel: function(data, actions) {\n            //\treturn actions.redirect();\n        }\n\n    }, '#aurus-paypal-containerId');\n}\n\nfunction getBillerToken() {\n     return new Promise(function (resolve, reject) {\n        $.ajax({\n            url: 'AurusPay-GetBillerToken',\n            type: 'get',\n            success: function (data) {\n                if (!data.error) {\n                    var payLoad = JSON.parse(data.session);\n                    window.console.log('AurusPay GetBillerToken--->>>>', payLoad);\n                    // window.console.log('EcomToken---->>>>>', payLoad.GetBillerTokenResponse.EcomToken);\n\n                    // // Extract the approval URL\n                    // var approvalLink = payLoad.GetBillerTokenResponse.WalletObject.links.find(link => link.rel === 'approval_url');\n                    // if (approvalLink) {\n                    //     var approvalUrl = approvalLink.href;\n                    //     window.console.log('Approval URL:', approvalUrl);\n                    // } else {\n                    //     window.console.log('Approval URL not found');\n                    // }\n\n                    resolve(payLoad);\n                } else {\n                    window.console.log('Error retrieving Aurus Pay PayPal token');\n                    reject(new Error('Error retrieving Aurus Pay PayPal token'));\n                }\n            },\n            error: function (jqXHR, textStatus, errorThrown) {\n                reject(new Error('AJAX request failed: ' + textStatus + ', ' + errorThrown));\n            }\n        });\n   });\n}\n//this function is for to get OTT \nfunction getPayPalSessionToken(){\n    window.console.log('get session token for paypal');\n    // $.ajax({\n    //     url: 'AurusPay-GetSessionToken',\n    //     type: 'get',\n    //     success: function (data) {\n    //         if (!data.error) {\n    //             var payLoad = JSON.parse(data.session);\n    //             window.console.log('AurusPay GetSessionTokenRequest--->>>>',payLoad);\n    //         } else {\n    //             window.console.log('Error retrieving Aurus Pay PayPal GetSessionToken for OTT');\n    //         }\n    //     }\n    // });\n}\n\n/**\n* Ajax call to get iframe url and attach to existing element\n* @param {string} storedPaymentId uuid and internal id for payment instrument\n*/\nfunction getAurusSession(storedPaymentId) {\n    var ccId = '';\n    if (storedPaymentId !== undefined) {\n        ccId = storedPaymentId.length > 0 ? storedPaymentId : '';\n    }\n    $.ajax({\n        url: 'AurusPay-GetSession',\n        type: 'get',\n        data: {\n            ccId: ccId\n        },\n        success: function (data) {\n            if (!data.error) {\n                var payLoad = JSON.parse(data.session);\n                 window.console.log('getAurusSession payLoad',payLoad);\n                $('#frame_carddetails').attr('src', payLoad.SessionResponse.IFrameUrl);\n            } else {\n                window.console.log('Error retrieving Aurus Pay iFrame url and session');\n            }\n        }\n    });\n}\n\n/**\n* Merchant needs to get this URL by doing substring of Aurus Iframe Url received in Session API.\n* URL example: var aurusURL = 'https://uat48.auruspay.com';\n* @returns {string} Aurus iframe Origin\n*/\nfunction getIframeUrl() {\n    var aurusURL;\n    if ($('#frame_carddetails').length) {\n        var aurusLongURL = $('#frame_carddetails').attr('src');\n        aurusURL = 'https://' + aurusLongURL.split('/')[2];\n    }\n    return aurusURL;\n}\n\n/**\n* This function initiates Ajax call within the Aurus iframe to retrieve the one time token (OTT)\n* This method needs to be called onSubmit button click present on Merchant's page.\n*/\nfunction getCardToken() {\n    var aurusURL = getIframeUrl();\n    var frame = document.getElementById('frame_carddetails');\n    frame.contentWindow.postMessage('aurus-token', aurusURL);\n}\n\n// /**\n// * This function initiates Ajax call within the Aurus iframe to retrieve the one time token (OTT)\n// * This method needs to be called onSubmit button click present on Merchant's page.\n// * @param {JSON} JSONdata the response data from the OTT request within the iFrame\n// */\n// function responseHandler(JSONdata) {\n//     window.console.log('responseHandler called----->>>');\n//     try {\n//         var $msg = $('#token-error');\n//         // Handle the Error Response here\n//         if (Number(JSONdata.response_code) > 0) {\n//             $msg.text('ERROR: ' + JSONdata.response_code + ' - ' + JSONdata.response_text);\n//             $('#buttonSubmit').prop('disabled', false);\n//         } else { // Handle the success response here like below:\n//             window.console.log('responseHandler called SUCCESS----->>>');\n//             $msg.text('SUCCESS');\n//             // var $form = $('#dwfrm_billing');\n\n//             // $form.append($('<input type=\"hidden\" name=\"card_token\">').val(JSONdata.card_token));\n//             // $form.append($('<input type=\"hidden\" name=\"card_holder_name\">').val(JSONdata.card_holder_name));\n\n//             $('#cardType').val(JSONdata.card_type);\n//             var maskedCardNum = 'dwfrm_billing_creditCardFields_cardNumber=' + JSONdata.masked_card_num + '&';\n//             var expiryDate = 'dwfrm_billing_creditCardFields_expirationDate=' + JSONdata.card_expiry_date + '&';\n//             var resCode = 'dwfrm_billing_creditCardFields_responseCode=' + JSONdata.response_code + '&';\n//             var resText = 'dwfrm_billing_creditCardFields_responseText=' + JSONdata.response_text + '&';\n//             var ott = 'dwfrm_billing_creditCardFields_ott=' + JSONdata.one_time_token;\n//             formHelpers.clearPreviousErrors('.payment-form');\n//             window.console.log('responseHandler called SUCCESS----->>>',ott);\n//             window.console.log('responseHandler called expiryDate----->>>',expiryDate);\n//             window.console.log('responseHandler called resCode----->>>',resCode);\n//             window.console.log('responseHandler called resText----->>>',resText);\n//             var shippingFormData = $('.single-shipping .shipping-form').serialize();\n\n//             $('body').trigger('checkout:serializeShipping', {\n//                 form: $('.single-shipping .shipping-form'),\n//                 data: shippingFormData,\n//                 callback: function (data) {\n//                     shippingFormData = data;\n//                 }\n//             });\n\n//             var billingAddressForm = $('#dwfrm_billing .billing-address-block :input').serialize();\n\n//             $('body').trigger('checkout:serializeBilling', {\n//                 form: $('#dwfrm_billing .billing-address-block'),\n//                 data: billingAddressForm,\n//                 callback: function (data) {\n//                     if (data) {\n//                         billingAddressForm = data;\n//                     }\n//                 }\n//             });\n\n//             var contactInfoForm = $('#dwfrm_billing .contact-info-block :input').serialize();\n\n//             $('body').trigger('checkout:serializeBilling', {\n//                 form: $('#dwfrm_billing .contact-info-block'),\n//                 data: contactInfoForm,\n//                 callback: function (data) {\n//                     if (data) {\n//                         contactInfoForm = data;\n//                     }\n//                 }\n//             });\n\n//             var activeTabId = $('.tab-pane.active').attr('id');\n\n//             var paymentInfoSelector = '#dwfrm_billing .' + activeTabId + ' .payment-form-fields :input';\n//             var paymentInfoForm = $(paymentInfoSelector).serialize();\n//             paymentInfoForm = paymentInfoForm + '&' + maskedCardNum + expiryDate + resCode + resText + ott;\n\n//             var paymentForm = shippingFormData + '&' + billingAddressForm + '&' + contactInfoForm + '&' + paymentInfoForm;\n//             window.console.log('paymentForm====>>',paymentForm);\n//             // disable the next:Place Order button here\n//             $('body').trigger('checkout:disableButton', '.next-step-button button');\n//             var defer = $.Deferred();// eslint-disable-line\n//             window.console.log('defer' ,defer);\n//             var test= $('#dwfrm_billing').attr('action');\n//             window.console.log('test...',test);\n//             // Ajax call to server side\n//             $.ajax({\n//                 url: $('#dwfrm_billing').attr('action'),\n//                 method: 'POST',\n//                 data: paymentForm,\n//                 success: function (data) {\n//                     // enable the next:Place Order button here\n//                     $('body').trigger('checkout:enableButton', '.next-step-button button');\n//                     // look for field validation errors\n//                     if (data.error) {\n//                         if (data.fieldErrors.length) {\n//                             data.fieldErrors.forEach(function (error) {\n//                                 if (Object.keys(error).length) {\n//                                     formHelpers.loadFormErrors('.payment-form', error);\n//                                 }\n//                             });\n//                         }\n\n//                         if (data.serverErrors.length) {\n//                             data.serverErrors.forEach(function (error) {\n//                                 $('.error-message').show();\n//                                 $('.error-message-text').text(error);\n//                                 scrollAnimate($('.error-message'));\n//                             });\n//                         }\n\n//                         if (data.cartError) {\n//                             window.location.href = data.redirectUrl;\n//                         }\n\n//                         defer.reject();\n//                     } else {\n//                         //\n//                         // Populate the Address Summary\n//                         //\n//                         $('body').trigger('checkout:updateCheckoutView',\n//                             { order: data.order, customer: data.customer });\n\n//                         if (data.renderedPaymentInstruments) {\n//                             $('.stored-payments').empty().html(\n//                                 data.renderedPaymentInstruments\n//                             );\n//                         }\n\n//                         if (data.customer.registeredUser\n//                             && data.customer.customerPaymentInstruments.length\n//                         ) {\n//                             $('.cancel-new-payment').removeClass('checkout-hidden');\n//                         }\n\n//                         scrollAnimate();\n//                         defer.resolve(data);\n//                     }\n//                 },\n//                 error: function (err) {\n//                     // enable the next:Place Order button here\n//                     $('body').trigger('checkout:enableButton', '.next-step-button button');\n//                     if (err.responseJSON && err.responseJSON.redirectUrl) {\n//                         window.location.href = err.responseJSON.redirectUrl;\n//                     }\n//                 }\n//             });\n//         }\n//     } catch (error) {\n//         window.console.log('ERROR: ' + error);\n//     }\n// }\n\n// This will get triggered when Aurus will post the OTT response on Merchant's page\n\nwindow.addEventListener('message', function (event) {\n    var aurusURL = getIframeUrl();\n    var data = event.data;\n    var splt;\n    var json;\n    if (event.origin !== aurusURL) {\n        window.console.log('Wrong Origin...');\n        return;\n    }\n    //  else if (data.startsWith('response')) {\n    //     splt = data.split('=');\n    //     json = JSON.parse(splt[1]);\n    //     //responseHandler(json);\n    // } else if (data.startsWith('enablePlaceOrder')) {\n    //     splt = data.split('=');\n    //     json = JSON.parse(splt[1]);\n    //     // TODO: if failure disable place order button\n    //     // var enableBtn = json ? true : false;\n    //     // enablePlaceOrderBtn(enableBtn);\n    else if (data.startsWith('iframeHeight')) {\n         splt = data.split('=');\n         json = splt[1];\n         console.log(\"Iframe height:\"+json); \n         $(\"#frame_carddetails\").css(\"height\",json);\n    }\n});\n\nmodule.exports = {\n    methods: {\n        getCardToken: getCardToken,\n        getAurusSession: getAurusSession,\n        getAurusPayPalSession: getAurusPayPalSession,\n        getBillerToken: getBillerToken,\n        onclickPaypalButton:onclickPaypalButton\n    }\n};\n\n\n//# sourceURL=webpack://int_aurus_sfra/./cartridges/int_aurus_sfra/cartridge/client/default/js/aurusCheckout.js?");

/***/ }),

/***/ "./cartridges/int_aurus_sfra/cartridge/client/default/js/checkout.js":
/*!***************************************************************************!*\
  !*** ./cartridges/int_aurus_sfra/cartridge/client/default/js/checkout.js ***!
  \***************************************************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval("\n\nvar processInclude = __webpack_require__(/*! base/util */ \"../storefront-reference-architecture-master/cartridges/app_storefront_base/cartridge/client/default/js/util.js\");\n\n$(document).ready(function () {\n    processInclude(__webpack_require__(/*! ./checkout/checkout */ \"./cartridges/int_aurus_sfra/cartridge/client/default/js/checkout/checkout.js\"));\n});\n\n\n//# sourceURL=webpack://int_aurus_sfra/./cartridges/int_aurus_sfra/cartridge/client/default/js/checkout.js?");

/***/ }),

/***/ "./cartridges/int_aurus_sfra/cartridge/client/default/js/checkout/billing.js":
/*!***********************************************************************************!*\
  !*** ./cartridges/int_aurus_sfra/cartridge/client/default/js/checkout/billing.js ***!
  \***********************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval("\n\nvar base = __webpack_require__(/*! base/checkout/billing */ \"../storefront-reference-architecture-master/cartridges/app_storefront_base/cartridge/client/default/js/checkout/billing.js\");\nvar addressHelpers = __webpack_require__(/*! base/checkout/address */ \"../storefront-reference-architecture-master/cartridges/app_storefront_base/cartridge/client/default/js/checkout/address.js\");\n\n// Custom Aurus client side code\nvar aurusCheckout = __webpack_require__(/*! ../aurusCheckout */ \"./cartridges/int_aurus_sfra/cartridge/client/default/js/aurusCheckout.js\");\n\n/**\n* Handles credit card number validation\n* Overriding base cartrisge validation as there are no credit card numbers to process\n* because form is an external iFrame\n* @returns {number} returns zero\n*/\nbase.handleCreditCardNumber = function () {\n    return 0;\n};\n\n/**\n* Attaches click event to add payment button\n* Renders new iFrame session for new card submission\n*/\nbase.addNewPaymentInstrument = function () {\n    $('.btn.add-payment').on('click', function (e) {\n        e.preventDefault();\n        aurusCheckout.methods.getAurusSession('newCard');\n        $('.cancel-new-payment').removeClass('checkout-hidden');\n        $('.save-credit-card').removeClass('checkout-hidden');\n        $('.stored-payments').addClass('checkout-hidden');\n        $(this).addClass('checkout-hidden');\n    });\n};\n\n/**\n* Attaches click event to cancel new payment button\n* Renders saved card form into iFrame from Aurus\n*/\nbase.cancelNewPayment = function () {\n    $('.cancel-new-payment').on('click', function (e) {\n        e.preventDefault();\n        aurusCheckout.methods.getAurusSession();\n        $('.btn.add-payment').removeClass('checkout-hidden');\n        $('.stored-payments').removeClass('checkout-hidden');\n        $('.save-credit-card').addClass('checkout-hidden');\n        $(this).addClass('checkout-hidden');\n    });\n};\n\n/**\n* updates the billing address form values within payment forms\n* @param {Object} order - the order model\n*/\nfunction updateBillingAddressFormValues(order) {\n    var billing = order.billing;\n    if (!billing.billingAddress || !billing.billingAddress.address) return;\n\n    var form = $('form[name=dwfrm_billing]');\n    if (!form) return;\n\n    $('input[name$=_firstName]', form).val(billing.billingAddress.address.firstName);\n    $('input[name$=_lastName]', form).val(billing.billingAddress.address.lastName);\n    $('input[name$=_address1]', form).val(billing.billingAddress.address.address1);\n    $('input[name$=_address2]', form).val(billing.billingAddress.address.address2);\n    $('input[name$=_city]', form).val(billing.billingAddress.address.city);\n    $('input[name$=_postalCode]', form).val(billing.billingAddress.address.postalCode);\n    $('select[name$=_stateCode],input[name$=_stateCode]', form)\n        .val(billing.billingAddress.address.stateCode);\n    $('select[name$=_country]', form).val(billing.billingAddress.address.countryCode.value);\n    $('input[name$=_phone]', form).val(billing.billingAddress.address.phone);\n    $('input[name$=_email]', form).val(order.orderEmail);\n\n    if (billing.payment && billing.payment.selectedPaymentInstruments\n        && billing.payment.selectedPaymentInstruments.length > 0) {\n        var instrument = billing.payment.selectedPaymentInstruments[0];\n        $('select[name$=expirationMonth]', form).val(instrument.expirationMonth);\n        $('select[name$=expirationYear]', form).val(instrument.expirationYear);\n        // Force security code and card number clear\n        $('input[name$=securityCode]', form).val('');\n        // $('input[name$=cardNumber]').data('cleave').setRawValue('');\n    }\n}\n\nbase.methods.updateBillingInformation = function (order, customer) {\n    base.methods.updateBillingAddressSelector(order, customer);\n\n    // update billing address form\n    updateBillingAddressFormValues(order);\n\n    // update billing address summary\n    addressHelpers.methods.populateAddressSummary('.billing .address-summary',\n        order.billing.billingAddress.address);\n\n    // update billing parts of order summary\n    $('.order-summary-email').text(order.orderEmail);\n\n    if (order.billing.billingAddress.address) {\n        $('.order-summary-phone').text(order.billing.billingAddress.address.phone);\n    }\n};\n\nbase.paymentTabs = function () {\n    $('.payment-options .nav-item').on('click', function (e) {\n        e.preventDefault();\n        var methodID = $(this).data('method-id');\n        $('.payment-information').data('payment-method-id', methodID);\n        if (methodID === 'PayPal') {\n            aurusCheckout.methods.getAurusPayPalSession();\n            aurusCheckout.methods.getBillerToken();\n        }\n    });\n};\n\nmodule.exports = base;\n\n\n//# sourceURL=webpack://int_aurus_sfra/./cartridges/int_aurus_sfra/cartridge/client/default/js/checkout/billing.js?");

/***/ }),

/***/ "./cartridges/int_aurus_sfra/cartridge/client/default/js/checkout/checkout.js":
/*!************************************************************************************!*\
  !*** ./cartridges/int_aurus_sfra/cartridge/client/default/js/checkout/checkout.js ***!
  \************************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval("/* eslint-disable no-redeclare */\n/* eslint-disable block-scoped-var */\n/* eslint-disable no-lonely-if */\n\n// Changed By me\nvar customerHelpers = __webpack_require__(/*! base/checkout/customer */ \"../storefront-reference-architecture-master/cartridges/app_storefront_base/cartridge/client/default/js/checkout/customer.js\");\nvar addressHelpers = __webpack_require__(/*! base/checkout/address */ \"../storefront-reference-architecture-master/cartridges/app_storefront_base/cartridge/client/default/js/checkout/address.js\");\nvar shippingHelpers = __webpack_require__(/*! base/checkout/shipping */ \"../storefront-reference-architecture-master/cartridges/app_storefront_base/cartridge/client/default/js/checkout/shipping.js\");\nvar billingHelpers = __webpack_require__(/*! ./billing */ \"./cartridges/int_aurus_sfra/cartridge/client/default/js/checkout/billing.js\");\nvar summaryHelpers = __webpack_require__(/*! base/checkout/summary */ \"../storefront-reference-architecture-master/cartridges/app_storefront_base/cartridge/client/default/js/checkout/summary.js\");\nvar formHelpers = __webpack_require__(/*! base/checkout/formErrors */ \"../storefront-reference-architecture-master/cartridges/app_storefront_base/cartridge/client/default/js/checkout/formErrors.js\");\nvar scrollAnimate = __webpack_require__(/*! base/components/scrollAnimate */ \"../storefront-reference-architecture-master/cartridges/app_storefront_base/cartridge/client/default/js/components/scrollAnimate.js\");\nvar aurusCheckout = __webpack_require__(/*! ../aurusCheckout */ \"./cartridges/int_aurus_sfra/cartridge/client/default/js/aurusCheckout.js\");\nvar Aurus = __webpack_require__(/*! ../test */ \"./cartridges/int_aurus_sfra/cartridge/client/default/js/test.js\");\n\n/**\n * Create the jQuery Checkout Plugin.\n *\n * This jQuery plugin will be registered on the dom element in checkout.isml with the\n * id of \"checkout-main\".\n *\n * The checkout plugin will handle the different state the user interface is in as the user\n * progresses through the varying forms such as shipping and payment.\n *\n * Billing info and payment info are used a bit synonymously in this code.\n *\n */\n(function ($) {\n    $.fn.aurusPayCheckout = function () { // eslint-disable-line\n        var plugin = this;\n        var ottRequested = false;\n\n\n        // Declare variables for storing responseHandler data\n        var maskedCardNum = '';\n        var expiryDate = '';\n        var resCode = '';\n        var resText = '';\n        var ott = '';\n\n        //\n        // Collect form data from user input\n        //\n        var formData = {\n            // Changed By me\n            // Customer Data\n            customer: {},\n\n            // Shipping Address\n            shipping: {},\n\n            // Billing Address\n            billing: {},\n\n            // Payment\n            payment: {},\n\n            // Gift Codes\n            giftCode: {},\n        };\n\n        //\n        // The different states/stages of checkout\n        //\n        var checkoutStages = [\n            'customer',\n            'shipping',\n            'payment',\n            'placeOrder',\n            'submitted',\n        ];\n        /**\n         * This function initiates Ajax call within the Aurus iframe to retrieve the one time token (OTT)\n         * This method needs to be called onSubmit button click present on Merchant's page.\n         * @param {JSON} JSONdata the response data from the OTT request within the iFrame\n         */\n        function responseHandler(JSONdata) {\n            var defer = $.Deferred(); // eslint-disable-line\n            try {\n                var $msg = $('#token-error');\n                // Handle the Error Response here\n                if (Number(JSONdata.response_code) > 0) {\n                    $msg.text('ERROR: ' + JSONdata.response_code + ' - ' + JSONdata.response_text);\n                    $('#buttonSubmit').prop('disabled', false);\n                } else { // Handle the success response here like below:\n                    $msg.text('SUCCESS');\n\n                    $('#cardType').val(JSONdata.card_type);\n                    maskedCardNum = 'dwfrm_billing_creditCardFields_cardNumber=' + JSONdata.masked_card_num + '&';\n                    expiryDate = 'dwfrm_billing_creditCardFields_expirationDate=' + JSONdata.card_expiry_date + '&';\n                    resCode = 'dwfrm_billing_creditCardFields_responseCode=' + JSONdata.response_code + '&';\n                    resText = 'dwfrm_billing_creditCardFields_responseText=' + JSONdata.response_text + '&';\n                    ott = 'dwfrm_billing_creditCardFields_ott=' + JSONdata.one_time_token;\n                }\n            } catch (error) {\n                window.console.log('ERROR: ' + error);\n            }\n            defer.resolve();\n            return defer.promise();\n        }\n\n        //Payment Stage function\n        function executeTryBlock() {\n            try {\n                formHelpers.clearPreviousErrors('.payment-form');\n                var shippingFormData = $('.single-shipping .shipping-form').serialize();\n\n                $('body').trigger('checkout:serializeShipping', {\n                    form: $('.single-shipping .shipping-form'),\n                    data: shippingFormData,\n                    callback: function (data) {\n                        shippingFormData = data;\n                    }\n                });\n\n                var billingAddressForm = $('#dwfrm_billing .billing-address-block :input').serialize();\n\n                $('body').trigger('checkout:serializeBilling', {\n                    form: $('#dwfrm_billing .billing-address-block'),\n                    data: billingAddressForm,\n                    callback: function (data) {\n                        if (data) {\n                            billingAddressForm = data;\n                        }\n                    }\n                });\n\n                var contactInfoForm = $('#dwfrm_billing .contact-info-block :input').serialize();\n\n                $('body').trigger('checkout:serializeBilling', {\n                    form: $('#dwfrm_billing .contact-info-block'),\n                    data: contactInfoForm,\n                    callback: function (data) {\n                        if (data) {\n                            contactInfoForm = data;\n                        }\n                    }\n                });\n\n                var activeTabId = $('.tab-pane.active').attr('id');\n\n                var paymentInfoSelector = '#dwfrm_billing .' + activeTabId + ' .payment-form-fields :input';\n                var paymentInfoForm = $(paymentInfoSelector).serialize();\n                paymentInfoForm = paymentInfoForm + '&' + maskedCardNum + expiryDate + resCode + resText + ott;\n\n                var paymentForm = shippingFormData + '&' + billingAddressForm + '&' + contactInfoForm + '&' + paymentInfoForm;\n                // disable the next:Place Order button here\n                $('body').trigger('checkout:disableButton', '.next-step-button button');\n                var defer = $.Deferred(); // eslint-disable-line\n                var test = $('#dwfrm_billing').attr('action');\n                window.console.log('test...', test);\n                // Ajax call to server side\n                $.ajax({\n                    url: $('#dwfrm_billing').attr('action'),\n                    method: 'POST',\n                    data: paymentForm,\n                    success: function (data) {\n                        // enable the next:Place Order button here\n                        $('body').trigger('checkout:enableButton', '.next-step-button button');\n                        // look for field validation errors\n                        if (data.error) {\n                            if (data.fieldErrors.length) {\n                                data.fieldErrors.forEach(function (error) {\n                                    if (Object.keys(error).length) {\n                                        formHelpers.loadFormErrors('.payment-form', error);\n                                    }\n                                });\n                            }\n\n                            if (data.serverErrors.length) {\n                                data.serverErrors.forEach(function (error) {\n                                    $('.error-message').show();\n                                    $('.error-message-text').text(error);\n                                    scrollAnimate($('.error-message'));\n                                });\n                            }\n\n                            if (data.cartError) {\n                                window.location.href = data.redirectUrl;\n                            }\n\n                            defer.reject();\n                        } else {\n                            //\n                            // Populate the Address Summary\n                            //\n                            $('body').trigger('checkout:updateCheckoutView', {\n                                order: data.order,\n                                customer: data.customer\n                            });\n\n                            if (data.renderedPaymentInstruments) {\n                                $('.stored-payments').empty().html(\n                                    data.renderedPaymentInstruments\n                                );\n                            }\n\n                            if (data.customer.registeredUser &&\n                                data.customer.customerPaymentInstruments.length\n                            ) {\n                                $('.cancel-new-payment').removeClass('checkout-hidden');\n                            }\n\n                            scrollAnimate();\n                            defer.resolve(data);\n                        }\n                    },\n                    error: function (err) {\n                        // enable the next:Place Order button here\n                        $('body').trigger('checkout:enableButton', '.next-step-button button');\n                        if (err.responseJSON && err.responseJSON.redirectUrl) {\n                            window.location.href = err.responseJSON.redirectUrl;\n                        }\n                    }\n                });\n            } catch (error) {\n                window.console.log('ERROR: ' + error);\n            }\n        }\n\n        /**\n         * Updates the URL to determine stage\n         * @param {number} currentStage - The current stage the user is currently on in the checkout\n         */\n        function updateUrl(currentStage) {\n            history.pushState(\n                checkoutStages[currentStage],\n                document.title,\n                location.pathname +\n                '?stage=' +\n                checkoutStages[currentStage] +\n                '#' +\n                checkoutStages[currentStage]\n            );\n\n            callAjax(currentStage);\n\n        }\n        /**\n         * Updates the URL to determine stage\n         * @param {number} currentStage - The current stage the user is currently on in the checkout\n         */\n\n        function callAjax(currentStage) {\n            if (currentStage >= 2) {\n                $('#AppleDiv').show();\n                $('#paypalDiv').show();\n                $('#klarnaButtonDiv_Top').show();\n                $('#klarnaDiv').show();\n                $('#googlepayDiv').show();\n\n            } else {\n                $('#AppleDiv').hide();\n                $('#paypalDiv').hide();\n                $('#klarnaButtonDiv_Top').hide();\n                $('#klarnaDiv').hide();\n                $('#googlepayDiv').hide();\n            }\n        }\n\n        //\n        // Local member methods of the Checkout plugin\n        //\n        var members = {\n\n            // initialize the currentStage variable for the first time\n            currentStage: 0,\n\n            /**\n             * Set or update the checkout stage (AKA the shipping, billing, payment, etc... steps)\n             * @returns {Object} a promise\n             */\n            updateStage: function () {\n                var stage = checkoutStages[members.currentStage];\n                var defer = $.Deferred(); // eslint-disable-line\n                // Changed By me\n                if (stage === 'customer') {\n                    //\n                    // Clear Previous Errors\n                    //\n                    customerHelpers.methods.clearErrors();\n                    //\n                    // Submit the Customer Form\n                    //\n                    var customerFormSelector = customerHelpers.methods.isGuestFormActive() ? customerHelpers.vars.GUEST_FORM : customerHelpers.vars.REGISTERED_FORM;\n                    var customerForm = $(customerFormSelector);\n                    $.ajax({\n                        url: customerForm.attr('action'),\n                        type: 'post',\n                        data: customerForm.serialize(),\n                        success: function (data) {\n                            $('body').trigger('checkout:updateCheckoutView', data);\n                            if (data.redirectUrl) {\n                                window.location.href = data.redirectUrl;\n                            } else {\n                                customerHelpers.methods.customerFormResponse(defer, data);\n                            }\n                        },\n                        error: function (err) {\n                            if (err.responseJSON && err.responseJSON.redirectUrl) {\n                                window.location.href = err.responseJSON.redirectUrl;\n                            }\n                            // Server error submitting form\n                            defer.reject(err.responseJSON);\n                        },\n                    });\n                    return defer;\n                } else if (stage === 'shipping') {\n                    window.console.log('shipping stage');\n\n\n                    //\n                    // Clear Previous Errors\n                    //\n                    formHelpers.clearPreviousErrors('.shipping-form');\n\n                    //\n                    // Submit the Shipping Address Form\n                    //\n                    var isMultiShip = $('#checkout-main').hasClass('multi-ship');\n                    var formSelector = isMultiShip ?\n                        '.multi-shipping .active form' : '.single-shipping .shipping-form';\n                    var form = $(formSelector);\n\n                    if (isMultiShip && form.length === 0) {\n                        // disable the next:Payment button here\n                        $('body').trigger('checkout:disableButton', '.next-step-button button');\n                        // in case the multi ship form is already submitted\n                        var url = $('#checkout-main').attr('data-checkout-get-url');\n                        $.ajax({\n                            url: url,\n                            method: 'GET',\n                            success: function (data) {\n                                // enable the next:Payment button here\n                                $('body').trigger('checkout:enableButton', '.next-step-button button');\n                                if (!data.error) {\n                                    $('body').trigger('checkout:updateCheckoutView', {\n                                        order: data.order,\n                                        customer: data.customer\n                                    });\n                                    defer.resolve();\n                                } else if (data.message && $('.shipping-error .alert-danger').length < 1) {\n                                    var errorMsg = data.message;\n                                    var errorHtml = '<div class=\"alert alert-danger alert-dismissible valid-cart-error ' +\n                                        'fade show\" role=\"alert\">' +\n                                        '<button type=\"button\" class=\"close\" data-dismiss=\"alert\" aria-label=\"Close\">' +\n                                        '<span aria-hidden=\"true\">&times;</span>' +\n                                        '</button>' + errorMsg + '</div>';\n                                    $('.shipping-error').append(errorHtml);\n                                    scrollAnimate($('.shipping-error'));\n                                    defer.reject();\n                                } else if (data.redirectUrl) {\n                                    window.location.href = data.redirectUrl;\n                                }\n                            },\n                            error: function () {\n                                // enable the next:Payment button here\n                                $('body').trigger('checkout:enableButton', '.next-step-button button');\n                                // Server error submitting form\n                                defer.reject();\n                            },\n                        });\n                    } else {\n                        var shippingFormData = form.serialize();\n\n                        $('body').trigger('checkout:serializeShipping', {\n                            form: form,\n                            data: shippingFormData,\n                            callback: function (data) {\n                                shippingFormData = data;\n                            },\n                        });\n                        // disable the next:Payment button here\n                        $('body').trigger('checkout:disableButton', '.next-step-button button');\n                        $.ajax({\n                            url: form.attr('action'),\n                            type: 'post',\n                            data: shippingFormData,\n                            success: function (data) {\n                                // enable the next:Payment button here\n                                $('body').trigger('checkout:enableButton', '.next-step-button button');\n                                shippingHelpers.methods.shippingFormResponse(defer, data);\n\n                                $('body').trigger('checkout:updateCheckoutView', data);\n                                if (!data.error) {\n                                    $.ajax({\n                                        url: 'AurusWallet-GetGenericJsonObj',\n                                        method: 'GET',\n                                        success: function (data) {\n                                            window.console.log('getGenericJsonObj ==>>', data);\n                                            var jq = $.noConflict();\n                                            jq(document).ready(function () {\n                                                Aurus.aurusInit(data.getGenericJsonObj, jq);\n                                            });\n                                        },\n                                        error: function (xhr, status, error) {\n                                            console.error(\"Error: \" + error);\n                                        }\n                                    });\n                                }\n                            //     if (!data.error) {\n                            //     $.ajax({\n                            //         url: 'AurusKlarna-klarnaGetGenericJsonObj',\n                            //         method: 'GET',\n                            //         success: function (data) {\n                            //             window.console.log('getGenericJsonObj ==>>', data);\n                            //             var jq = $.noConflict();\n                            //             jq(document).ready(function () {\n                            //                 Aurus.aurusInit(data.getGenericJsonObj, jq);\n                            //             });\n                            //         },\n                            //         error: function (xhr, status, error) {\n                            //             console.error(\"Error: \" + error);\n                            //         }\n                            //     });\n                            //    }\n                            },\n                            error: function (err) {\n                                // enable the next:Payment button here\n                                $('body').trigger('checkout:enableButton', '.next-step-button button');\n                                if (err.responseJSON && err.responseJSON.redirectUrl) {\n                                    window.location.href = err.responseJSON.redirectUrl;\n                                }\n                                // Server error submitting form\n                                defer.reject(err.responseJSON);\n                            },\n                        });\n\n                    }\n                    return defer;\n                } else if (stage === 'payment') {\n                    //\n                    // Submit the Billing Address Form\n                    //\n\n                    // Function loads iFrame and iFrame events for Aurus OTT and pre-auth\n                    aurusCheckout.methods.getCardToken();\n\n                    // This will get triggered when Aurus will post the OTT response on Merchant's page\n                    window.addEventListener('message', function (event) {\n                        var data = event.data;\n                        var splt;\n                        var json;\n                        if (data.startsWith('response')) {\n                            splt = data.split('=');\n                            json = JSON.parse(splt[1]);\n                            responseHandler(json).done(function () {\n                                executeTryBlock();\n                            })\n                        } else if (data.startsWith('enablePlaceOrder')) {\n                            splt = data.split('=');\n                            json = JSON.parse(splt[1]);\n                            // TODO: if failure disable place order button\n                            // var enableBtn = json ? true : false;\n                            // enablePlaceOrderBtn(enableBtn);\n                        }\n                    });\n                    executeTryBlock();\n                } else if (stage === 'placeOrder') {\n                    // disable the placeOrder button here\n                    $('body').trigger('checkout:disableButton', '.next-step-button button');\n                    $.ajax({\n                        url: $('.place-order').data('action'),\n                        method: 'POST',\n                        success: function (data) {\n                            // enable the placeOrder button here\n                            $('body').trigger('checkout:enableButton', '.next-step-button button');\n                            if (data.error) {\n                                if (data.cartError) {\n                                    window.location.href = data.redirectUrl;\n                                    defer.reject();\n                                } else {\n                                    // go to appropriate stage and display error message\n                                    defer.reject(data);\n                                }\n                            } else {\n                                if (data.apm) {\n                                    var params = data.continueUrl.slice(data.continueUrl.indexOf('?') + 1).split('&');\n                                    var redirect = $('<form>')\n                                        .appendTo(document.body)\n                                        .attr({\n                                            method: 'GET',\n                                            action: data.continueUrl,\n                                        });\n\n                                    Object.keys(params).forEach(function (keys) {\n                                        var param = params[keys].split('=');\n                                        $('<input>')\n                                            .appendTo(redirect)\n                                            .attr({\n                                                name: param[0],\n                                                value: param[1],\n                                            });\n                                    });\n\n                                    $('<input>')\n                                        .appendTo(redirect)\n                                        .attr({\n                                            name: 'orderID',\n                                            value: data.orderID,\n                                        });\n\n                                    $('<input>')\n                                        .appendTo(redirect)\n                                        .attr({\n                                            name: 'orderToken',\n                                            value: data.orderToken,\n                                        });\n\n                                    redirect.submit();\n                                    defer.resolve(data);\n                                } else {\n                                    var redirect = $('<form>')\n                                        .appendTo(document.body)\n                                        .attr({\n                                            method: 'POST',\n                                            action: data.continueUrl,\n                                        });\n\n                                    $('<input>')\n                                        .appendTo(redirect)\n                                        .attr({\n                                            name: 'orderID',\n                                            value: data.orderID,\n                                        });\n\n                                    $('<input>')\n                                        .appendTo(redirect)\n                                        .attr({\n                                            name: 'orderToken',\n                                            value: data.orderToken,\n                                        });\n\n                                    redirect.submit();\n                                    defer.resolve(data);\n                                }\n                            }\n                        },\n                        error: function () {\n                            // enable the placeOrder button here\n                            $('body').trigger('checkout:enableButton', $('.next-step-button button'));\n                        },\n                    });\n\n                    return defer;\n                }\n                var p = $('<div>').promise(); // eslint-disable-line\n                setTimeout(function () {\n                    p.done(); // eslint-disable-line\n                }, 500);\n                return p; // eslint-disable-line\n            },\n\n            /**\n             * Initialize the checkout stage.\n             *\n             * TODO: update this to allow stage to be set from server?\n             */\n            initialize: function () {\n                // set the initial state of checkout\n                members.currentStage = checkoutStages\n                    .indexOf($('.data-checkout-stage').data('checkout-stage'));\n                $(plugin).attr('data-checkout-stage', checkoutStages[members.currentStage]);\n\n                $('body').on('click', '.submit-customer-login', function (e) {\n                    e.preventDefault();\n                    members.nextStage();\n                });\n\n                $('body').on('click', '.submit-customer', function (e) {\n                    e.preventDefault();\n                    members.nextStage();\n                });\n\n                //\n                // Handle Payment option selection\n                //\n                $('input[name$=\"paymentMethod\"]', plugin).on('change', function () {\n                    $('.credit-card-form').toggle($(this).val() === 'CREDIT_CARD');\n                });\n\n                //\n                // Handle Next State button click\n                //\n                $(plugin).on('click', '.next-step-button button', function () {\n                    members.nextStage();\n                });\n\n                // Changed By me\n                //\n                // Handle Edit buttons on shipping and payment summary cards\n                //\n                $('.customer-summary .edit-button', plugin).on('click', function () {\n                    members.gotoStage('customer');\n                });\n\n                $('.shipping-summary .edit-button', plugin).on('click', function () {\n                    if (!$('#checkout-main').hasClass('multi-ship')) {\n                        $('body').trigger('shipping:selectSingleShipping');\n                    }\n\n                    members.gotoStage('shipping');\n                });\n\n                $('.payment-summary .edit-button', plugin).on('click', function () {\n                    members.gotoStage('payment');\n                });\n\n                //\n                // remember stage (e.g. shipping)\n                //\n                updateUrl(members.currentStage);\n\n                //\n                // Listen for foward/back button press and move to correct checkout-stage\n                //\n                $(window).on('popstate', function (e) {\n                    //\n                    // Back button when event state less than current state in ordered\n                    // checkoutStages array.\n                    //\n                    if (e.state === null ||\n                        checkoutStages.indexOf(e.state) < members.currentStage) {\n                        members.handlePrevStage(false);\n                    } else if (checkoutStages.indexOf(e.state) > members.currentStage) {\n                        // Forward button  pressed\n                        members.handleNextStage(false);\n                    }\n                });\n\n                //\n                // Set the form data\n                //\n                plugin.data('formData', formData);\n            },\n\n            /**\n             * The next checkout state step updates the css for showing correct buttons etc...\n             */\n            nextStage: function () {\n                var promise = members.updateStage();\n\n                promise.done(function () {\n                    // Update UI with new stage\n                    $('.error-message').hide();\n                    members.handleNextStage(true);\n                    window.console.log('nextStage sucess', members.currentStage);\n                    //callAjax(members.currentStage);\n                });\n\n                promise.fail(function (data) {\n                    // show errors\n                    if (data) {\n                        if (data.errorStage) {\n                            members.gotoStage(data.errorStage.stage);\n\n                            if (data.errorStage.step === 'billingAddress') {\n                                var $billingAddressSameAsShipping = $(\n                                    'input[name$=\"_shippingAddressUseAsBillingAddress\"]'\n                                );\n                                if ($billingAddressSameAsShipping.is(':checked')) {\n                                    $billingAddressSameAsShipping.prop('checked', false);\n                                }\n                            }\n                        }\n\n                        if (data.errorMessage) {\n                            $('.error-message').show();\n                            $('.error-message-text').text(data.errorMessage);\n                        }\n                    }\n                });\n            },\n\n            /**\n             * The next checkout state step updates the css for showing correct buttons etc...\n             *\n             * @param {boolean} bPushState - boolean when true pushes state using the history api.\n             */\n            handleNextStage: function (bPushState) {\n                if (members.currentStage < checkoutStages.length - 1) {\n                    // move stage forward\n                    members.currentStage++;\n                    //paypalDiv is showing in Next:Place Order and Place Order\n                    window.console.log('members.currentStage in handlenextStage', members.currentStage);\n                    //callAjax(members.currentStage);\n                    //\n                    // show new stage in url (e.g.payment)\n                    //\n                    if (bPushState) {\n                        updateUrl(members.currentStage);\n                    }\n                }\n\n                // Set the next stage on the DOM\n                $(plugin).attr('data-checkout-stage', checkoutStages[members.currentStage]);\n            },\n\n            /**\n             * Previous State\n             */\n            handlePrevStage: function () {\n                if (members.currentStage > 0) {\n                    // move state back\n                    members.currentStage--;\n                    //paypalDiv is hide at the time of Next:Payment button\n                    window.console.log('members.currentStage handlePrevStage', members.currentStage);\n                    //aurusCheckout.methods.getAurusSession();\n                    updateUrl(members.currentStage);\n                    //callAjax(members.currentStage);\n                }\n\n                $(plugin).attr('data-checkout-stage', checkoutStages[members.currentStage]);\n            },\n\n            /**\n             * Use window history to go to a checkout stage\n             * @param {string} stageName - the checkout state to goto\n             */\n            gotoStage: function (stageName) {\n                window.console.log('gotoStage', members.currentStage);\n                members.currentStage = checkoutStages.indexOf(stageName);\n                //aurusCheckout.methods.getAurusSession();\n\n                updateUrl(members.currentStage);\n                //callAjax(members.currentStage);\n\n                $(plugin).attr('data-checkout-stage', checkoutStages[members.currentStage]);\n            },\n        };\n        window.console.log('members.currentStage before members initialize', members.currentStage);\n\n        //\n        // Initialize the checkout\n        //\n        members.initialize();\n\n        return this;\n    };\n}(jQuery));\n\n\nvar exports = {\n\n    showErrorMessage: function () {\n        var urlString = window.location.href;\n        var url = new URL(urlString);\n        var paymentError = url.searchParams.get('paymentError');\n        if (paymentError) {\n            $('.error-message').show();\n            $('.error-message-text').text(paymentError);\n        }\n    },\n\n    initialize: function () {\n       // Get and sets the iFrame src url for credit card checkout\n    aurusCheckout.methods.getAurusSession();\n    $('#checkout-main').aurusPayCheckout();\n\n    // Handle saved cards for registered users\n    if ($('.data-checkout-stage').data('customer-type') === 'registered') {\n        // Attach change event to renew iFrame\n        $('#paymentCardSelector').change(function () {\n            var savedSelectedCard = $('#paymentCardSelector option:selected').data('uuid');\n            aurusCheckout.methods.getAurusSession(savedSelectedCard);\n        });\n    }\n    },\n\n    updateCheckoutView: function () {\n        $('body').on('checkout:updateCheckoutView', function (e, data) {\n            if (data.csrfToken) {\n                $(\"input[name*='csrf_token']\").val(data.csrfToken);\n            }\n            customerHelpers.methods.updateCustomerInformation(data.customer, data.order);\n            shippingHelpers.methods.updateMultiShipInformation(data.order);\n            summaryHelpers.updateTotals(data.order.totals);\n            data.order.shipping.forEach(function (shipping) {\n                shippingHelpers.methods.updateShippingInformation(\n                    shipping,\n                    data.order,\n                    data.customer,\n                    data.options\n                );\n            });\n            billingHelpers.methods.updateBillingInformation(\n                data.order,\n                data.customer,\n                data.options\n            );\n            billingHelpers.methods.updatePaymentInformation(data.order, data.options);\n            summaryHelpers.updateOrderProductSummaryInformation(data.order, data.options);\n        });\n    },\n\n    disableButton: function () {\n        $('body').on('checkout:disableButton', function (e, button) {\n            $(button).prop('disabled', true);\n        });\n    },\n\n    enableButton: function () {\n        $('body').on('checkout:enableButton', function (e, button) {\n            $(button).prop('disabled', false);\n        });\n    },\n};\n// Changed By me\n[customerHelpers, billingHelpers, shippingHelpers, addressHelpers].forEach(function (library) {\n    Object.keys(library).forEach(function (item) {\n        if (typeof library[item] === 'object') {\n            exports[item] = $.extend({}, exports[item], library[item]);\n        } else {\n            exports[item] = library[item];\n        }\n    });\n});\n\nmodule.exports = exports;\n\n//# sourceURL=webpack://int_aurus_sfra/./cartridges/int_aurus_sfra/cartridge/client/default/js/checkout/checkout.js?");

/***/ }),

/***/ "./cartridges/int_aurus_sfra/cartridge/client/default/js/test.js":
/*!***********************************************************************!*\
  !*** ./cartridges/int_aurus_sfra/cartridge/client/default/js/test.js ***!
  \***********************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval("\nvar aurusCheckout = __webpack_require__(/*! ./aurusCheckout */ \"./cartridges/int_aurus_sfra/cartridge/client/default/js/aurusCheckout.js\");\nvar scrollAnimate = __webpack_require__(/*! base/components/scrollAnimate */ \"../storefront-reference-architecture-master/cartridges/app_storefront_base/cartridge/client/default/js/components/scrollAnimate.js\");\nwindow.console.log('test.js file called ');\nvar appleWalletDiv = '<div class=\"apple-pay-button-with-text apple-pay-button-black-with-text\" onclick=\"applePayButtonClicked()\">' +\n    '<span class=\"text\"></span> <span class=\"logo\"></span>' +\n    '</div>';\n\nfunction showApplePayButton() {\n    HTMLCollection.prototype[Symbol.iterator] = Array.prototype[Symbol.iterator];\n    const buttons = document.getElementsByClassName(\"apple-pay-button-black-with-text\");\n    for (let button of buttons) {\n        button.className += \"block\";\n    }\n}\n\nfunction applePayButtonClicked() {\n    var paymentRequest = \"\";\n    if ((Aurus.getSkipShippingAddress != null && Aurus.getSkipShippingAddress != undefined && Aurus.getSkipShippingAddress != \"\") && (Aurus.getSkipBillingAddress != null && Aurus.getSkipBillingAddress != \"\" && Aurus.getSkipBillingAddress != undefined)) {\n        if (Aurus.getSkipShippingAddress == \"1\" && Aurus.getSkipBillingAddress == \"1\") {\n            paymentRequest = {\n                countryCode: Aurus.getPurchaseCountry,\n                requiredBillingContactFields: [\"postalAddress\", \"email\", \"name\", \"phone\"],\n                // requiredShippingContactFields: [\"postalAddress\",\"email\", \"name\", \"phone\"],\n                currencyCode: Aurus.getCurrencyCode,\n                total: {\n                    label: 'Estimated Order Total',\n                    amount: parseFloat(Aurus.getOrderAmount).toFixed(2),\n                },\n                lineItems: Aurus.getLineItems,\n                // shippingMethods :  Aurus.getShippingMethod,\n                supportedNetworks: ['amex', 'discover', 'masterCard', 'visa', 'privateLabel', 'maestro', 'jcb'],\n                merchantCapabilities: ['supports3DS'],\n\n            };\n        } else if (Aurus.getSkipShippingAddress == \"0\" && Aurus.getSkipBillingAddress == \"1\") {\n            paymentRequest = {\n                countryCode: Aurus.getPurchaseCountry,\n                requiredBillingContactFields: [\"postalAddress\", \"email\", \"name\", \"phone\"],\n                // requiredShippingContactFields: [\"postalAddress\", \"email\", \"name\", \"phone\"],\n                currencyCode: Aurus.getCurrencyCode,\n                // shippingType: \"storePickup\",\n                shippingContact: {\n                    phoneNumber: Aurus.getShippingAddress.phoneNumber,\n                    emailAddress: Aurus.getShippingAddress.emailAddress,\n                    givenName: Aurus.getShippingAddress.firstName,\n                    familyName: Aurus.getShippingAddress.lastName,\n                    addressLines: [Aurus.getShippingAddress.street, Aurus.getShippingAddress.street2],\n                    locality: Aurus.getShippingAddress.city,\n                    administrativeArea: Aurus.getShippingAddress.state,\n                    postalCode: Aurus.getShippingAddress.postalCode,\n                    countryCode: Aurus.getShippingAddress.countryCode,\n                },\n                // shippingContactEditingMode: \"storePickup\",\n                total: {\n                    label: 'Estimated Order Total',\n                    amount: parseFloat(Aurus.getOrderAmount).toFixed(2),\n                },\n                lineItems: Aurus.getLineItems,\n                shippingMethods: Aurus.getShippingMethod,\n                supportedNetworks: ['amex', 'discover', 'masterCard', 'visa', 'privateLabel', 'maestro', 'jcb'],\n                merchantCapabilities: ['supports3DS'],\n            };\n        } else if (Aurus.getSkipShippingAddress == \"1\" && Aurus.getSkipBillingAddress == \"0\") {\n            paymentRequest = {\n                countryCode: Aurus.getPurchaseCountry,\n                requiredBillingContactFields: [\"postalAddress\", \"email\", \"name\", \"phone\"],\n                // requiredShippingContactFields: [\"postalAddress\", \"email\", \"name\", \"phone\"],\n                currencyCode: Aurus.getCurrencyCode,\n                // shippingType: \"storePickup\",\n                billingContact: {\n                    phoneNumber: Aurus.getBillingAddress.phoneNumber,\n                    emailAddress: Aurus.getBillingAddress.emailAddress,\n                    givenName: Aurus.getBillingAddress.firstName,\n                    familyName: Aurus.getBillingAddress.lastName,\n                    addressLines: [Aurus.getBillingAddress.street, Aurus.getBillingAddress.street2],\n                    locality: Aurus.getBillingAddress.city,\n                    administrativeArea: Aurus.getBillingAddress.state,\n                    postalCode: Aurus.getBillingAddress.postalCode,\n                    countryCode: Aurus.getBillingAddress.countryCode,\n                },\n                // shippingContactEditingMode: \"storePickup\",\n                total: {\n                    label: 'Estimated Order Total',\n                    amount: parseFloat(Aurus.getOrderAmount).toFixed(2),\n                },\n                lineItems: Aurus.getLineItems,\n                // shippingMethods :  Aurus.getShippingMethod,\n                supportedNetworks: ['amex', 'discover', 'masterCard', 'visa', 'privateLabel', 'maestro', 'jcb'],\n                merchantCapabilities: ['supports3DS'],\n            };\n        } else if (Aurus.getSkipShippingAddress == \"0\" && Aurus.getSkipBillingAddress == \"0\") {\n            paymentRequest = {\n                countryCode: Aurus.getPurchaseCountry,\n                requiredBillingContactFields: [\"postalAddress\", \"email\", \"name\", \"phone\"],\n                // requiredShippingContactFields: [\"postalAddress\", \"email\", \"name\", \"phone\"],\n                currencyCode: Aurus.getCurrencyCode,\n                // shippingType: \"storePickup\",\n                shippingContact: {\n                    phoneNumber: Aurus.getShippingAddress.phoneNumber,\n                    emailAddress: Aurus.getShippingAddress.emailAddress,\n                    givenName: Aurus.getShippingAddress.firstName,\n                    familyName: Aurus.getShippingAddress.lastName,\n                    addressLines: [Aurus.getShippingAddress.street, Aurus.getShippingAddress.street2],\n                    locality: Aurus.getShippingAddress.city,\n                    administrativeArea: Aurus.getShippingAddress.state,\n                    postalCode: Aurus.getShippingAddress.postalCode,\n                    countryCode: Aurus.getShippingAddress.countryCode,\n                },\n                billingContact: {\n                    phoneNumber: Aurus.getBillingAddress.phoneNumber,\n                    emailAddress: Aurus.getBillingAddress.emailAddress,\n                    givenName: Aurus.getBillingAddress.firstName,\n                    familyName: Aurus.getBillingAddress.lastName,\n                    addressLines: [Aurus.getBillingAddress.street, Aurus.getBillingAddress.street2],\n                    locality: Aurus.getBillingAddress.city,\n                    administrativeArea: Aurus.getBillingAddress.state,\n                    postalCode: Aurus.getBillingAddress.postalCode,\n                    countryCode: Aurus.getBillingAddress.countryCode,\n                },\n                // shippingContactEditingMode: \"storePickup\",\n                total: {\n                    label: 'Estimated Order Total',\n                    amount: parseFloat(Aurus.getOrderAmount).toFixed(2),\n                },\n                lineItems: Aurus.getLineItems,\n                shippingMethods: Aurus.getShippingMethod,\n                supportedNetworks: ['amex', 'discover', 'masterCard', 'visa', 'privateLabel', 'maestro', 'jcb'],\n                merchantCapabilities: ['supports3DS'],\n            };\n        }\n    } else if ((Aurus.getSkipShippingAddress == null || Aurus.getSkipShippingAddress == undefined || Aurus.getSkipShippingAddress == \"\") && (Aurus.getSkipBillingAddress == null || Aurus.getSkipBillingAddress == \"\" || Aurus.getSkipBillingAddress == undefined)) {\n        paymentRequest = {\n            countryCode: Aurus.getPurchaseCountry,\n            requiredBillingContactFields: [\"postalAddress\", \"email\", \"name\", \"phone\"],\n            // requiredShippingContactFields: [\"postalAddress\",\"email\", \"name\", \"phone\"],\n            currencyCode: Aurus.getCurrencyCode,\n            total: {\n                label: 'Estimated Order Total',\n                amount: parseFloat(Aurus.getOrderAmount).toFixed(2),\n            },\n            lineItems: Aurus.getLineItems,\n            supportedNetworks: ['amex', 'discover', 'masterCard', 'visa', 'privateLabel', 'maestro', 'jcb'],\n            merchantCapabilities: ['supports3DS'],\n\n        };\n    } else if ((Aurus.getSkipShippingAddress == null || Aurus.getSkipShippingAddress == undefined || Aurus.getSkipShippingAddress == \"\") || (Aurus.getSkipBillingAddress == null || Aurus.getSkipBillingAddress == \"\" || Aurus.getSkipBillingAddress == undefined)) {\n        paymentRequest = {\n            countryCode: Aurus.getPurchaseCountry,\n            requiredBillingContactFields: [\"postalAddress\", \"email\", \"name\", \"phone\"],\n            // requiredShippingContactFields: [\"postalAddress\",\"email\", \"name\", \"phone\"],\n            currencyCode: Aurus.getCurrencyCode,\n            total: {\n                label: 'Estimated Order Total',\n                amount: parseFloat(Aurus.getOrderAmount).toFixed(2),\n            },\n            lineItems: Aurus.getLineItems,\n            supportedNetworks: ['amex', 'discover', 'masterCard', 'visa', 'privateLabel', 'maestro', 'jcb'],\n            merchantCapabilities: ['supports3DS'],\n\n        };\n        window.parent.postMessage(\"AurusScriptError=Invalid_Shipping or Billing Flag\", '*');\n    }\n    if (Aurus.getSkipRequiredShippingContact == \"1\") {\n        paymentRequest.requiredShippingContactFields = [\"email\", \"phone\"];\n    } else {\n        paymentRequest.requiredShippingContactFields = [\"postalAddress\", \"email\", \"name\", \"phone\"];\n    }\n    var session = new ApplePaySession(6, paymentRequest); // version 6\n\n    session.oncancel = (event) => {\n        try {\n            window.parent.postMessage(\"AurusApplePayCancelEvent=ApplePayCancelEvent\", '*');\n        } catch (e) {\n            //if (e instanceof ReferenceError) {}\n        }\n    };\n\n    session.onvalidatemerchant = (event) => {\n        var validationURL = event.validationURL;\n        getApplePaySession(validationURL).then(function (response) {\n            session.completeMerchantValidation(response);\n        });\n    };\n\n    session.onshippingmethodselected = (event) => {\n        var shippingMethodData = '';\n        var selectedShippingMethod = event.shippingMethod;\n        Aurus._selectedShippingMethod = selectedShippingMethod;\n        selectedShippingMethod = JSON.parse(JSON.stringify(selectedShippingMethod));\n        selectedShippingMethod.eventType = \"shippingMethod\";\n        try {\n            window.parent.postMessage(\"AurusApplePayEvent=\" + JSON.stringify(selectedShippingMethod), '*');\n        } catch (e) {\n            //if (e instanceof ReferenceError) {}\n        }\n        window.addEventListener(\"message\", function (e) {\n            var data = e.data;\n            if (data.startsWith('ApplePayUpdatedShippingMethod')) {\n                var splt = data.split('=');\n                shippingMethodData = JSON.parse(splt[1]);\n                const promis = new Promise(function (resolve, reject) {\n                    if (typeof shippingMethodData === 'object' && shippingMethodData != null && Object.keys(shippingMethodData).length !== 0) {\n                        if (shippingMethodData.shippingMethods != undefined && shippingMethodData.shippingMethods != \"\" && shippingMethodData.shippingMethods != null) {\n                            Aurus._shippingMethod = shippingMethodData.shippingMethods;\n                        }\n                        Aurus._orderAmount = parseFloat(shippingMethodData.order.order_amount.amount).toFixed(2);\n                        Aurus._subTotal = parseFloat(shippingMethodData.order.item_total.amount).toFixed(2);\n                        //   Aurus._discount = parseFloat(shippingMethodData.order.discounts.amount).toFixed(2);\n                        Aurus._estimatedTax = parseFloat(shippingMethodData.order.tax_amount.amount).toFixed(2);\n                        Aurus._shippingCost = parseFloat(shippingMethodData.order.shipping_amount.amount).toFixed(2);\n                        Aurus._giftWrap = parseFloat(shippingMethodData.order.gift_wrap.amount).toFixed(2);\n                        //    Aurus._coupon = parseFloat(shippingMethodData.order.coupon.amount).toFixed(2);\n                        Aurus._lineItems = Aurus.importLineItems(shippingMethodData);\n                        resolve(shippingMethodData);\n                    } else {\n                        reject(shippingMethodData);\n                    }\n                    // };\n                })\n                promis.then(function (resolveData) {\n                    var shippingMethodUpdate = {\n                        \"newTotal\": {\n                            \"label\": \"Estimated Order Total\",\n                            \"amount\": Aurus.getOrderAmount,\n                            \"type\": \"final\"\n                        },\n                        \"newLineItems\": Aurus.getLineItems,\n                    };\n                    session.completeShippingMethodSelection(shippingMethodUpdate);\n                }).catch(function (rejectData) {\n                    console.log(rejectData)\n                })\n            }\n        });\n    };\n\n    session.onshippingcontactselected = (event) => {\n            var custdata;\n            var selectedShippingContact = JSON.stringify(event.shippingContact);\n            selectedShippingContact = JSON.parse(selectedShippingContact);\n            selectedShippingContact.eventType = \"shippingContact\";\n            try {\n                window.parent.postMessage(\"AurusApplePayEvent=\" + JSON.stringify(selectedShippingContact), '*');\n            } catch (e) {\n                //if (e instanceof ReferenceError) {}\n            }\n            window.addEventListener(\"message\", function (e) {\n                var data = e.data;\n                if (data.startsWith('ApplePayUpdatedShippingContact')) {\n                    var splt = data.split('=');\n                    custdata = JSON.parse(splt[1]);\n                    const promis = new Promise(function (resolve, reject) {\n                        if (typeof custdata === 'object' && custdata != null && Object.keys(custdata).length !== 0) {\n                            if (custdata.shippingMethods != undefined && custdata.shippingMethods != \"\" && custdata.shippingMethods != null) {\n                                Aurus._shippingMethod = custdata.shippingMethods;\n                            } else {\n                                Aurus._shippingMethod = [];\n                            }\n                            Aurus._orderAmount = parseFloat(custdata.order.order_amount.amount).toFixed(2);\n                            Aurus._subTotal = parseFloat(custdata.order.item_total.amount).toFixed(2);\n                            //    Aurus._discount = parseFloat(custdata.order.discounts.amount).toFixed(2);\n                            Aurus._estimatedTax = parseFloat(custdata.order.tax_amount.amount).toFixed(2);\n                            Aurus._shippingCost = parseFloat(custdata.order.shipping_amount.amount).toFixed(2);\n                            Aurus._giftWrap = parseFloat(custdata.order.gift_wrap.amount).toFixed(2);\n                            //  Aurus._coupon = parseFloat(custdata.order.coupon.amount).toFixed(2);\n                            Aurus._lineItems = Aurus.importLineItems(custdata);\n                            resolve(custdata);\n                        } else {\n                            reject(custdata);\n                        }\n                    })\n                    promis.then(function (resolveData) {\n                        if (custdata.shippingMethods != undefined && custdata.shippingMethods != \"\" && custdata.shippingMethods != null) {\n                            for (i = 0; i < custdata.shippingMethods.length; i++) {\n                                if (JSON.stringify(custdata.shippingMethods[i].selected) == \"true\") {\n                                    Aurus._selectedShippingMethod = custdata.shippingMethods[i];\n                                }\n                            }\n                        }\n                        if (custdata.shippingAllowed == 1) {\n                            var paymentRequestUpdate = {\n                                \"newTotal\": {\n                                    \"label\": \"Estimated Order Total\",\n                                    \"amount\": Aurus.getOrderAmount,\n                                    \"type\": \"final\"\n                                },\n                                \"newLineItems\": Aurus.getLineItems,\n                                \"newShippingMethods\": Aurus.getShippingMethod,\n                            };\n                            session.completeShippingContactSelection(paymentRequestUpdate);\n                        } else {\n                            var shippingErrorObj = [];\n                            var errorCode = \"shippingContactInvalid\";\n                            for (i = 0; i < custdata.ShippingContactError.length; i++) {\n                                var errorField = custdata.ShippingContactError[i].errorField;\n                                var errorMessage = custdata.ShippingContactError[i].errorMessage;\n                                var objdata = new ApplePayError(errorCode, errorField, errorMessage);\n                                shippingErrorObj.push(objdata);\n                            }\n                            var paymentRequestUpdate = {\n                                \"newTotal\": {\n                                    \"label\": \"Estimated Order Total\",\n                                    \"amount\": Aurus.getOrderAmount,\n                                    \"type\": \"pending\"\n                                },\n                                \"newLineItems\": [],\n                                \"errors\": shippingErrorObj\n                            };\n                            session.completeShippingContactSelection(paymentRequestUpdate);\n                        }\n                    }).catch(function (rejectData) {\n                        console.log(rejectData)\n                    })\n                }\n            });\n        },\n\n        session.onpaymentauthorized = (event) => {\n            var jsondata = {\n                \"billingContact\": event.payment.billingContact,\n                \"shippingContact\": event.payment.shippingContact\n            };\n            var contactData = JSON.stringify(jsondata);\n            contactData = JSON.parse(contactData);\n            contactData.eventType = \"contactDetails\";\n            contactData = JSON.stringify(contactData);\n            var cdata = onApplePayUpdatedContact(contactData);\n            const promis = new Promise(function (resolve, reject) {\n                if (typeof cdata === 'object' && cdata != null && Object.keys(cdata).length !== 0) {\n                    resolve(cdata);\n                } else {\n                    reject(cdata);\n                }\n            })\n            promis.then(function (resolveData) {\n                if (cdata.ContactAllowed == \"0\" && cdata.shippingAllowed == \"0\" && cdata.billingAllowed == \"0\") {\n                    var ErrorObj = [];\n                    var shippingErrorCode = \"shippingContactInvalid\";\n                    var billingErrorCode = \"billingContactInvalid\";\n                    for (i = 0; i < cdata.ContactError.length; i++) {\n                        var errorField = cdata.ContactError[i].errorField;\n                        var errorMessage = cdata.ContactError[i].errorMessage;\n                        var objdata = new ApplePayError(shippingErrorCode, errorField, errorMessage);\n                        ErrorObj.push(objdata);\n                    }\n                    for (i = 0; i < cdata.ShippingContactError.length; i++) {\n                        var errorField = cdata.ShippingContactError[i].errorField;\n                        var errorMessage = cdata.ShippingContactError[i].errorMessage;\n                        var objdata = new ApplePayError(shippingErrorCode, errorField, errorMessage);\n                        ErrorObj.push(objdata);\n                    }\n                    for (i = 0; i < cdata.BillingContactError.length; i++) {\n                        var errorField = cdata.BillingContactError[i].errorField;\n                        var errorMessage = cdata.BillingContactError[i].errorMessage;\n                        var objdata = new ApplePayError(billingErrorCode, errorField, errorMessage);\n                        ErrorObj.push(objdata);\n                    }\n                    var applepayreq = {\n                        status: ApplePaySession.STATUS_FAILURE,\n                        errors: ErrorObj\n                    };\n                    session.completePayment(applepayreq);\n                } else if (cdata.ContactAllowed == \"0\" && cdata.shippingAllowed == \"0\" && cdata.billingAllowed == \"1\") {\n                    var ErrorObj = [];\n                    var shippingErrorCode = \"shippingContactInvalid\";\n                    var billingErrorCode = \"billingContactInvalid\";\n                    for (i = 0; i < cdata.ContactError.length; i++) {\n                        var errorField = cdata.ContactError[i].errorField;\n                        var errorMessage = cdata.ContactError[i].errorMessage;\n                        var objdata = new ApplePayError(shippingErrorCode, errorField, errorMessage);\n                        ErrorObj.push(objdata);\n                    }\n                    for (i = 0; i < cdata.ShippingContactError.length; i++) {\n                        var errorField = cdata.ShippingContactError[i].errorField;\n                        var errorMessage = cdata.ShippingContactError[i].errorMessage;\n                        var objdata = new ApplePayError(shippingErrorCode, errorField, errorMessage);\n                        ErrorObj.push(objdata);\n                    }\n                    var applepayreq = {\n                        status: ApplePaySession.STATUS_FAILURE,\n                        errors: ErrorObj\n                    };\n                    session.completePayment(applepayreq);\n                } else if (cdata.ContactAllowed == \"0\" && cdata.shippingAllowed == \"1\" && cdata.billingAllowed == \"0\") {\n                    var ErrorObj = [];\n                    var shippingErrorCode = \"shippingContactInvalid\";\n                    var billingErrorCode = \"billingContactInvalid\";\n                    for (i = 0; i < cdata.ContactError.length; i++) {\n                        var errorField = cdata.ContactError[i].errorField;\n                        var errorMessage = cdata.ContactError[i].errorMessage;\n                        var objdata = new ApplePayError(shippingErrorCode, errorField, errorMessage);\n                        ErrorObj.push(objdata);\n                    }\n                    for (i = 0; i < cdata.BillingContactError.length; i++) {\n                        var errorField = cdata.BillingContactError[i].errorField;\n                        var errorMessage = cdata.BillingContactError[i].errorMessage;\n                        var objdata = new ApplePayError(billingErrorCode, errorField, errorMessage);\n                        ErrorObj.push(objdata);\n                    }\n                    var applepayreq = {\n                        status: ApplePaySession.STATUS_FAILURE,\n                        errors: ErrorObj\n                    };\n                    session.completePayment(applepayreq);\n                } else if (cdata.ContactAllowed == \"1\" && cdata.shippingAllowed == \"0\" && cdata.billingAllowed == \"0\") {\n                    var ErrorObj = [];\n                    var shippingErrorCode = \"shippingContactInvalid\";\n                    var billingErrorCode = \"billingContactInvalid\";\n                    for (i = 0; i < cdata.ShippingContactError.length; i++) {\n                        var errorField = cdata.ShippingContactError[i].errorField;\n                        var errorMessage = cdata.ShippingContactError[i].errorMessage;\n                        var objdata = new ApplePayError(shippingErrorCode, errorField, errorMessage);\n                        ErrorObj.push(objdata);\n                    }\n                    for (i = 0; i < cdata.BillingContactError.length; i++) {\n                        var errorField = cdata.BillingContactError[i].errorField;\n                        var errorMessage = cdata.BillingContactError[i].errorMessage;\n                        var objdata = new ApplePayError(billingErrorCode, errorField, errorMessage);\n                        ErrorObj.push(objdata);\n                    }\n                    var applepayreq = {\n                        status: ApplePaySession.STATUS_FAILURE,\n                        errors: ErrorObj\n                    };\n                    session.completePayment(applepayreq);\n                } else if (cdata.ContactAllowed == \"1\" && cdata.shippingAllowed == \"1\" && cdata.billingAllowed == \"0\") {\n                    var ErrorObj = [];\n                    var shippingErrorCode = \"shippingContactInvalid\";\n                    var billingErrorCode = \"billingContactInvalid\";\n\n                    for (i = 0; i < cdata.BillingContactError.length; i++) {\n                        var errorField = cdata.BillingContactError[i].errorField;\n                        var errorMessage = cdata.BillingContactError[i].errorMessage;\n                        var objdata = new ApplePayError(billingErrorCode, errorField, errorMessage);\n                        ErrorObj.push(objdata);\n                    }\n                    var applepayreq = {\n                        status: ApplePaySession.STATUS_FAILURE,\n                        errors: ErrorObj\n                    };\n                    session.completePayment(applepayreq);\n                } else if (cdata.ContactAllowed == \"1\" && cdata.shippingAllowed == \"0\" && cdata.billingAllowed == \"1\") {\n                    var ErrorObj = [];\n                    var shippingErrorCode = \"shippingContactInvalid\";\n                    var billingErrorCode = \"billingContactInvalid\";\n\n                    for (i = 0; i < cdata.ShippingContactError.length; i++) {\n                        var errorField = cdata.ShippingContactError[i].errorField;\n                        var errorMessage = cdata.ShippingContactError[i].errorMessage;\n                        var objdata = new ApplePayError(shippingErrorCode, errorField, errorMessage);\n                        ErrorObj.push(objdata);\n                    }\n\n                    var applepayreq = {\n                        status: ApplePaySession.STATUS_FAILURE,\n                        errors: ErrorObj\n                    };\n                    session.completePayment(applepayreq);\n                } else if (cdata.ContactAllowed == \"0\" && cdata.shippingAllowed == \"1\" && cdata.billingAllowed == \"1\") {\n                    var ErrorObj = [];\n                    var shippingErrorCode = \"shippingContactInvalid\";\n                    for (i = 0; i < cdata.ContactError.length; i++) {\n                        var errorField = cdata.ContactError[i].errorField;\n                        var errorMessage = cdata.ContactError[i].errorMessage;\n                        var objdata = new ApplePayError(shippingErrorCode, errorField, errorMessage);\n                        ErrorObj.push(objdata);\n                    }\n                    var applepayreq = {\n                        status: ApplePaySession.STATUS_FAILURE,\n                        errors: ErrorObj\n                    };\n                    session.completePayment(applepayreq);\n                } else if (cdata.ContactAllowed == \"1\" && cdata.shippingAllowed == \"1\" && cdata.billingAllowed == \"1\") {\n                    const payment = event.payment;\n                    Aurus._applePayPaymetData = payment;\n                    session.completePayment(ApplePaySession.STATUS_SUCCESS);\n                } else if (cdata.ContactAllowed == \"0\") {\n                    var contactErrorObj = [];\n                    var errorCode = \"shippingContactInvalid\";\n                    for (i = 0; i < cdata.ContactError.length; i++) {\n                        var errorField = cdata.ContactError[i].errorField;\n                        var errorMessage = cdata.ContactError[i].errorMessage;\n                        var objdata = new ApplePayError(errorCode, errorField, errorMessage);\n                        contactErrorObj.push(objdata);\n                    }\n                    var applepayreq = {\n                        status: ApplePaySession.STATUS_FAILURE,\n                        errors: contactErrorObj\n                    };\n                    session.completePayment(applepayreq);\n                } else if (cdata.billingAllowed == \"0\") {\n                    var ErrorObj = [];\n                    var errorCode = \"billingContactInvalid\";\n                    for (i = 0; i < cdata.BillingContactError.length; i++) {\n                        var errorField = cdata.BillingContactError[i].errorField;\n                        var errorMessage = cdata.BillingContactError[i].errorMessage;\n                        var objdata = new ApplePayError(errorCode, errorField, errorMessage);\n                        ErrorObj.push(objdata);\n                    }\n                    var applepayreq = {\n                        status: ApplePaySession.STATUS_FAILURE,\n                        errors: ErrorObj\n                    };\n                    session.completePayment(applepayreq);\n                } else if (cdata.shippingAllowed == \"0\") {\n                    var shippingErrorObj = [];\n                    var errorCode = \"shippingContactInvalid\";\n                    for (i = 0; i < cdata.ShippingContactError.length; i++) {\n                        var errorField = cdata.ShippingContactError[i].errorField;\n                        var errorMessage = cdata.ShippingContactError[i].errorMessage;\n                        var objdata = new ApplePayError(errorCode, errorField, errorMessage);\n                        shippingErrorObj.push(objdata);\n                    }\n                    var applepayreq = {\n                        status: ApplePaySession.STATUS_FAILURE,\n                        errors: shippingErrorObj\n                    };\n                    session.completePayment(applepayreq);\n                }\n                // else if(cdata.ContactAllowed == \"1\" &&  cdata.shippingAllowed == \"1\" ){\n                //         const payment = event.payment;\n                //         Aurus._applePayPaymetData = payment;\n                //         session.completePayment(ApplePaySession.STATUS_SUCCESS);\n                // }\t\n                // else if(cdata.ContactAllowed == \"1\" || cdata.shippingAllowed == \"1\" ){\n                //         const payment = event.payment;\n                //         Aurus._applePayPaymetData = payment;\n                //         session.completePayment(ApplePaySession.STATUS_SUCCESS);\n                //     }\n            }).catch(function (rejectData) {\n                console.log(rejectData)\n            })\n        };\n\n    session.begin();\n\n}\n\nfunction getApplePaySession(url) {\n    return new Promise(function (resolve, reject) {\n        var xhr = new XMLHttpRequest();\n        var createSessionUrl = Aurus._priEcstBaseURL;\n        xhr.open('POST', createSessionUrl + 'createsessionApplePay');\n        xhr.onload = function () {\n            if (this.status >= 200 && this.status < 300) {\n                resolve(JSON.parse(xhr.response));\n            } else {\n                reject({\n                    status: this.status,\n                    statusText: xhr.statusText\n                });\n            }\n        };\n        xhr.onerror = function () {\n            reject({\n                status: this.status,\n                statusText: xhr.statusText\n            });\n        };\n        xhr.setRequestHeader(\"Content-Type\", \"application/x-www-form-urlencoded\");\n        xhr.send(\"validationUrl=\" + url);\n    });\n}\n\nfunction authorize(token) {\n    return new Promise(function (resolve, reject) {\n        var xhr = new XMLHttpRequest();\n        var createAuthorizeUrl = jQuery(\"#priEcstBase_urlId\").val();\n        xhr.open('POST', createAuthorizeUrl + 'authorize');\n        xhr.onload = function () {\n            if (this.status >= 200 && this.status < 300) {\n                resolve(xhr.response);\n            } else {\n                reject({\n                    status: this.status,\n                    statusText: xhr.statusText\n                });\n            }\n        };\n        xhr.onerror = function () {\n            reject({\n                status: this.status,\n                statusText: xhr.statusText\n            });\n        };\n        xhr.setRequestHeader(\"Content-Type\", \"application/json\");\n        xhr.send(JSON.stringify(token));\n    });\n}\n\n\n\n\nvar paypalCheckoutJs;\nvar jQuery;\nvar Aurus = {\n    googlePayLoaded: false,\n    klarnaClientToken: \"\",\n    klarnaAuthToken: \"\",\n    urlIndicator: \"\",\n    klarnaPayMethodType: \"\",\n    apiversion: \"\",\n    priEcstBaseURL: \"\",\n    secEcstBaseURL: \"\",\n    ecstCdnURL: \"\",\n    aurusSessionId: \"\",\n    applePayPaymetData: \"\",\n    orderAmount: \"0.00\",\n    shippingCost: \"0.00\",\n    subTotal: \"0.00\",\n    discount: \"0.00\",\n    estimatedTax: \"0.00\",\n    shippingMethod: [],\n    selectedShippingMethod: \"\",\n    newOrdertotal: \"0.00\",\n    newShippingCost: \"0.00\",\n    giftWrap: \"0.00\",\n    coupon: \"0.00\",\n    ottResponseData: \"\",\n    hostDomainURL: \"\",\n    billerToken: \"\",\n    PaypalOrderID: \"\",\n    AltPaypal: \"0\",\n    AltVenmo: \"0\",\n    AltKlarna: \"0\",\n    AltApplePay: \"0\",\n    env: \"\",\n    cid: \"\",\n    currencyCode: \"\",\n    purchaseCountry: \"\",\n    billerFailed: false,\n    sessionFailed: false,\n    applePayAbort: false,\n    walletID: \"\",\n    checkOutData: \"\",\n    shippingAddress: \"\",\n    billingAddress: \"\",\n    skipBillingAddressskipShippingAddress: \"\",\n    skipBillingAddress: \"\",\n    lineItems: \"\",\n    additionalChargeIndicator: [],\n    skipRequiredShippingContact: \"\",\n    get getAdditionalChargeIndicator() {\n        return this.additionalChargeIndicator;\n    },\n    set _additionalChargeIndicator(additionalChargeIndicator) {\n        this.additionalChargeIndicator = additionalChargeIndicator;\n    },\n    get getLineItems() {\n        return this.lineItems;\n    },\n    set _lineItems(lineItems) {\n        this.lineItems = lineItems;\n    },\n    get getSkipShippingAddress() {\n        return this.skipShippingAddress;\n    },\n    set _SkipShippingAddress(skipShippingAddress) {\n        this.skipShippingAddress = skipShippingAddress;\n    },\n    get getSkipBillingAddress() {\n        return this.skipBillingAddress;\n    },\n    set _SkipBillingAddress(skipBillingAddress) {\n        this.skipBillingAddress = skipBillingAddress;\n    },\n    get getShippingAddress() {\n        return this.shippingAddress;\n    },\n    set _ShippingAddress(shippingAddress) {\n        this.shippingAddress = shippingAddress;\n    },\n    get getBillingAddress() {\n        return this.billingAddress;\n    },\n    set _BillingAddress(billingAddress) {\n        this.billingAddress = billingAddress;\n    },\n    get getalternatePaymentMatrix() {\n        return JSON.parse(this.alternatePaymentMatrix);\n    },\n    set _AltPaypal(val) {\n        this.AltPaypal = val;\n    },\n    get getAltPaypal() {\n        return this.AltPaypal;\n    },\n    set _AltVenmo(val) {\n        this.AltVenmo = val;\n    },\n    get getAltVenmo() {\n        return this.AltVenmo;\n    },\n    set _AltKlarna(val) {\n        this.AltKlarna = val;\n    },\n    get getAltKlarna() {\n        return this.AltKlarna;\n    },\n    set _AltApplePay(val) {\n        this.AltApplePay = val;\n    },\n    get getAltApplePay() {\n        return this.AltApplePay;\n    },\n    get _apiversion() {\n        return this.apiversion;\n    },\n\n    set _orderAmount(amt) {\n        this.orderAmount = amt;\n    },\n    get getOrderAmount() {\n        return this.orderAmount;\n    },\n\n    set _shippingCost(cost) {\n        this.shippingCost = cost;\n    },\n    get getShippingCost() {\n        return this.shippingCost;\n    },\n    set _newOrdertotal(val) {\n        this.newOrdertotal = val;\n    },\n    get getNewOrdertotal() {\n        return this.newOrdertotal;\n    },\n    set _newShippingCost(cost) {\n        this.newShippingCost = cost;\n    },\n    get getNewShippingCost() {\n        return this.newShippingCost;\n    },\n\n    set _selectedShippingMethod(val) {\n        this.selectedShippingMethod = val;\n    },\n    get getSelectedShippingMethod() {\n        return this.selectedShippingMethod;\n    },\n    set _subTotal(total) {\n        this.subTotal = total;\n    },\n    get getSubTotal() {\n        return this.subTotal;\n    },\n\n    set _discount(disc) {\n        this.discount = disc;\n    },\n    get getDiscount() {\n        return this.discount;\n    },\n\n    set _estimatedTax(eTax) {\n        this.estimatedTax = eTax;\n    },\n    get getEstimatedTax() {\n        return this.estimatedTax;\n    },\n\n    set _shippingMethod(smethod) {\n        this.shippingMethod = smethod;\n    },\n    get getShippingMethod() {\n        return this.shippingMethod;\n    },\n\n    set _currencyCode(val) {\n        this.currencyCode = val;\n    },\n    get getCurrencyCode() {\n        return this.currencyCode;\n    },\n    set _purchaseCountry(val) {\n        this.purchaseCountry = val;\n    },\n    get getPurchaseCountry() {\n        return this.purchaseCountry;\n    },\n\n    set _giftWrap(val) {\n        this.giftWrap = val;\n    },\n    get getGiftWrap() {\n        return this.giftWrap;\n    },\n    set _coupon(val) {\n        this.coupon = val;\n    },\n    get getCoupon() {\n        return this.coupon;\n    },\n\n    set _ottResponseData(ottResp) {\n        this.ottResponseData = ottResp;\n    },\n    get getOttResponseData() {\n        return this.ottResponseData;\n    },\n    set setKlarnaPayMethodType(setKlarnaPayMethodType) {\n        this.klarnaPayMethodType = setKlarnaPayMethodType;\n    },\n    get getKlarnaPayMethodType() {\n        return this.klarnaPayMethodType;\n    },\n    set _paypalData(pdata) {\n        this.paypalCheckoutData = pdata;\n    },\n    set kct(kct) {\n        this.klarnaClientToken = kct;\n    },\n    set kat(kat) {\n        this.klarnaAuthToken = kat;\n    },\n\n    get getKlarnaClientToken() {\n        return this.klarnaClientToken;\n    },\n    get getKlarnaAuthToken() {\n        return this.klarnaAuthToken;\n    },\n\n    set _setEnv(data) {\n        this.env = data;\n    },\n    get getEnv() {\n        return this.env;\n    },\n    set _setCid(data) {\n        this.cid = data;\n    },\n    get getCid() {\n        return this.cid;\n    },\n    set _setBillerFailed(data) {\n        this.billerFailed = data;\n    },\n    get getBillerFailed() {\n        return this.billerFailed;\n    },\n    set _setWalletID(data) {\n        this.walletID = data;\n    },\n    get getWalletID() {\n        return this.walletID;\n    },\n    set _setSessionFailed(data) {\n        this.sessionFailed = data;\n    },\n    get getSessionFailed() {\n        return this.sessionFailed;\n    },\n    set _setApplePayAbort(data) {\n        this.applePayAbort = data;\n    },\n    get getApplePayAbort() {\n        return this.applePayAbort;\n    },\n    set _checkOutData(bToken) {\n        this.checkOutData = bToken;\n    },\n    get getCheckOutData() {\n        return this.checkOutData;\n    },\n    getcdate() {\n        var now = new Date();\n        return ('0' + (now.getMonth() + 1)).slice(-2) + '' + ('0' + now.getDate()).slice(-2) + '' + now.getFullYear();\n    },\n\n    getctime() {\n        var now = new Date();\n        return ('0' + now.getHours()).slice(-2) + '' + ('0' + (now.getMinutes())).slice(-2) + '' + ('0' + now.getSeconds()).slice(-2);\n    },\n\n    set _urlIndicator(_urlIndicator) {\n        this.urlIndicator = _urlIndicator;\n    },\n\n    get getUrlIndicator() {\n        return this.urlIndicator;\n    },\n\n    set _aurusSessionId(session) {\n        this.aurusSessionId = session;\n    },\n    get getAurusSession() {\n        return this.aurusSessionId;\n    },\n    get _priEcstBaseURL() {\n        return this.priEcstBaseURL;\n    },\n    get _secEcstBaseURL() {\n        return this.secEcstBaseURL;\n    },\n    get _ecstCdnURL() {\n        return this.ecstCdnURL;\n    },\n\n    get _hostDomainURL() {\n        return this.hostDomainURL;\n    },\n    get getSkipRequiredShippingContact() {\n        return this.skipRequiredShippingContact;\n    },\n    set _skipRequiredShippingContact(skipRequiredShippingContact) {\n        this.skipRequiredShippingContact = skipRequiredShippingContact;\n    },\n\n    aurusInit: function (custData, jquery) {\n        window.console.log('custData:::::', custData);\n        jQuery = jquery;\n        Aurus._orderAmount = custData.order.order_amount.amount;\n        Aurus._purchaseCountry = custData.order.purchaseCountry;\n        Aurus._currencyCode = custData.order.purchaseCurrency;\n        Aurus._aurusSessionId = custData.sessionId;\n        Aurus._ShippingAddress = custData.customer.shipping_address;\n        Aurus._BillingAddress = custData.customer.billing_address;\n        Aurus._SkipShippingAddress = custData.customer.skipShippingAddress;\n        Aurus._urlIndicator = custData.apmMatrix;\n        Aurus._skipRequiredShippingContact = custData.customer.skipRequiredShippingContact;\n        Aurus._setEnv = custData.env.toLowerCase();\n        Aurus._setCid = custData.aurusClientId;\n        if (this.getEnv == \"live\" || this.getEnv == \"sandbox\") {\n            if (this.getEnv == \"live\") {\n                Aurus.priEcstBaseURL = \"https://pecst03.aurusepay.com/storeservices/ecom/\";\n                Aurus.secEcstBaseURL = \"https://ecst03.auruspay.com/storeservices/ecom/\";\n                Aurus.ecstCdnURL = \"https://pecst03.aurusepay.com/storeservices/\";\n                Aurus.hostDomainURL = \"?d1=es43.auruspay.com&d2=es03.auruspay.com\";\n            } else if (this.getEnv == \"sandbox\") {\n                Aurus.priEcstBaseURL = \"https://uatps48.aurusepay.com/storeservices/ecom/\";\n                Aurus.secEcstBaseURL = \"https://uatps48.aurusepay.com/storeservices/ecom/\";\n                Aurus.ecstCdnURL = \"https://uatps48.aurusepay.com/storeservices/\";\n                Aurus.hostDomainURL = \"?d1=uat42.auruspay.com&d2=uat42.auruspay.com\";\n            } else {\n                window.parent.postMessage(\"AurusScriptError=Invalid_Environment\", '*');\n            }\n\n            if (((this.getUrlIndicator).charAt(6) == '1') && (jQuery(\"#applepayDiv\").length)) {\n                jQuery(\".apple-pay-button-with-text\").attr(\"style\", \"display:block\");\n                this.enableApplePay(custData);\n            } else {}\n\n            if (((this.getUrlIndicator).charAt(14) == '1') && (jQuery(\"#venmoDiv\").length)) {\n                if (!jQuery('#venmoDiv').children().length > 0) {\n                    jQuery(\"#venmoDiv\").empty();\n                    this.initVenmo();\n                }\n            } else {}\n\n            if (((this.getUrlIndicator).charAt(3) == '1') && (jQuery(\"#paypalDiv\").length)) {\n\n                if (!jQuery('#paypalDiv').children().length > 0) {\n                    jQuery(\"#paypalDiv\").empty();\n                    this.importPaypalURL(custData);\n\n                } else {\n                    //paypalCheckoutJs = true;\n                    this.importPaypalURL(custData);\n                }\n                this.initPayPal(custData);\n            } else {}\n\n            if (((this.getUrlIndicator).charAt(13) == '1') && (jQuery(\"#klarnaDiv\").length)) {\n                jQuery(\"#klarnaDiv\").empty();\n                this.enableKlarna(custData);\n            } else {}\n\n\n            if (((this.getUrlIndicator).charAt(10) == '1') && (jQuery(\"#googlepayDiv\").length)) {\n                this.initGooglePay(custData);\n            } else {\n                console.log(\"GooglePay not Suppoerted\");\n            }\n\n        } else {\n            window.parent.postMessage(\"AurusScriptError=Invalid_Environment\", '*');\n        }\n\n    },\n\n    /* Google Pay Starts here*/\n\n    googleGatewayId: \"\",\n    googleMerchantId: \"\",\n    googlePayPaymentData: \"\",\n\n    set _googleGatewayId(gatewayId) {\n        this.googleGatewayId = gatewayId;\n    },\n    get getGoogleGatewayId() {\n        return this.googleGatewayId;\n    },\n\n    set _googleMerchantId(merchantId) {\n        this.googleMerchantId = merchantId;\n    },\n    get getGoogleMerchantId() {\n        return this.googleMerchantId;\n    },\n    set _gPayPaymetData(gpaydata) {\n        this.googlePayPaymentData = gpaydata;\n        Aurus._setWalletID = \"11\";\n        Aurus.initWalletToken();\n    },\n\n    get gPayPaymetData() {\n        return this.googlePayPaymentData;\n    },\n\n    initGooglePay: function (custData) {\n\n        if (!jQuery('#googlepayDiv').children().length > 0) {\n            var wAreaId = document.getElementById('googlepayDiv');\n            wAreaId.innerHTML = ''\n            var gPayDiv = document.createElement(\"div\");\n            gPayDiv.setAttribute(\"id\", \"aurus-google-pay-containerId\");\n            //gPayDiv.setAttribute(\"class\", \"aurus-sezzel-checkout\");\n            wAreaId.appendChild(gPayDiv);\n        }\n        //  if (jQuery(\"#googlePayDiv_Bottom\").length) {\n        //      if (!jQuery('#googlePayDiv_Bottom').children().length > 0) {\n        //          var wAreaId = document.getElementById('googlePayDiv_Bottom');\n        //          wAreaId.innerHTML = ''\n        //          var gPayDiv = document.createElement(\"div\");\n        //          gPayDiv.setAttribute(\"id\", \"aurus-google-pay-containerId-bottom\");\n        //          gPayDiv.setAttribute(\"class\", \"aurus-sezzel-checkout\");\n        //          wAreaId.appendChild(gPayDiv);\n        //      }\n        //  }\n        //Aurus._googleGatewayId=\"auruspay\";\n        //Aurus._googleMerchantId=\"22731101231178566\";\n        if (!Aurus.googlePayLoaded) {\n            Aurus.importGooglePayurl();\n            Aurus.googlePayLoaded = true; // Set the flag to true after loading\n        }\n    },\n\n    importGooglePayurl: function () {\n\n        let googlePayPaymentJS = document.createElement('script');\n        googlePayPaymentJS.setAttribute(\"type\", \"text/javascript\")\n        googlePayPaymentJS.setAttribute(\"src\", \"https://pay.google.com/gp/p/js/pay.js\")\n\n        googlePayPaymentJS.onload = function () {\n            onGooglePayLoaded();\n        };\n        document.head.append(googlePayPaymentJS);\n    },\n\n    initWalletToken: function () {\n\n        var tokenReqdata = Aurus.getHostRequestJSON(Aurus.buildGooglePaySessionTokenRequestJson());\n        Aurus.getSessionTokenPrimary(tokenReqdata, Aurus.googlepaySessionTokenResponseHandler);\n    },\n\n    buildGooglePaySessionTokenRequestJson: function () {\n        //  alert(\"inside getBillerTokenRequestJson\");\n        var gPayTokenJson = \"\";\n        gPayTokenJson = {\n            \"4.20\": \"840\",\n            \"4.21\": \"840\",\n            \"12.63\": Aurus.aurusSessionId,\n            \"12.88\": \"1\",\n            \"4.36\": \"28\",\n            \"12.89\": Aurus.getWalletID,\n            \"3.21\": Aurus._apiversion,\n            \"12.90\": this.toHex(Aurus.googlePayPaymentData),\n            \"1.1\": \"\",\n            \"1.2\": \"\",\n            \"2.1\": \"C0N43N4U45RLN8R1\",\n            \"1.3\": \"\",\n            \"1.4\": Aurus.getCid,\n            \"2.2\": \"EE928BC346F8\",\n            \"3.1\": \"8\",\n            \"2.3\": Aurus.srcIPAddress,\n            \"4.1\": \"132\",\n            \"4.2\": \"000018\",\n            \"3.4\": \"00\",\n            \"3.5\": \"1.0\",\n            \"3.6\": \"1.0\",\n            \"3.8\": \"1\",\n            \"4.18\": this.getcdate(),\n            \"4.19\": this.getctime()\n        };\n\n        return JSON.stringify(gPayTokenJson);\n    },\n\n    googlepaySessionTokenResponseHandler: function (data) {\n        if (data.response_code == \"00000\" && data.response_text == \"APPROVED\") {\n            //   Aurus.blankToken();\n            digitalWalletResponseHandler(buildMerchantResponseJson(data));\n        } else {\n            //  Aurus.blankToken();\n            Aurus._setSessionFailed = true;\n            Aurus._setWalletID = \"11\";\n            digitalWalletResponseHandler(buildMerchantResponseJson(data));\n        }\n    },\n\n    /* Google Pay Ends hete */\n\n    set _applePayPaymetData(applepayToken) {\n        this.applePayPaymetData = applepayToken;\n        Aurus.initappleWalletToken();\n    },\n    get getapplePayPaymetData() {\n        return this.applePayPaymetData;\n    },\n    set _billerToken(bToken) {\n        this.billerToken = bToken;\n    },\n    get geBillerToken() {\n        return this.billerToken;\n    },\n    set _PaypalOrderID(orderID) {\n        this.PaypalOrderID = orderID;\n    },\n    get getPaypalOrderID() {\n        return this.PaypalOrderID;\n    },\n\n    enableKlarna: function (custData) {\n        Aurus.setKlarnaPayMethodType = custData.paymentMethod;\n        Aurus._setWalletID = \"14\",\n            this.createKlarnaContainer(); // creating container for KlarnaPay\n        var klarnaCustData = this.getCustInfoForKlarna(custData); // creating custDataObj for KlarnaPay\n        this.getBillerToken(klarnaCustData, this.klarnaPayBillerTokenResponseHandler); // get client token, pay-Method-Type\n\n    },\n\n    createKlarnaContainer: function () {\n        if (jQuery('#klarnaDiv').is(':empty')) {\n            var klarnaContainer = document.createElement(\"div\");\n            klarnaContainer.setAttribute(\"id\", \"klarna_container\");\n            klarnaContainer.setAttribute(\"style\", \"width: 100%;\");\n            document.getElementById('klarnaDiv').appendChild(klarnaContainer);\n        }\n    },\n\n    getCustInfoForPaypal: function (custData) {\n        var consumerData;\n        if (custData.customer.skipShippingAddress == 1) {\n            consumerData = {\n                \"intent\": custData.order.intent,\n                \"processing_instruction\": \"ORDER_SAVED_EXPLICITLY\",\n                \"purchase_units\": [{\n                    \"amount\": {\n                        \"currency_code\": custData.order.order_amount.currency,\n                        \"value\": custData.order.order_amount.amount,\n                    },\n                    \"invoice_number\": custData.order.invoiceNumber,\n                    \"soft_descriptor\": custData.order.softDescriptor\n                }]\n            };\n        } else {\n            consumerData = {\n                \"intent\": custData.order.intent,\n                \"processing_instruction\": \"ORDER_SAVED_EXPLICITLY\",\n\n                \"purchase_units\": [{\n                    \"amount\": {\n                        \"currency_code\": custData.order.order_amount.currency,\n                        \"value\": custData.order.order_amount.amount,\n                    },\n                    \"invoice_number\": custData.order.invoiceNumber,\n                    \"soft_descriptor\": custData.order.softDescriptor,\n                    \"shipping\": {\n                        \"name\": {\n                            \"full_name\": custData.customer.shipping_address.firstName.trim() + \" \" + custData.customer.shipping_address.lastName.trim()\n                        },\n                        \"address\": {\n                            \"address_line_1\": custData.customer.shipping_address.street,\n                            \"address_line_2\": custData.customer.shipping_address.street2,\n                            \"admin_area_2\": custData.customer.shipping_address.city,\n                            \"admin_area_1\": custData.customer.shipping_address.state,\n                            \"postal_code\": custData.customer.shipping_address.postalCode,\n                            \"country_code\": custData.customer.shipping_address.countryCode\n                        }\n                    }\n                }]\n            };\n            if (custData.customer.isShippingPreference == 1) {\n                consumerData.application_context = {\n                    \"shipping_preference\": \"SET_PROVIDED_ADDRESS\"\n                }\n            }\n        }\n        console.log('consumerData===', consumerData);\n        return consumerData;\n    },\n\n\n    getCustInfoForKlarna: function (custData) {\n        var consumerData = {\n            \"purchase_country\": \"\" + custData.order.purchaseCountry + \"\",\n            \"purchase_currency\": \"\" + custData.order.purchaseCurrency + \"\",\n            \"locale\": \"\" + custData.order.locale + \"\",\n            \"order_amount\": \"\" + custData.order.order_amount.amount + \"\",\n            \"order_tax_amount\": \"\" + custData.order.tax_amount.amount + \"\",\n            \"order_lines\": [],\n            \"billing_address\": {\n                \"given_name\": custData.customer.billing_address.firstName,\n                \"family_name\": custData.customer.billing_address.lastName,\n                \"email\": custData.customer.billing_address.emailAddress,\n                \"street_address\": custData.customer.billing_address.street,\n                \"street_address2\": custData.customer.billing_address.street2,\n                \"postal_code\": custData.customer.billing_address.postalCode,\n                \"city\": custData.customer.billing_address.city,\n                \"region\": custData.customer.billing_address.state,\n                \"phone\": custData.customer.billing_address.phoneNumber,\n                \"country\": custData.customer.billing_address.countryCode\n            }\n        }\n        if ((custData.isBopis != \"\" && custData.isBopis != undefined && custData.isBopis != null) || (custData.isBopac != \"\" && custData.isBopac != undefined && custData.isBopac != null)) {\n            if (custData.isBopis == \"0\" && custData.isBopac == \"0\") {\n                var shipping_address = {\n                    \"given_name\": custData.customer.shipping_address.firstName,\n                    \"family_name\": custData.customer.shipping_address.lastName,\n                    \"email\": custData.customer.shipping_address.emailAddress,\n                    \"street_address\": custData.customer.shipping_address.street,\n                    \"street_address2\": custData.customer.shipping_address.street2,\n                    \"postal_code\": custData.customer.shipping_address.postalCode,\n                    \"city\": custData.customer.shipping_address.city,\n                    \"region\": custData.customer.shipping_address.state,\n                    \"phone\": custData.customer.shipping_address.phoneNumber,\n                    \"country\": custData.customer.shipping_address.countryCode\n                }\n                consumerData.shipping_address = shipping_address;\n            }\n        } else {\n            var shipping_address = {\n                \"given_name\": custData.customer.shipping_address.firstName,\n                \"family_name\": custData.customer.shipping_address.lastName,\n                \"email\": custData.customer.shipping_address.emailAddress,\n                \"street_address\": custData.customer.shipping_address.street,\n                \"street_address2\": custData.customer.shipping_address.street2,\n                \"postal_code\": custData.customer.shipping_address.postalCode,\n                \"city\": custData.customer.shipping_address.city,\n                \"region\": custData.customer.shipping_address.state,\n                \"phone\": custData.customer.shipping_address.phoneNumber,\n                \"country\": custData.customer.shipping_address.countryCode\n            }\n            consumerData.shipping_address = shipping_address;\n        }\n\n\n        for (var i = 0; i < (custData.order.items.length); i++) {\n            var obj = {\n                \"reference\": \"\" + custData.order.items[i].reference + \"\",\n                \"quantity\": custData.order.items[i].quantity,\n                \"total_amount\": custData.order.items[i].totalAmount,\n                \"name\": \"\" + custData.order.items[i].name + \"\",\n                \"total_discount_amount\": custData.order.items[i].totalDiscountAmount,\n                \"total_tax_amount\": custData.order.items[i].totalTaxAmount,\n                \"type\": \"\" + custData.order.items[i].type + \"\",\n                \"unit_price\": custData.order.items[i].price.amount,\n                \"tax_rate\": custData.order.items[i].taxRate\n            }\n            consumerData['order_lines'].push(obj);\n\n        }\n\n        if (custData.store_pickup) {\n            var shippingMethod = \"\";\n            if ((custData.isBopis != \"\" && custData.isBopis != undefined && custData.isBopis != null) || (custData.isBopac != \"\" && custData.isBopac != undefined && custData.isBopac != null)) {\n                if (custData.isBopis == \"1\") {\n                    shippingMethod = \"store pick-up\"\n                } else if (custData.isBopac == \"1\") {\n                    shippingMethod = \"pick-up point\"\n                } else if (custData.isBopac == \"1\" && custData.isBopis == \"1\") {\n                    shippingMethod = \"store pick-up\";\n                } else {\n                    shippingMethod = \"\";\n                }\n            } else {\n                shippingMethod = \"\"\n            }\n            var attachment = {\n                \"content_type\": \"application/vnd.klarna.internal.emd-v2+json\",\n                \"body\": {\n                    \"other_delivery_address\": [{\n                        \"shipping_method\": shippingMethod,\n                        \"shipping_type\": \"normal\",\n                        \"first_name\": custData.customer.billing_address.firstName,\n                        \"last_name\": custData.customer.billing_address.lastName,\n                        \"street_address\": custData.store_pickup.street_address,\n                        \"street_number\": custData.store_pickup.street_number,\n                        \"postal_code\": custData.store_pickup.postal_code,\n                        \"city\": custData.store_pickup.city,\n                        \"country\": custData.store_pickup.country,\n\n                    }]\n                }\n\n            }\n            if (shippingMethod != \"\") {\n                consumerData.attachment = attachment;\n            }\n        }\n        return consumerData;\n    },\n\n    getBillerToken: function (custData, responseHandler) {\n        var url = Aurus._priEcstBaseURL + \"altbillertoken\" + Aurus._hostDomainURL;\n        var requestData = Aurus.getHostRequestJSON(Aurus.buildBillerRequestPayload(custData));\n        this.ajaxCall(requestData, url, responseHandler);\n    },\n\n    buildBillerRequestPayload: function (custData) {\n        var payload = {\n            \"1.1\": \"\",\n            \"1.2\": \"\",\n            \"1.3\": \"\",\n            \"1.4\": Aurus.getCid,\n            \"4.1\": \"130\",\n            \"12.73\": \"1\",\n            \"12.63\": Aurus.getAurusSession,\n            \"4.36\": \"33\",\n            \"4.15\": \"1\",\n            \"12.89\": Aurus.getWalletID,\n            \"3.21\": Aurus._apiversion,\n            \"12.90\": this.toHex(JSON.stringify(custData)),\n            \"2.1\": \"C0N43N4U45RLN8R1\",\n            \"12.102\": \"4\",\n            \"2.2\": \"000C29BFD6C0\",\n            \"2.3\": Aurus.srcIPAddress,\n            \"4.18\": this.getcdate(),\n            \"4.19\": this.getctime()\n        };\n        return JSON.stringify(payload);\n\n    },\n\n\n    ajaxCall: function (requestData, url, responseHandler) {\n        jQuery.ajax({\n            url: url,\n            async: false,\n            dataType: 'json',\n            type: 'post',\n            contentType: 'application/x-www-form-urlencoded',\n            data: requestData,\n            success: function (data) {\n                responseHandler(data);\n            },\n            error: function (jqXHR, textStatus, errorThrown) {}\n        });\n    },\n    enableApplePay: function (custData) {\n        this.initApplePay(custData);\n    },\n\n    initApplePay: function (custData) {\n        if (window.ApplePaySession) {\n            if (ApplePaySession.canMakePayments) {\n                if (!!document.getElementById(\"applepayDiv\")) {\n                    document.getElementById(\"applepayDiv\").innerHTML = \"\";\n                    document.getElementById(\"applepayDiv\").insertAdjacentHTML('afterbegin', appleWalletDiv);\n                } else {}\n\n                if (!!document.getElementById(\"applepayDiv_Bottom\")) {\n                    document.getElementById(\"applepayDiv_Bottom\").innerHTML = \"\";\n                    document.getElementById(\"applepayDiv_Bottom\").insertAdjacentHTML('afterbegin', appleWalletDiv);\n                }\n                showApplePayButton();\n            }\n        } else {}\n\n        // Aurus._lineItems =this.importLineItems(custData);\n        Aurus._orderAmount = parseFloat(custData.order.order_amount.amount).toFixed(2);\n        Aurus._shippingCost = parseFloat(custData.order.shipping_amount.amount).toFixed(2);\n        Aurus._subTotal = parseFloat(custData.order.item_total.amount).toFixed(2);\n        //  Aurus._discount = parseFloat(custData.order.discounts.amount).toFixed(2);\n        Aurus._estimatedTax = parseFloat(custData.order.tax_amount.amount).toFixed(2);\n        if (custData.shippingMethods != undefined && custData.shippingMethods != \"\" && custData.shippingMethods != null) {\n            Aurus._shippingMethod = custData.shippingMethods;\n        }\n        Aurus._giftWrap = parseFloat(custData.order.gift_wrap.amount).toFixed(2);\n        //  Aurus._coupon = parseFloat(custData.order.coupon.amount).toFixed(2);\n        Aurus.importApplePayurl();\n        Aurus._lineItems = this.importLineItems(custData);\n        Aurus.checkBillingAddress(custData);\n    },\n\n    checkBillingAddress: function (custData) {\n        if (Aurus.getBillingAddress != \"\" && Aurus.getBillingAddress != null && Aurus.getBillingAddress != undefined) {\n            if (\n                (Aurus.getBillingAddress.firstName != \"\" && Aurus.getBillingAddress.lastName != \"\" && Aurus.getBillingAddress.emailAddress != \"\" && Aurus.getBillingAddress.phoneNumber != \"\" && Aurus.getBillingAddress.street != \"\" && Aurus.getBillingAddress.city != \"\" && Aurus.getBillingAddress.state != \"\" && Aurus.getBillingAddress.postalCode != \"\" && Aurus.getBillingAddress.countryCode != \"\") &&\n                (Aurus.getBillingAddress.firstName != null && Aurus.getBillingAddress.lastName != null && Aurus.getBillingAddress.emailAddress != null && Aurus.getBillingAddress.phoneNumber != null && Aurus.getBillingAddress.street != null && Aurus.getBillingAddress.city != null && Aurus.getBillingAddress.state != null && Aurus.getBillingAddress.postalCode != null && Aurus.getBillingAddress.countryCode != null) &&\n                (Aurus.getBillingAddress.firstName != undefined && Aurus.getBillingAddress.lastName != undefined && Aurus.getBillingAddress.emailAddress != undefined && Aurus.getBillingAddress.phoneNumber != undefined && Aurus.getBillingAddress.street != undefined && Aurus.getBillingAddress.city != undefined && Aurus.getBillingAddress.state != undefined && Aurus.getBillingAddress.postalCode != undefined && Aurus.getBillingAddress.countryCode != undefined)\n            ) {\n                Aurus._SkipBillingAddress = \"0\";\n            } else {\n                Aurus._SkipBillingAddress = \"1\";\n            }\n        } else {\n            Aurus._SkipBillingAddress = \"1\";\n        }\n    },\n\n    importLineItems: function (custData) {\n        var lineItems = '';\n        if (custData.order.coupon != null && custData.order.coupon != undefined && custData.order.discounts != null && custData.order.discounts != undefined) {\n            Aurus._discount = parseFloat(custData.order.discounts.amount).toFixed(2);\n            Aurus._coupon = parseFloat(custData.order.coupon.amount).toFixed(2);\n            lineItems = [{\n                    \"label\": \"Subtotal\",\n                    \"amount\": Aurus.getSubTotal,\n                    \"type\": \"final\"\n                },\n                {\n                    \"label\": \"Gift Wrap\",\n                    \"amount\": Aurus.getGiftWrap,\n                    \"type\": \"final\"\n                },\n                {\n                    \"label\": \"Coupon\",\n                    \"amount\": Aurus.getCoupon,\n                    \"type\": \"final\"\n                },\n                {\n                    \"label\": \"Discount\",\n                    \"amount\": Aurus.getDiscount,\n                    \"type\": \"final\"\n                },\n                {\n                    \"label\": \"Shipping\",\n                    \"amount\": Aurus.getShippingCost,\n                    \"type\": \"final\"\n                },\n                {\n                    \"label\": \"Estimated Tax\",\n                    \"amount\": Aurus.getEstimatedTax,\n                    \"type\": \"final\"\n                },\n            ];\n        } else {\n\n            lineItems = [{\n                    \"label\": \"Subtotal\",\n                    \"amount\": Aurus.getSubTotal,\n                    \"type\": \"final\"\n                },\n                {\n                    \"label\": \"Gift Wrap\",\n                    \"amount\": Aurus.getGiftWrap,\n                    \"type\": \"final\"\n                },\n                {\n                    \"label\": \"Shipping\",\n                    \"amount\": Aurus.getShippingCost,\n                    \"type\": \"final\"\n                },\n                {\n                    \"label\": \"Estimated Tax\",\n                    \"amount\": Aurus.getEstimatedTax,\n                    \"type\": \"final\"\n                },\n            ];\n\n        }\n\n        if (custData.order.items != \"\" && custData.order.items != undefined && custData.order.items != null) {\n            var jObj = [];\n            for (i = 0; i < custData.order.items.length; i++) {\n                var obj;\n                if (custData.order.items[i].additionalChargeIndicator == \"1\") {\n                    obj = {\n                        \"label\": custData.order.items[i].name,\n                        \"amount\": custData.order.items[i].totalAmount,\n                    }\n                    lineItems.push(obj);\n                    jObj.push(obj);\n                }\n            }\n            Aurus._additionalChargeIndicator = jObj;\n            // lineItems.push(jObj);\n        }\n\n        return lineItems;\n    },\n\n    importApplePayurl: function () {\n\n        var applePayCss = document.getElementsByTagName('head')[0];\n        var csslink = document.createElement('link');\n        csslink.rel = 'stylesheet';\n        csslink.type = 'text/css';\n        csslink.href = Aurus._ecstCdnURL + 'css/applePayLbrands.css';\n        csslink.media = 'all';\n        applePayCss.appendChild(csslink);\n    },\n    getApplePayRequestJson: function () {\n        var gPayTokenJson = \"\";\n        gPayTokenJson = {\n            \"4.20\": \"840\",\n            \"4.21\": \"840\",\n            \"12.63\": Aurus.aurusSessionId,\n            \"12.88\": \"1\",\n            \"12.89\": \"7\",\n            \"3.21\": Aurus._apiversion,\n            \"12.90\": this.toHex(JSON.stringify(Aurus.applePayPaymetData)),\n            \"1.1\": \"\",\n            \"1.2\": \"\",\n            \"2.1\": \"C0N43N4U45RLN8R1\",\n            \"1.3\": \"\",\n            \"1.4\": Aurus.getCid,\n            \"2.2\": \"EE928BC346F8\",\n            \"3.1\": \"8\",\n            \"2.3\": Aurus.srcIPAddress,\n            \"4.1\": \"132\",\n            \"4.2\": \"000018\",\n            \"3.4\": \"00\",\n            \"3.5\": \"1.0\",\n            \"3.6\": \"1.0\",\n            \"3.8\": \"1\",\n            \"4.18\": this.getcdate(),\n            \"4.19\": this.getctime()\n        };\n\n        return JSON.stringify(gPayTokenJson);\n\n    },\n    initappleWalletToken: function () {\n        var url = Aurus._priEcstBaseURL + 'altsessiontoken' + Aurus._hostDomainURL;\n        var requestData = Aurus.getHostRequestJSON(Aurus.getApplePayRequestJson());\n        this.ajaxCall(requestData, url, Aurus.applepayTokenResponseHandler);\n    },\n    applepayTokenResponseHandler: function (data) {\n        if (data.response_code == \"00000\" && data.response_text == \"APPROVAL\") {\n            Aurus.blankToken();\n            Aurus._setWalletID = \"7\";\n            digitalWalletResponseHandler(buildMerchantResponseJson(data));\n        } else {\n            Aurus.blankToken();\n            Aurus._setWalletID = \"7\";\n            Aurus._setSessionFailed = true;\n            digitalWalletResponseHandler(buildMerchantResponseJson(data));\n        }\n\n\n\n    },\n    klarnaPayBillerTokenResponseHandler: function (data) {\n        if (data.response_code == \"00000\" && data.response_text == \"APPROVAL\") {\n            Aurus.kct = data.billerToken;\n            Aurus.renderKlarnaElements();\n        } else {\n            Aurus._setBillerFailed = true;\n            Aurus._setWalletID = \"14\",\n                digitalWalletResponseHandler(buildMerchantResponseJson(data));\n        }\n\n\n    },\n\n    renderKlarnaElements: function () {\n        var importscript = document.createElement('script');\n        importscript.setAttribute(\"type\", \"text/javascript\");\n        importscript.setAttribute(\"src\", \"https://x.klarnacdn.net/kp/lib/v1/api.js\");\n        document.getElementsByTagName(\"head\")[0].appendChild(importscript);\n        if (jQuery(\"#klarnaButtonDiv_Top\").length) {\n            jQuery(\"#KlarnaButton\").remove();\n            var klarnaButtonDiv = document.createElement(\"div\");\n            klarnaButtonDiv.setAttribute(\"style\", \"width: 100%;\");\n            klarnaButtonDiv.setAttribute(\"id\", \"KlarnaButton\");\n            document.getElementById('klarnaButtonDiv_Top').appendChild(klarnaButtonDiv);\n\n            var klarnaButton = document.createElement(\"button\");\n            klarnaButton.setAttribute(\"class\", \"authorize\");\n            klarnaButton.setAttribute(\"style\", \" height: 50px;  background-color: #000000; color: white;  border: none; width: 100%; \");\n            klarnaButtonDiv.appendChild(klarnaButton);\n\n            var firstTXT = document.createElement(\"span\");\n            firstTXT.setAttribute(\"class\", \"Span\");\n            firstTXT.innerHTML = 'Buy with ';\n            klarnaButton.appendChild(firstTXT);\n\n            var secTXT = document.createElement(\"img\");\n            secTXT.setAttribute(\"class\", \"img\");\n            secTXT.setAttribute(\"style\", \"width: 56px;margin-bottom: 0px;\");\n            secTXT.setAttribute(\"src\", Aurus._ecstCdnURL + \"images/klarna.svg\");\n            klarnaButton.appendChild(secTXT);\n\n            // var KlarnaLegalText_Lbrands = document.createElement(\"label\");\n            // KlarnaLegalText_Lbrands.setAttribute(\"class\", \"KLARNA_Legal_Text\");\n            // KlarnaLegalText_Lbrands.innerHTML = \"By clicking Buy with Klarna.I am instructing Victoria's Secret to send my order and billing information to Klarna and understand that information will be subjected to the Klarna Terms and Klarna Privacy Policy\";\n            // KlarnaLegalText_Lbrands.setAttribute(\"style\", \"width: 100%;\");\n            // klarnaButtonDiv.appendChild(KlarnaLegalText_Lbrands);\n        }\n        if (jQuery(\"#klarnaButtonDiv_Bottom\").length) {\n            if (jQuery('#klarnaButtonDiv_Bottom').is(':empty')) {\n                var klarnaButtonDiv = document.createElement(\"div\");\n                klarnaButtonDiv.setAttribute(\"style\", \"width: 100%;\");\n                document.getElementById('klarnaButtonDiv_Bottom').appendChild(klarnaButtonDiv);\n\n                var klarnaButton = document.createElement(\"button\");\n                klarnaButton.setAttribute(\"class\", \"authorize\");\n                klarnaButton.setAttribute(\"style\", \" height: 50px;  background-color: #000000; color: white;  border: none; width: 100%; \");\n                klarnaButtonDiv.appendChild(klarnaButton);\n\n                var firstTXT = document.createElement(\"span\");\n                firstTXT.setAttribute(\"class\", \"Span\");\n                firstTXT.innerHTML = 'Buy with ';\n                klarnaButton.appendChild(firstTXT);\n\n                var secTXT = document.createElement(\"img\");\n                secTXT.setAttribute(\"class\", \"img\");\n                secTXT.setAttribute(\"style\", \"width: 56px;margin-bottom: 0px;\");\n                secTXT.setAttribute(\"src\", Aurus._ecstCdnURL + \"images/klarna.svg\");\n                klarnaButton.appendChild(secTXT);\n\n                var KlarnaLegalText_Lbrands = document.createElement(\"label\");\n                KlarnaLegalText_Lbrands.setAttribute(\"class\", \"KLARNA_Legal_Text\");\n                KlarnaLegalText_Lbrands.innerHTML = \"By clicking Buy with Klarna.I am instructing Victoria's Secret to send my order and billing information to Klarna and understand that information will be subjected to the Klarna Terms and Klarna Privacy Policy\";\n                KlarnaLegalText_Lbrands.setAttribute(\"style\", \"width: 100%;\");\n                klarnaButtonDiv.appendChild(KlarnaLegalText_Lbrands);\n            }\n        }\n\n    },\n    PayPalBillerTokenResponseHandler: function (data) {\n        if (data.response_code == \"00000\" && data.response_text == \"APPROVAL\") {\n            Aurus._PaypalOrderID = data.billerToken;\n\n        } else {\n            Aurus._setBillerFailed = true;\n            Aurus._setWalletID = \"4\",\n                digitalWalletResponseHandler(buildMerchantResponseJson(data));\n        }\n\n    },\n    buildPayPalSessionTokenRequestJson: function () {\n        var paypalJson = {\n            \"cartId\": Aurus.getAurusSession,\n            \"walletAuthToken\": Aurus.PaypalOrderID\n        };\n        var payload = {\n            \"12.63\": Aurus.getAurusSession,\n            \"12.88\": \"1\",\n            \"12.89\": \"4\",\n            \"12.102\": \"4\",\n            \"3.21\": Aurus._apiversion,\n            \"12.90\": this.toHex(JSON.stringify(paypalJson)),\n            \"12.97\": \"T1824667292\",\n            \"1.1\": \"\",\n            \"1.2\": \"\",\n            \"2.1\": \"0000000\",\n            \"3.1\": \"8\",\n            \"1.3\": \"\",\n            \"1.4\": Aurus.getCid,\n            \"2.2\": \"0000000\",\n            \"2.3\": Aurus.srcIPAddress,\n            \"4.1\": \"132\",\n            \"4.2\": \"000036\",\n            \"3.4\": \"00\",\n            \"3.5\": \"1.0\",\n            \"3.6\": \"1.0\",\n            \"3.8\": \"1\",\n            \"4.18\": this.getcdate(),\n            \"4.19\": this.getctime(),\n            \"12.71\": Aurus.ecomUrlType,\n            \"12.132\": Aurus.pageType\n\n        };\n        return JSON.stringify(payload);\n    },\n    paypalSessionTokenResponseHandler: function (data) {\n        if (data.response_code == \"00000\" && data.response_text == \"APPROVED\") {\n            Aurus.blankToken();\n            digitalWalletResponseHandler(buildMerchantResponseJson(data));\n        } else {\n            Aurus.blankToken();\n            Aurus._setSessionFailed = true;\n            Aurus._setWalletID = \"4\";\n            digitalWalletResponseHandler(buildMerchantResponseJson(data));\n        }\n\n    },\n    blankToken: function () {\n        Aurus._PaypalOrderID = \"\";\n        Aurus.kct = \"\";\n        Aurus.vct = \"\";\n        Aurus.applePayPaymetData = \"\";\n    },\n    klarnaAuthTokenHandler: function (response) {\n        if (response.approved == true) {\n            Aurus.kat = response.authorization_token;\n            this.getSessionToken(Aurus.getKlarnaAuthToken, this.klarnaPaySessionTokenResponseHandler);\n        }\n    },\n\n    getSessionToken: function (token, responseHandler) {\n        var url = Aurus._priEcstBaseURL + \"altsessiontoken\" + Aurus._hostDomainURL;\n        var requestData = Aurus.getHostRequestJSON(Aurus.buildSessionTokenRequestPayload(token));\n        this.ajaxCall(requestData, url, responseHandler);\n\n    },\n\n\n    buildSessionTokenRequestPayload: function (ecomToken) {\n        var ecomTokenJson = {\n            \"walletAuthToken\": ecomToken\n        };\n        var payload = {\n            \"12.97\": \"\",\n            \"4.11\": \"\",\n            \"12.74\": \"\",\n            \"12.98\": \"\",\n            \"3.21\": Aurus._apiversion,\n            \"12.90\": this.toHex(JSON.stringify(ecomTokenJson)),\n            \"12.71\": \"\",\n            \"12.102\": \"0\",\n            \"12.109\": \"\",\n            \"4.20\": \"840\",\n            \"6.45\": \"Sample for klarnapay\",\n            \"4.21\": \"840\",\n            \"12.85\": \"\",\n            \"12.63\": Aurus.getAurusSession,\n            \"12.88\": \"1\",\n            \"12.89\": \"14\",\n            \"1.1\": \"\",\n            \"1.2\": \"\",\n            \"1.3\": \"\",\n            \"1.4\": Aurus.getCid,\n            \"2.1\": \"C0N43N4U45RLN8R1\",\n            \"2.2\": \"000C29BFD6C0\",\n            \"3.1\": \"8\",\n            \"2.3\": Aurus.srcIPAddress,\n            \"4.1\": \"132\",\n            \"4.2\": \"114848\",\n            \"3.4\": \"00\",\n            \"3.5\": \"1.0\",\n            \"3.6\": \"1.0\",\n            \"3.8\": \"1\",\n            \"4.18\": this.getcdate(),\n            \"4.19\": this.getctime()\n\n        };\n        return JSON.stringify(payload);\n\n    },\n\n    klarnaPaySessionTokenResponseHandler: function (data) {\n        if (data.response_text == \"APPROVAL\" && data.response_code == \"00000\") {\n            Aurus.blankToken();\n            var oneTimeToken = data.one_time_token;\n            digitalWalletResponseHandler(buildMerchantResponseJson(data));\n        } else {\n            Aurus.blankToken();\n            Aurus._setWalletID = \"14\";\n            Aurus._setSessionFailed = true;\n            digitalWalletResponseHandler(buildMerchantResponseJson(data));\n        }\n    },\n\n    toHex: function (str) {\n        var byteArray = this.toUTF8Array(str);\n        return byteArray.map(function (byte) {\n            return ('0' + (byte & 0xFF).toString(16)).slice(-2);\n        }).join('');\n    },\n\n    getHostRequestJSON(json) {\n        return \"formFactorId=\" + this.tid + \"&txnDateTime=\" + this.getcdate() + this.getctime() + \"&encryptionFlag=00&payload=STX\" + this.toHex(json) + \"ETX\";\n    },\n\n    toUTF8Array: function (str) {\n        var utf8 = [];\n        for (var i = 0; i < str.length; i++) {\n            var charcode = str.charCodeAt(i);\n            if (charcode < 0x80) utf8.push(charcode);\n            else if (charcode < 0x800) {\n                utf8.push(0xc0 | (charcode >> 6),\n                    0x80 | (charcode & 0x3f));\n            } else if (charcode < 0xd800 || charcode >= 0xe000) {\n                utf8.push(0xe0 | (charcode >> 12),\n                    0x80 | ((charcode >> 6) & 0x3f),\n                    0x80 | (charcode & 0x3f));\n            } else {\n                i++;\n                charcode = 0x10000 + (((charcode & 0x3ff) << 10) |\n                    (str.charCodeAt(i) & 0x3ff));\n                utf8.push(0xf0 | (charcode >> 18),\n                    0x80 | ((charcode >> 12) & 0x3f),\n                    0x80 | ((charcode >> 6) & 0x3f),\n                    0x80 | (charcode & 0x3f));\n            }\n        }\n        return utf8;\n    },\n\n    //VenmoIntegration Starts here\n\n    venmoClientToken: \"\",\n    venmoPayNonce: \"\",\n\n    set vct(vct) {\n        this.venmoClientToken = vct;\n    },\n    get getVenmoClientToken() {\n        return this.venmoClientToken;\n    },\n    set _venmoPayNonce(kat) {\n        this.venmoPayNonce = kat;\n    },\n    get getVenmoPayNonce() {\n        return this.venmoPayNonce;\n    },\n\n    initPayPal: function (paypalConsumerDtl) {\n        this.createPaypalContainer();\n        Aurus._paypalData = paypalConsumerDtl;\n        jQuery.ajaxSetup({\n            cache: true\n        });\n        getScripts([paypalCheckoutJs], function () {\n\n            paypal.Buttons({\n\n                style: {\n                    layout: 'horizontal',\n                    color: 'black',\n                    shape: 'rect',\n                    label: 'pay',\n                    size: 'responsive',\n                    tagline: 'false'\n                },\n                // Set up the transaction\n                createOrder: function (data, actions) {\n                    Aurus._setWalletID = \"4\",\n                        Aurus.getBillerToken(Aurus.getCustInfoForPaypal(Aurus.paypalCheckoutData), Aurus.PayPalBillerTokenResponseHandler);\n                    return Aurus.getPaypalOrderID;\n                },\n\n                // Finalize the transaction\n                onApprove: function (data, actions) {\n                    Aurus._PaypalOrderID = data.orderID;\n                    var tokenReqdata = Aurus.getHostRequestJSON(Aurus.buildPayPalSessionTokenRequestJson());\n                    Aurus.getSessionTokenPrimary(tokenReqdata, Aurus.paypalSessionTokenResponseHandler);\n                }\n            }).render('#paypal-button-container');\n\n            if (jQuery(\"#paypalDiv_Bottom\").length) {\n                paypal.Buttons({\n                    style: {\n                        layout: 'horizontal',\n                        color: 'black',\n                        shape: 'rect',\n                        label: 'pay',\n                        size: 'responsive',\n                        tagline: 'false'\n                    },\n                    // Set up the transaction\n                    createOrder: function (data, actions) {\n                        Aurus._setWalletID = \"4\",\n                            Aurus.getBillerToken(Aurus.getCustInfoForPaypal(Aurus.paypalCheckoutData), Aurus.PayPalBillerTokenResponseHandler);\n                        return Aurus.getPaypalOrderID;\n                    },\n\n                    // Finalize the transaction\n                    onApprove: function (data, actions) {\n                        Aurus._PaypalOrderID = data.orderID;\n                        var tokenReqdata = Aurus.getHostRequestJSON(Aurus.buildPayPalSessionTokenRequestJson());\n                        Aurus.getSessionTokenPrimary(tokenReqdata, Aurus.paypalSessionTokenResponseHandler);\n                    }\n                }).render('#paypal-button-container_bottom');\n            }\n\n        });\n        jQuery.ajaxSetup({\n            cache: false\n        });\n\n    },\n    importPaypalURL: function (custData) {\n\n        if (custData.customer.skipShippingAddress == 1) {\n            if (this.getEnv == \"live\") {\n                paypalCheckoutJs = \"https://www.paypal.com/sdk/js?client-id=AfQUYZxO_oL-qSfMnvqTzWk_lANnQzu_YIsddRZ4AFQTH58YP-Cl6DkZZwWzY-XkxeVEaf95w3mJ4_ci&intent=order&disable-funding=credit,card&commit=false\";\n            } else if (this.getEnv == \"sandbox\") {\n                paypalCheckoutJs = \"https://www.paypal.com/sdk/js?client-id=AbsRowaCV-7remgpCSWWAYIxv1ZnIN20UAumnWFYgCS561CZoSA-BoPUGoBnMiXHAODT6yT7srfQAuQz&intent=order&disable-funding=credit,card&commit=false\";\n            } else {\n                window.parent.postMessage(\"AurusScriptError=Invalid_Environment\", '*');\n            }\n        } else {\n            if (this.getEnv == \"live\") {\n                paypalCheckoutJs = \"https://www.paypal.com/sdk/js?client-id=AfQUYZxO_oL-qSfMnvqTzWk_lANnQzu_YIsddRZ4AFQTH58YP-Cl6DkZZwWzY-XkxeVEaf95w3mJ4_ci&intent=order&disable-funding=credit,card&commit=true\";\n            } else if (this.getEnv == \"sandbox\") {\n                paypalCheckoutJs = \"https://www.paypal.com/sdk/js?client-id=AbsRowaCV-7remgpCSWWAYIxv1ZnIN20UAumnWFYgCS561CZoSA-BoPUGoBnMiXHAODT6yT7srfQAuQz&intent=order&disable-funding=credit,card&commit=true\";\n            } else {\n                window.parent.postMessage(\"AurusScriptError=Invalid_Environment\", '*');\n            }\n        }\n\n        if (jQuery('script[src=\"' + paypalCheckoutJs + '\"]').length < 1) {\n            jQuery(\"head\").append(paypalCheckoutJs);\n        }\n\n    },\n    createPaypalContainer: function () {\n        if (!jQuery('#paypalDiv').children().length > 0) {\n            var paypalContainer = document.createElement(\"div\");\n            paypalContainer.setAttribute(\"id\", \"paypal-button-container\");\n            paypalContainer.setAttribute(\"style\", \"width: 100%;\");\n            document.getElementById('paypalDiv').appendChild(paypalContainer);\n        }\n        if (jQuery(\"#paypalDiv_Bottom\").length) {\n            if (!jQuery('#paypalDiv_Bottom').children().length > 0) {\n                var paypalContainer = document.createElement(\"div\");\n                paypalContainer.setAttribute(\"id\", \"paypal-button-container_bottom\");\n                paypalContainer.setAttribute(\"style\", \"width: 100%;\");\n                document.getElementById('paypalDiv_Bottom').appendChild(paypalContainer);\n            }\n        }\n    },\n    initVenmo: function () {\n\n        if (jQuery('#venmoDiv').is(':empty')) {\n            var venmoImage = document.createElement('img')\n            venmoImage.setAttribute(\"id\", \"venmo-button\")\n            venmoImage.setAttribute(\"style\", \"display: none; width:100% ;\")\n            venmoImage.setAttribute(\"src\", Aurus._ecstCdnURL + \"images/blue_venmo_button_active_280x48.svg\")\n            venmoImage.onload = function () {\n\n            };\n            document.getElementById(\"venmoDiv\").appendChild(venmoImage)\n        }\n\n        if (jQuery(\"#venmoDiv_Bottom\").length) {\n            if (!jQuery('#venmoDiv_Bottom').children().length > 0) {\n                var venmoImage = document.createElement('img')\n                venmoImage.setAttribute(\"id\", \"venmo-button_Bottom\")\n                venmoImage.setAttribute(\"style\", \"display: none; width:100% ;\")\n                venmoImage.setAttribute(\"src\", Aurus._ecstCdnURL + \"images/blue_venmo_button_active_280x48.svg\")\n                venmoImage.onload = function () {\n\n                };\n                document.getElementById(\"venmoDiv_Bottom\").appendChild(venmoImage)\n            }\n        }\n        Aurus._setWalletID = \"15\",\n            this.getBillerToken(\"\", this.venmoBillerTokenResponseHandler);\n\n    },\n\n    venmoBillerTokenResponseHandler: function (data) {\n        if (data.response_code == \"00000\" && data.response_text == \"APPROVAL\") {\n            Aurus.vct = data.billerToken;\n            var clientMinJs = \"https://js.braintreegateway.com/web/3.73.1/js/client.min.js\";\n            var venmoMinJs = \"https://js.braintreegateway.com/web/3.73.1/js/venmo.min.js\";\n            var dataCollectorJs = \"https://js.braintreegateway.com/web/3.73.1/js/data-collector.min.js\";\n\n\n            getScripts([clientMinJs, venmoMinJs, dataCollectorJs], function () {\n\n                braintree.client.create({\n                    authorization: Aurus.getVenmoClientToken\n                }, function (clientErr, clientInstance) {\n\n                    if (clientErr) {\n                        return;\n                    }\n                    braintree.venmo.create({\n                        client: clientInstance,\n                        authorization: Aurus.getVenmoClientToken,\n                        allowDesktop: true,\n                        allowNewBrowserTab: true\n                    }, function (venmoErr, venmoInstance) {\n                        if (venmoErr) {\n                            return;\n                        }\n\n                        if (!venmoInstance.isBrowserSupported()) {\n                            return;\n                        }\n\n                        displayVenmoButton(venmoInstance);\n\n                        if (venmoInstance.hasTokenizationResult()) {\n                            venmoInstance.tokenize(function (tokenizeErr, payload) {\n                                if (err) {\n                                    handleVenmoError(tokenizeErr);\n                                } else {\n                                    handleVenmoSuccess(payload);\n                                }\n                            });\n                            return;\n                        }\n                    });\n                });\n\n            });\n        } else {\n            Aurus._setBillerFailed = true;\n            Aurus._setWalletID = \"15\",\n                digitalWalletResponseHandler(buildMerchantResponseJson(data));\n        }\n    },\n    getVenmoSessionToken: function (payload) {\n        Aurus._venmoPayNonce = payload.nonce;\n\n        var reqdata = Aurus.getHostRequestJSON(Aurus.buildSessionTokenRequestPayloadVenmo(Aurus.getVenmoPayNonce));\n        this.getSessionTokenPrimary(reqdata, this.venmoSessionTokenResponseHandler);\n    },\n    buildSessionTokenRequestPayloadVenmo: function (ecomToken) {\n        var ecomTokenJson = {\n            \"walletAuthToken\": ecomToken\n        };\n        var payload = {\n            \"4.15\": \"1\",\n            \"12.89\": \"15\",\n            \"3.21\": Aurus._apiversion,\n            \"12.90\": this.toHex(JSON.stringify(ecomTokenJson)),\n            \"1.1\": \"\",\n            \"1.2\": \"\",\n            \"1.3\": \"\",\n            \"1.4\": Aurus.getCid,\n            \"2.1\": \"C0N43N4U45RLN8R1\",\n            \"12.102\": \"\",\n            \"2.2\": \"000C29BFD6C0\",\n            \"2.3\": Aurus.srcIPAddress,\n            \"4.1\": \"132\",\n            \"4.18\": this.getcdate(),\n            \"4.19\": this.getctime(),\n            \"12.63\": Aurus.getAurusSession\n        };\n        return JSON.stringify(payload);\n    },\n    getSessionTokenPrimary: function (reqData, responseHandler) {\n        jQuery.ajax({\n            url: Aurus._priEcstBaseURL + \"altsessiontoken\" + Aurus._hostDomainURL,\n            async: false,\n            dataType: 'json',\n            type: 'post',\n            contentType: 'application/x-www-form-urlencoded',\n            data: reqData,\n            success: function (data) {\n                responseHandler(data);\n            },\n            error: function (jqXHR, textStatus, errorThrown) {\n                Aurus.getSessionTokenSecondary(reqData, responseHandler);\n            }\n        });\n\n    },\n    getSessionTokenSecondary: function (reqData, responseHandler) {\n        jQuery.ajax({\n            url: Aurus._secEcstBaseURL + \"altsessiontoken\" + Aurus._hostDomainURL,\n            async: true,\n            dataType: 'json',\n            type: 'post',\n            contentType: 'application/x-www-form-urlencoded',\n            data: reqData,\n            success: function (data) {\n                responseHandler(data);\n            },\n            error: function (jqXHR, textStatus, errorThrown) {}\n        });\n    },\n    venmoSessionTokenResponseHandler: function (data) {\n        if (data.response_code == \"00000\" && data.response_text == \"APPROVAL\") {\n            Aurus.blankToken();\n            digitalWalletResponseHandler(buildMerchantResponseJson(data));\n        } else {\n            Aurus.blankToken();\n            Aurus._setWalletID = \"15\";\n            Aurus._setSessionFailed = true;\n            digitalWalletResponseHandler(buildMerchantResponseJson(data));\n        }\n    }\n}\n\nfunction getScripts(scripts, callback) {\n    var progress = 0;\n    scripts.forEach(function (script) {\n        jQuery.getScript(script, function () {\n            if (++progress == scripts.length) callback();\n        });\n    });\n}\n\nfunction importVenmoScripts() {\n    var isClientJsLoaded = false;\n    var isVenmoMinJsLoaded = false;\n    var isDataCollectorJsLoaded = false;\n    var venmoscript1 = document.createElement('script')\n    venmoscript1.setAttribute(\"type\", \"text/javascript\")\n    venmoscript1.setAttribute(\"src\", \"https://js.braintreegateway.com/web/3.62.0/js/client.min.js\")\n    venmoscript1.onload = function () {\n        isClientJsLoaded = true;\n    };\n    document.getElementsByTagName(\"head\")[0].appendChild(venmoscript1)\n}\n\nfunction displayVenmoButton(venmoInstance) {\n    var venmoButton = document.getElementById('venmo-button');\n    venmoButton.style.display = 'block';\n    venmoButton.addEventListener('click', function () {\n        venmoButton.disabled = true;\n        venmoInstance.tokenize(function (tokenizeErr, payload) {\n            venmoButton.removeAttribute('disabled');\n\n            if (tokenizeErr) {\n                handleVenmoError(tokenizeErr);\n            } else {\n                handleVenmoSuccess(payload);\n            }\n        });\n    });\n\n    if (jQuery(\"#venmoDiv_Bottom\").length) {\n        var venmoButton2 = document.getElementById('venmo-button_Bottom');\n        venmoButton2.style.display = 'block';\n        venmoButton2.addEventListener('click', function () {\n            venmoButton2.disabled = true;\n            venmoInstance.tokenize(function (tokenizeErr, payload) {\n                venmoButton2.removeAttribute('disabled');\n\n                if (tokenizeErr) {\n                    handleVenmoError(tokenizeErr);\n                } else {\n                    handleVenmoSuccess(payload);\n                }\n            });\n        });\n    }\n}\n\nfunction handleVenmoError(err) {\n    //if (err.code === 'VENMO_CANCELED') {} else if (err.code === 'VENMO_APP_CANCELED') {} else {}\n}\n\nfunction handleVenmoSuccess(payload) {\n    Aurus.getVenmoSessionToken(payload);\n\n}\n\n\n\nwindow.klarnaAsyncCallback = function () {\n\n    Klarna.Payments.init({\n        client_token: Aurus.getKlarnaClientToken\n    });\n\n    Klarna.Payments.load({\n        container: \"#klarna_container\",\n        payment_method_category: Aurus.getKlarnaPayMethodType\n\n    }, function (res) {\n        //document.write(res);\n    });\n\n    jQuery(function () {\n        jQuery(\"button.authorize\").on('click', function () {\n            Klarna.Payments.authorize({\n                    payment_method_category: Aurus.getKlarnaPayMethodType\n                },\n                function (res) {\n                    Aurus.klarnaAuthTokenHandler(res);\n\n                })\n        })\n    })\n\n}\n\n\n\nfunction buildMerchantResponseJson(data) {\n    var merchantResponseJson = {\n        \"GetSessionTokenResponse\": {\n            \"CardNumber\": \"\" + checkProperty(data, 'masked_card_num') + \"\",\n            \"ProfileId\": \"\" + checkProperty(data, 'profileId') + \"\",\n            \"ResponseCode\": \"\" + checkProperty(data, 'response_code') + \"\",\n            \"RequestId\": \"\" + checkProperty(data, 'requestId') + \"\",\n            \"MerchantSessionId\": \"\" + checkProperty(data, 'merchantSessionId') + \"\",\n            \"ProcessorToken\": \"\" + checkProperty(data, 'processorToken') + \"\",\n            \"ProcessorPayerId\": \"\" + checkProperty(data, 'processorPayerId') + \"\",\n            \"ECOMMInfo\": {\n                \"OneTimeToken\": \"\" + checkProperty(data, 'one_time_token') + \"\",\n                \"StoreId\": \"\" + checkProperty(data, 'sid') + \"\",\n                \"MerchantIdentifier\": \"\" + checkProperty(data, 'mid') + \"\",\n                \"TerminalId\": \"\" + checkProperty(data, 'tid') + \"\"\n            },\n            \"Pay_Wallet\": \"\" + checkProperty(data, 'payWalletData') + \"\",\n            \"CardToken\": \"\" + checkProperty(data, 'cardToken') + \"\",\n            \"BillingAddress\": {\n                \"BillingAddressLine1\": \"\" + checkProperty(data, 'billingaddr1') + \"\",\n                \"BillingAddressLine2\": \"\" + checkProperty(data, 'billingaddr2') + \"\",\n                \"BillingCountry\": \"\" + checkProperty(data, 'billingcountry') + \"\",\n                \"BillingEmailId\": \"\" + checkProperty(data, 'billingemailid') + \"\",\n                \"BillingCity\": \"\" + checkProperty(data, 'billingcity') + \"\",\n                \"BillingMobileNumber\": \"\" + checkProperty(data, 'billingcellno') + \"\",\n                \"BillingFirstName\": \"\" + checkProperty(data, 'billingfn') + \"\",\n                \"BillingLastName\": \"\" + checkProperty(data, 'billingln') + \"\",\n                \"BillingZip\": \"\" + checkProperty(data, 'billingzip') + \"\",\n                \"BillingState\": \"\" + checkProperty(data, 'billingstate') + \"\",\n                \"BillingMiddleName\": \"\" + checkProperty(data, 'billingmn') + \"\"\n            },\n            \"CardType\": \"\" + checkProperty(data, 'card_type') + \"\",\n            \"SubCardType\": \"\" + checkProperty(data, 'subcard_type') + \"\",\n            \"TransactionIdentifier\": \"\" + checkProperty(data, 'transactionIdentifier') + \"\",\n            \"CardExpiryDate\": \"\" + checkProperty(data, 'CardExpiryDate') + \"\",\n            \"ShippingAddress\": {\n                \"ShippingAddressLine1\": \"\" + checkProperty(data, 'shippingaddr1') + \"\",\n                \"ShippingEmailId\": \"\" + checkProperty(data, 'shippingemailid') + \"\",\n                \"ShippingMiddleName\": \"\" + checkProperty(data, 'shippingmn') + \"\",\n                \"ShippingFirstName\": \"\" + checkProperty(data, 'shippingfn') + \"\",\n                \"ShippingZip\": \"\" + checkProperty(data, 'shippingzip') + \"\",\n                \"ShippingCountry\": \"\" + checkProperty(data, 'shippingcountry') + \"\",\n                \"ShippingCity\": \"\" + checkProperty(data, 'shippingcity') + \"\",\n                \"ShippingState\": \"\" + checkProperty(data, 'shippingstate') + \"\",\n                \"ShippingMobileNumber\": \"\" + checkProperty(data, 'shippingcellno') + \"\",\n                \"ShippingAddressLine2\": \"\" + checkProperty(data, 'shippingaddr2') + \"\",\n                \"ShippingLastName\": \"\" + checkProperty(data, 'shippingln') + \"\"\n            },\n            \"ResponseText\": \"\" + checkProperty(data, 'response_text') + \"\",\n            \"CartId\": \"\" + checkProperty(data, 'cartId') + \"\",\n            \"WalletIdentifier\": \"\" + checkProperty(data, 'WalletIdentifier') + \"\",\n            \"ShippingMethod\": \"\" + checkProperty(data, 'ShippingMethod') + \"\",\n            \"ModifiedOrder\": {\n                \"OrderTotal\": \"\" + +\"\",\n                \"Subtotal\": \"\" + +\"\",\n                \"Discount\": \"\" + +\"\",\n                \"TaxAmount\": \"\" + +\"\",\n                \"ShippingAmount\": \"\" + +\"\",\n                \"Gift_Wrap\": \"\" + +\"\",\n                \"Coupon\": \"\" + +\"\",\n                \"AdditionalTax\": \"\" + [] + \"\",\n            },\n        }\n    };\n    if (Aurus.getBillerFailed || Aurus.getSessionFailed) {\n        merchantResponseJson.GetSessionTokenResponse.WalletIdentifier = Aurus.getWalletID;\n        Aurus._setBillerFailed = false;\n        Aurus._setSessionFailed = false;\n    }\n    if (Aurus.getWalletID == \"7\") {\n        merchantResponseJson.GetSessionTokenResponse.ShippingMethod = Aurus.getSelectedShippingMethod;\n        merchantResponseJson.GetSessionTokenResponse.ModifiedOrder.OrderTotal = Aurus.getOrderAmount;\n        merchantResponseJson.GetSessionTokenResponse.ModifiedOrder.Subtotal = Aurus.getSubTotal;\n        merchantResponseJson.GetSessionTokenResponse.ModifiedOrder.Discount = Aurus.getDiscount;\n        merchantResponseJson.GetSessionTokenResponse.ModifiedOrder.TaxAmount = Aurus.getEstimatedTax;\n        merchantResponseJson.GetSessionTokenResponse.ModifiedOrder.ShippingAmount = Aurus.getShippingCost;\n        merchantResponseJson.GetSessionTokenResponse.ModifiedOrder.Gift_Wrap = Aurus.getGiftWrap;\n        merchantResponseJson.GetSessionTokenResponse.ModifiedOrder.Coupon = Aurus.getCoupon;\n        merchantResponseJson.GetSessionTokenResponse.ModifiedOrder.AdditionalTax = Aurus.getAdditionalChargeIndicator;\n    }\n    return merchantResponseJson;\n}\n\nfunction checkProperty(data, property) {\n    if (data.hasOwnProperty(property)) {\n        return data[property];\n    } else {\n        return \"\";\n    }\n}\n\nfunction postAurusScriptLoadedEvent() {\n    try {\n        window.parent.postMessage(\"AurusScriptLoaded=true\", '*');\n    } catch (e) {\n        //if (e instanceof ReferenceError) {}\n    }\n}\n/* GooglePay Support Js starts */\n\nconst baseRequest = {\n    apiVersion: 2,\n    apiVersionMinor: 0,\n    emailRequired: true\n};\n\nconst allowedCardNetworks = [\"AMEX\", \"DISCOVER\", \"JCB\", \"MASTERCARD\", \"VISA\"];\nconst allowedCardAuthMethods = [\"PAN_ONLY\", \"CRYPTOGRAM_3DS\"];\n\nconst tokenizationSpecification = {\n    type: 'PAYMENT_GATEWAY',\n    parameters: {\n        'gateway': 'auruspay',\n        'gatewayMerchantId': \"22731101231178566\"\n    }\n\n    /* type: 'DIRECT',\n     parameters: {\n     protocolVersion: 'ECv2',\n     publicKey: 'BOxnUMXdAh5VSr4jXwTKR/RS7zXyDbYkGkarLg0Mc4F8HLA5N20EY5kK1Mq4m2oZo/MtANLV6oCcU2Vt7e8Af3I='\n  }     */\n};\n\nconst baseCardPaymentMethod = {\n    type: 'CARD',\n    parameters: {\n        allowedAuthMethods: allowedCardAuthMethods,\n        allowedCardNetworks: allowedCardNetworks,\n        billingAddressRequired: true,\n        \"billingAddressParameters\": {\n            \"format\": \"FULL\",\n            \"phoneNumberRequired\": true\n\n        }\n    }\n};\n\nconst cardPaymentMethod = Object.assign({},\n    baseCardPaymentMethod, {\n        tokenizationSpecification: tokenizationSpecification\n    }\n);\n\n//let paymentsClient = null;\nfunction getGoogleIsReadyToPayRequest() {\n    return Object.assign({},\n        baseRequest, {\n            allowedPaymentMethods: [baseCardPaymentMethod]\n        }\n    );\n}\n\nfunction getGooglePaymentDataRequest() {\n    const paymentDataRequest = Object.assign({}, baseRequest);\n    paymentDataRequest.allowedPaymentMethods = [cardPaymentMethod];\n    paymentDataRequest.transactionInfo = getGoogleTransactionInfo();\n    paymentDataRequest.merchantInfo = {\n        //merchantId: Aurus.getGoogleMerchantId, \n        merchantName: 'Aurusinc' //optional\n    };\n    return paymentDataRequest;\n}\n\nfunction getGooglePaymentsClient() {\n    //if ( paymentsClient === null ) {\n    var paymentsClient = new google.payments.api.PaymentsClient({\n        environment: 'TEST'\n    }); /*TEST OR PRODUCTION*/\n    //}\n    return paymentsClient;\n}\n\nfunction onGooglePayLoaded() {\n    const paymentsClient = getGooglePaymentsClient();\n    paymentsClient.isReadyToPay(getGoogleIsReadyToPayRequest())\n        .then(function (response) {\n            if (response.result) {\n                addGooglePayButton();\n            }\n        })\n        .catch(function (err) {\n            console.error(err);\n        });\n}\n\nfunction addGooglePayButton() {\n    const paymentsClient = getGooglePaymentsClient();\n    const button =\n        paymentsClient.createButton({\n            onClick: onGooglePaymentButtonClicked,\n            buttonSizeMode: 'fill',\n            buttonType: 'plain'\n        }); //buttonColor: 'black'\n    // const button_bottom =\n    //     paymentsClient.createButton({onClick: onGooglePaymentButtonClicked,buttonSizeMode:'fill',buttonType: 'plain'});\n\n    document.getElementById('aurus-google-pay-containerId').appendChild(button);\n    //document.getElementById('aurus-google-pay-containerId-bottom').appendChild(button_bottom);\n\n\n    /*if(document.getElementsByClassName(\"gpay-button\")[0]){\n    \n     document.getElementsByClassName(\"gpay-button\")[0].setAttribute('style','width:10px');\n    \n    }*/\n\n\n}\n\nfunction getGoogleTransactionInfo() {\n    return {\n        currencyCode: Aurus.getCurrencyCode,\n        totalPriceStatus: 'FINAL',\n        totalPrice: parseFloat(Aurus.getOrderAmount).toFixed(2),\n    };\n}\n\nfunction prefetchGooglePaymentData() {\n    const paymentDataRequest = getGooglePaymentDataRequest();\n    paymentDataRequest.transactionInfo = {\n        totalPriceStatus: 'NOT_CURRENTLY_KNOWN',\n        currencyCode: Aurus.getCurrencyCode\n    };\n    const paymentsClient = getGooglePaymentsClient();\n    paymentsClient.prefetchPaymentData(paymentDataRequest);\n}\n\nfunction onGooglePaymentButtonClicked() {\n    const paymentDataRequest = getGooglePaymentDataRequest();\n    paymentDataRequest.transactionInfo = getGoogleTransactionInfo();\n\n    const paymentsClient = getGooglePaymentsClient();\n    paymentsClient.loadPaymentData(paymentDataRequest)\n        .then(function (paymentData) {\n            processPayment(paymentData);\n\n        })\n        .catch(function (err) {\n            console.error(err);\n        });\n}\n\nfunction processPayment(paymentData) {\n\n    /*var paymentToken = paymentData.paymentMethodData.tokenizationData.token;*/\n\n    var paymentToken = JSON.stringify(paymentData);\n\n    Aurus._gPayPaymetData = paymentToken;\n\n\n    // document.write(paymentToken);\n}\n\n\n/* GooglePay Support Js Ends*/\n\npostAurusScriptLoadedEvent();\n\n\n\n\n\nfunction digitalWalletResponseHandler(JSONdata) {\n    // Merchant Response handler for Session Token\n    console.log(\"Inside digitalWalletResponseHandler\" + JSON.stringify(JSONdata));\n    var responseCode = JSONdata.GetSessionTokenResponse.ResponseCode;\n    console.log('JSONdata.GetSessionTokenResponse.BillingAddress------>>>>', JSONdata.GetSessionTokenResponse.BillingAddress);\n    console.log('JSONdata.GetSessionTokenResponse.ShippingAddress------>>>>', JSONdata.GetSessionTokenResponse.ShippingAddress);\n    if (responseCode == \"00000\") {\n        //alert(JSON.stringify(JSONdata));\n        console.log(\"Success : Session Token Received - \" + JSONdata.GetSessionTokenResponse.ECOMMInfo.OneTimeToken);\n        console.log(\"Success : CardType - \" + JSONdata.GetSessionTokenResponse.CardType);\n        console.log(\"Success : WalletIdentifier - \" + JSONdata.GetSessionTokenResponse.WalletIdentifier);\n        var WalletIdentifier = JSONdata.GetSessionTokenResponse.WalletIdentifier;\n        var defer = $.Deferred();\n        $.ajax({\n            url: aurusWalletPlaceOrder, //var aurusWalletPlaceOrder = \"${URLUtils.url('AurusWallet-PlaceOrder')}\";\n            method: 'POST',\n            data: {\n                OneTimeToken: JSONdata.GetSessionTokenResponse.ECOMMInfo.OneTimeToken,\n                cardType: JSONdata.GetSessionTokenResponse.CardType,\n                BillingAddress: JSON.stringify(JSONdata.GetSessionTokenResponse.BillingAddress),\n                ShippingAddress: JSON.stringify(JSONdata.GetSessionTokenResponse.ShippingAddress),\n                WalletIdentifier: WalletIdentifier\n            },\n            success: function (data) {\n                // enable the placeOrder button here\n                $('body').trigger('checkout:enableButton', '.next-step-button button');\n                if (data.errorMessage) {\n                    $('.error-message').show();\n                    $('.error-message-text').text(data.errorMessage);\n                    scrollAnimate($('.error-message'));\n                } else {\n                    if (data.apm) {\n                        var params = data.continueUrl.slice(data.continueUrl.indexOf('?') + 1).split('&');\n                        var redirect = $('<form>')\n                            .appendTo(document.body)\n                            .attr({\n                                method: 'GET',\n                                action: data.continueUrl,\n                            });\n\n                        Object.keys(params).forEach(function (keys) {\n                            var param = params[keys].split('=');\n                            $('<input>')\n                                .appendTo(redirect)\n                                .attr({\n                                    name: param[0],\n                                    value: param[1],\n                                });\n                        });\n\n                        $('<input>')\n                            .appendTo(redirect)\n                            .attr({\n                                name: 'orderID',\n                                value: data.orderID,\n                            });\n\n                        $('<input>')\n                            .appendTo(redirect)\n                            .attr({\n                                name: 'orderToken',\n                                value: data.orderToken,\n                            });\n\n                        redirect.submit();\n                        defer.resolve(data);\n                    } else {\n                        var redirect = $('<form>')\n                            .appendTo(document.body)\n                            .attr({\n                                method: 'POST',\n                                action: data.continueUrl,\n                            });\n\n                        $('<input>')\n                            .appendTo(redirect)\n                            .attr({\n                                name: 'orderID',\n                                value: data.orderID,\n                            });\n\n                        $('<input>')\n                            .appendTo(redirect)\n                            .attr({\n                                name: 'orderToken',\n                                value: data.orderToken,\n                            });\n\n                        redirect.submit();\n                        defer.resolve(data);\n                    }\n                }\n            },\n            error: function () {\n                // enable the placeOrder button here\n                $('body').trigger('checkout:enableButton', $('.next-step-button button'));\n            },\n        });\n\n        return defer;\n\n\n    } else {\n        //failure response handling\n        // alert(JSONdata.GetSessionTokenResponse.ResponseText+' PLEASE CONTACT TO AURUS');\n        $('.error-message').show();\n        $('.error-message-text').text(JSONdata.GetSessionTokenResponse.ResponseText);\n        scrollAnimate($('.error-message'));\n    }\n}\n\n\nmodule.exports = Aurus;\n\n//# sourceURL=webpack://int_aurus_sfra/./cartridges/int_aurus_sfra/cartridge/client/default/js/test.js?");

/***/ }),

/***/ "../storefront-reference-architecture-master/cartridges/app_storefront_base/cartridge/client/default/js/checkout/address.js":
/*!**********************************************************************************************************************************!*\
  !*** ../storefront-reference-architecture-master/cartridges/app_storefront_base/cartridge/client/default/js/checkout/address.js ***!
  \**********************************************************************************************************************************/
/***/ (function(module) {

"use strict";
eval("\n\n/**\n * Populate the Billing Address Summary View\n * @param {string} parentSelector - the top level DOM selector for a unique address summary\n * @param {Object} address - the address data\n */\nfunction populateAddressSummary(parentSelector, address) {\n    $.each(address, function (attr) {\n        var val = address[attr];\n        $('.' + attr, parentSelector).text(val || '');\n    });\n}\n\n/**\n * returns a formed <option /> element\n * @param {Object} shipping - the shipping object (shipment model)\n * @param {boolean} selected - current shipping is selected (for PLI)\n * @param {order} order - the Order model\n * @param {Object} [options] - options\n * @returns {Object} - the jQuery / DOMElement\n */\nfunction optionValueForAddress(shipping, selected, order, options) {\n    var safeOptions = options || {};\n    var isBilling = safeOptions.type && safeOptions.type === 'billing';\n    var className = safeOptions.className || '';\n    var isSelected = selected;\n    var isNew = !shipping;\n    if (typeof shipping === 'string') {\n        return $('<option class=\"' + className + '\" disabled>' + shipping + '</option>');\n    }\n    var safeShipping = shipping || {};\n    var shippingAddress = safeShipping.shippingAddress || {};\n\n    if (isBilling && isNew && !order.billing.matchingAddressId) {\n        shippingAddress = order.billing.billingAddress.address || {};\n        isNew = false;\n        isSelected = true;\n        safeShipping.UUID = 'manual-entry';\n    }\n\n    var uuid = safeShipping.UUID ? safeShipping.UUID : 'new';\n    var optionEl = $('<option class=\"' + className + '\" />');\n    optionEl.val(uuid);\n\n    var title;\n\n    if (isNew) {\n        title = order.resources.addNewAddress;\n    } else {\n        title = [];\n        if (shippingAddress.firstName) {\n            title.push(shippingAddress.firstName);\n        }\n        if (shippingAddress.lastName) {\n            title.push(shippingAddress.lastName);\n        }\n        if (shippingAddress.address1) {\n            title.push(shippingAddress.address1);\n        }\n        if (shippingAddress.address2) {\n            title.push(shippingAddress.address2);\n        }\n        if (shippingAddress.city) {\n            if (shippingAddress.state) {\n                title.push(shippingAddress.city + ',');\n            } else {\n                title.push(shippingAddress.city);\n            }\n        }\n        if (shippingAddress.stateCode) {\n            title.push(shippingAddress.stateCode);\n        }\n        if (shippingAddress.postalCode) {\n            title.push(shippingAddress.postalCode);\n        }\n        if (!isBilling && safeShipping.selectedShippingMethod) {\n            title.push('-');\n            title.push(safeShipping.selectedShippingMethod.displayName);\n        }\n\n        if (title.length > 2) {\n            title = title.join(' ');\n        } else {\n            title = order.resources.newAddress;\n        }\n    }\n    optionEl.text(title);\n\n    var keyMap = {\n        'data-first-name': 'firstName',\n        'data-last-name': 'lastName',\n        'data-address1': 'address1',\n        'data-address2': 'address2',\n        'data-city': 'city',\n        'data-state-code': 'stateCode',\n        'data-postal-code': 'postalCode',\n        'data-country-code': 'countryCode',\n        'data-phone': 'phone'\n    };\n    $.each(keyMap, function (key) {\n        var mappedKey = keyMap[key];\n        var mappedValue = shippingAddress[mappedKey];\n        // In case of country code\n        if (mappedValue && typeof mappedValue === 'object') {\n            mappedValue = mappedValue.value;\n        }\n\n        optionEl.attr(key, mappedValue || '');\n    });\n\n    var giftObj = {\n        'data-is-gift': 'isGift',\n        'data-gift-message': 'giftMessage'\n    };\n\n    $.each(giftObj, function (key) {\n        var mappedKey = giftObj[key];\n        var mappedValue = safeShipping[mappedKey];\n        optionEl.attr(key, mappedValue || '');\n    });\n\n    if (isSelected) {\n        optionEl.attr('selected', true);\n    }\n\n    return optionEl;\n}\n\n/**\n * returns address properties from a UI form\n * @param {Form} form - the Form element\n * @returns {Object} - a JSON object with all values\n */\nfunction getAddressFieldsFromUI(form) {\n    var address = {\n        firstName: $('input[name$=_firstName]', form).val(),\n        lastName: $('input[name$=_lastName]', form).val(),\n        address1: $('input[name$=_address1]', form).val(),\n        address2: $('input[name$=_address2]', form).val(),\n        city: $('input[name$=_city]', form).val(),\n        postalCode: $('input[name$=_postalCode]', form).val(),\n        stateCode: $('select[name$=_stateCode],input[name$=_stateCode]', form).val(),\n        countryCode: $('select[name$=_country]', form).val(),\n        phone: $('input[name$=_phone]', form).val()\n    };\n    return address;\n}\n\nmodule.exports = {\n    methods: {\n        populateAddressSummary: populateAddressSummary,\n        optionValueForAddress: optionValueForAddress,\n        getAddressFieldsFromUI: getAddressFieldsFromUI\n    },\n\n    showDetails: function () {\n        $('.btn-show-details').on('click', function () {\n            var form = $(this).closest('form');\n\n            form.attr('data-address-mode', 'details');\n            form.find('.multi-ship-address-actions').removeClass('d-none');\n            form.find('.multi-ship-action-buttons .col-12.btn-save-multi-ship').addClass('d-none');\n        });\n    },\n\n    addNewAddress: function () {\n        $('.btn-add-new').on('click', function () {\n            var $el = $(this);\n            if ($el.parents('#dwfrm_billing').length > 0) {\n                // Handle billing address case\n                $('body').trigger('checkout:clearBillingForm');\n                var $option = $($el.parents('form').find('.addressSelector option')[0]);\n                $option.attr('value', 'new');\n                var $newTitle = $('#dwfrm_billing input[name=localizedNewAddressTitle]').val();\n                $option.text($newTitle);\n                $option.prop('selected', 'selected');\n                $el.parents('[data-address-mode]').attr('data-address-mode', 'new');\n            } else {\n                // Handle shipping address case\n                var $newEl = $el.parents('form').find('.addressSelector option[value=new]');\n                $newEl.prop('selected', 'selected');\n                $newEl.parent().trigger('change');\n            }\n        });\n    }\n};\n\n\n//# sourceURL=webpack://int_aurus_sfra/../storefront-reference-architecture-master/cartridges/app_storefront_base/cartridge/client/default/js/checkout/address.js?");

/***/ }),

/***/ "../storefront-reference-architecture-master/cartridges/app_storefront_base/cartridge/client/default/js/checkout/billing.js":
/*!**********************************************************************************************************************************!*\
  !*** ../storefront-reference-architecture-master/cartridges/app_storefront_base/cartridge/client/default/js/checkout/billing.js ***!
  \**********************************************************************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval("\n\nvar addressHelpers = __webpack_require__(/*! ./address */ \"../storefront-reference-architecture-master/cartridges/app_storefront_base/cartridge/client/default/js/checkout/address.js\");\nvar cleave = __webpack_require__(/*! ../components/cleave */ \"../storefront-reference-architecture-master/cartridges/app_storefront_base/cartridge/client/default/js/components/cleave.js\");\n\n/**\n * updates the billing address selector within billing forms\n * @param {Object} order - the order model\n * @param {Object} customer - the customer model\n */\nfunction updateBillingAddressSelector(order, customer) {\n    var shippings = order.shipping;\n\n    var form = $('form[name$=billing]')[0];\n    var $billingAddressSelector = $('.addressSelector', form);\n    var hasSelectedAddress = false;\n\n    if ($billingAddressSelector && $billingAddressSelector.length === 1) {\n        $billingAddressSelector.empty();\n        // Add New Address option\n        $billingAddressSelector.append(addressHelpers.methods.optionValueForAddress(\n            null,\n            false,\n            order,\n            { type: 'billing' }\n        ));\n\n        // Separator -\n        $billingAddressSelector.append(addressHelpers.methods.optionValueForAddress(order.resources.shippingAddresses, false, order, {\n            // className: 'multi-shipping',\n            type: 'billing'\n        }));\n\n        shippings.forEach(function (aShipping) {\n            var isSelected = order.billing.matchingAddressId === aShipping.UUID;\n            hasSelectedAddress = hasSelectedAddress || isSelected;\n            // Shipping Address option\n            $billingAddressSelector.append(\n                addressHelpers.methods.optionValueForAddress(\n                    aShipping,\n                    isSelected,\n                    order,\n                    {\n                        // className: 'multi-shipping',\n                        type: 'billing'\n                    }\n                )\n            );\n        });\n\n        if (customer.addresses && customer.addresses.length > 0) {\n            $billingAddressSelector.append(addressHelpers.methods.optionValueForAddress(order.resources.accountAddresses, false, order));\n            customer.addresses.forEach(function (address) {\n                var isSelected = order.billing.matchingAddressId === address.ID;\n                hasSelectedAddress = hasSelectedAddress || isSelected;\n                // Customer Address option\n                $billingAddressSelector.append(\n                    addressHelpers.methods.optionValueForAddress({\n                        UUID: 'ab_' + address.ID,\n                        shippingAddress: address\n                    }, isSelected, order, { type: 'billing' })\n                );\n            });\n        }\n    }\n\n    if (hasSelectedAddress\n        || (!order.billing.matchingAddressId && order.billing.billingAddress.address)) {\n        // show\n        $(form).attr('data-address-mode', 'edit');\n    } else {\n        $(form).attr('data-address-mode', 'new');\n    }\n\n    $billingAddressSelector.show();\n}\n\n/**\n * Updates the billing address form values within payment forms without any payment instrument validation\n * @param {Object} order - the order model\n */\nfunction updateBillingAddress(order) {\n    var billing = order.billing;\n    if (!billing.billingAddress || !billing.billingAddress.address) return;\n\n    var form = $('form[name=dwfrm_billing]');\n    if (!form) return;\n\n    $('input[name$=_firstName]', form).val(billing.billingAddress.address.firstName);\n    $('input[name$=_lastName]', form).val(billing.billingAddress.address.lastName);\n    $('input[name$=_address1]', form).val(billing.billingAddress.address.address1);\n    $('input[name$=_address2]', form).val(billing.billingAddress.address.address2);\n    $('input[name$=_city]', form).val(billing.billingAddress.address.city);\n    $('input[name$=_postalCode]', form).val(billing.billingAddress.address.postalCode);\n    $('select[name$=_stateCode],input[name$=_stateCode]', form)\n        .val(billing.billingAddress.address.stateCode);\n    $('select[name$=_country]', form).val(billing.billingAddress.address.countryCode.value);\n    $('input[name$=_phone]', form).val(billing.billingAddress.address.phone);\n    $('input[name$=_email]', form).val(order.orderEmail);\n}\n\n/**\n * Validate and update payment instrument form fields\n * @param {Object} order - the order model\n */\nfunction validateAndUpdateBillingPaymentInstrument(order) {\n    var billing = order.billing;\n    if (!billing.payment || !billing.payment.selectedPaymentInstruments\n        || billing.payment.selectedPaymentInstruments.length <= 0) return;\n\n    var form = $('form[name=dwfrm_billing]');\n    if (!form) return;\n\n    var instrument = billing.payment.selectedPaymentInstruments[0];\n    $('select[name$=expirationMonth]', form).val(instrument.expirationMonth);\n    $('select[name$=expirationYear]', form).val(instrument.expirationYear);\n    // Force security code and card number clear\n    $('input[name$=securityCode]', form).val('');\n    $('input[name$=cardNumber]').data('cleave').setRawValue('');\n}\n\n/**\n * Updates the billing address form values within payment forms\n * @param {Object} order - the order model\n */\nfunction updateBillingAddressFormValues(order) {\n    module.exports.methods.updateBillingAddress(order);\n    module.exports.methods.validateAndUpdateBillingPaymentInstrument(order);\n}\n\n/**\n * clears the billing address form values\n */\nfunction clearBillingAddressFormValues() {\n    updateBillingAddressFormValues({\n        billing: {\n            billingAddress: {\n                address: {\n                    countryCode: {}\n                }\n            }\n        }\n    });\n}\n\n/**\n * update billing address summary and contact information\n * @param {Object} order - checkout model to use as basis of new truth\n */\nfunction updateBillingAddressSummary(order) {\n    // update billing address summary\n    addressHelpers.methods.populateAddressSummary(\n        '.billing .address-summary',\n        order.billing.billingAddress.address\n    );\n\n    // update billing parts of order summary\n    $('.order-summary-email').text(order.orderEmail);\n\n    if (order.billing.billingAddress.address) {\n        $('.order-summary-phone').text(order.billing.billingAddress.address.phone);\n    }\n}\n\n/**\n * Updates the billing information in checkout, based on the supplied order model\n * @param {Object} order - checkout model to use as basis of new truth\n * @param {Object} customer - customer model to use as basis of new truth\n * @param {Object} [options] - options\n */\nfunction updateBillingInformation(order, customer) {\n    updateBillingAddressSelector(order, customer);\n\n    // update billing address form\n    updateBillingAddressFormValues(order);\n\n    // update billing address summary and billing parts of order summary\n    updateBillingAddressSummary(order);\n}\n\n/**\n * Updates the payment information in checkout, based on the supplied order model\n * @param {Object} order - checkout model to use as basis of new truth\n */\nfunction updatePaymentInformation(order) {\n    // update payment details\n    var $paymentSummary = $('.payment-details');\n    var htmlToAppend = '';\n\n    if (order.billing.payment && order.billing.payment.selectedPaymentInstruments\n        && order.billing.payment.selectedPaymentInstruments.length > 0) {\n        htmlToAppend += '<span>' + order.resources.cardType + ' '\n            + order.billing.payment.selectedPaymentInstruments[0].type\n            + '</span><div>'\n            + order.billing.payment.selectedPaymentInstruments[0].maskedCreditCardNumber\n            + '</div><div><span>'\n            + order.resources.cardEnding + ' '\n            + order.billing.payment.selectedPaymentInstruments[0].expirationMonth\n            + '/' + order.billing.payment.selectedPaymentInstruments[0].expirationYear\n            + '</span></div>';\n    }\n\n    $paymentSummary.empty().append(htmlToAppend);\n}\n\n/**\n * clears the credit card form\n */\nfunction clearCreditCardForm() {\n    $('input[name$=\"_cardNumber\"]').data('cleave').setRawValue('');\n    $('select[name$=\"_expirationMonth\"]').val('');\n    $('select[name$=\"_expirationYear\"]').val('');\n    $('input[name$=\"_securityCode\"]').val('');\n}\n\nmodule.exports = {\n    methods: {\n        updateBillingAddressSelector: updateBillingAddressSelector,\n        updateBillingAddressFormValues: updateBillingAddressFormValues,\n        clearBillingAddressFormValues: clearBillingAddressFormValues,\n        updateBillingInformation: updateBillingInformation,\n        updatePaymentInformation: updatePaymentInformation,\n        clearCreditCardForm: clearCreditCardForm,\n        updateBillingAddress: updateBillingAddress,\n        validateAndUpdateBillingPaymentInstrument: validateAndUpdateBillingPaymentInstrument,\n        updateBillingAddressSummary: updateBillingAddressSummary\n    },\n\n    showBillingDetails: function () {\n        $('.btn-show-billing-details').on('click', function () {\n            $(this).parents('[data-address-mode]').attr('data-address-mode', 'new');\n        });\n    },\n\n    hideBillingDetails: function () {\n        $('.btn-hide-billing-details').on('click', function () {\n            $(this).parents('[data-address-mode]').attr('data-address-mode', 'shipment');\n        });\n    },\n\n    selectBillingAddress: function () {\n        $('.payment-form .addressSelector').on('change', function () {\n            var form = $(this).parents('form')[0];\n            var selectedOption = $('option:selected', this);\n            var optionID = selectedOption[0].value;\n\n            if (optionID === 'new') {\n                // Show Address\n                $(form).attr('data-address-mode', 'new');\n            } else {\n                // Hide Address\n                $(form).attr('data-address-mode', 'shipment');\n            }\n\n            // Copy fields\n            var attrs = selectedOption.data();\n            var element;\n\n            Object.keys(attrs).forEach(function (attr) {\n                element = attr === 'countryCode' ? 'country' : attr;\n                if (element === 'cardNumber') {\n                    $('.cardNumber').data('cleave').setRawValue(attrs[attr]);\n                } else {\n                    $('[name$=' + element + ']', form).val(attrs[attr]);\n                }\n            });\n        });\n    },\n\n    handleCreditCardNumber: function () {\n        cleave.handleCreditCardNumber('.cardNumber', '#cardType');\n    },\n\n    santitizeForm: function () {\n        $('body').on('checkout:serializeBilling', function (e, data) {\n            var serializedForm = cleave.serializeData(data.form);\n\n            data.callback(serializedForm);\n        });\n    },\n\n    selectSavedPaymentInstrument: function () {\n        $(document).on('click', '.saved-payment-instrument', function (e) {\n            e.preventDefault();\n            $('.saved-payment-security-code').val('');\n            $('.saved-payment-instrument').removeClass('selected-payment');\n            $(this).addClass('selected-payment');\n            $('.saved-payment-instrument .card-image').removeClass('checkout-hidden');\n            $('.saved-payment-instrument .security-code-input').addClass('checkout-hidden');\n            $('.saved-payment-instrument.selected-payment'\n                + ' .card-image').addClass('checkout-hidden');\n            $('.saved-payment-instrument.selected-payment '\n                + '.security-code-input').removeClass('checkout-hidden');\n        });\n    },\n\n    addNewPaymentInstrument: function () {\n        $('.btn.add-payment').on('click', function (e) {\n            e.preventDefault();\n            $('.payment-information').data('is-new-payment', true);\n            clearCreditCardForm();\n            $('.credit-card-form').removeClass('checkout-hidden');\n            $('.user-payment-instruments').addClass('checkout-hidden');\n        });\n    },\n\n    cancelNewPayment: function () {\n        $('.cancel-new-payment').on('click', function (e) {\n            e.preventDefault();\n            $('.payment-information').data('is-new-payment', false);\n            clearCreditCardForm();\n            $('.user-payment-instruments').removeClass('checkout-hidden');\n            $('.credit-card-form').addClass('checkout-hidden');\n        });\n    },\n\n    clearBillingForm: function () {\n        $('body').on('checkout:clearBillingForm', function () {\n            clearBillingAddressFormValues();\n        });\n    },\n\n    paymentTabs: function () {\n        $('.payment-options .nav-item').on('click', function (e) {\n            e.preventDefault();\n            var methodID = $(this).data('method-id');\n            $('.payment-information').data('payment-method-id', methodID);\n        });\n    }\n};\n\n\n//# sourceURL=webpack://int_aurus_sfra/../storefront-reference-architecture-master/cartridges/app_storefront_base/cartridge/client/default/js/checkout/billing.js?");

/***/ }),

/***/ "../storefront-reference-architecture-master/cartridges/app_storefront_base/cartridge/client/default/js/checkout/customer.js":
/*!***********************************************************************************************************************************!*\
  !*** ../storefront-reference-architecture-master/cartridges/app_storefront_base/cartridge/client/default/js/checkout/customer.js ***!
  \***********************************************************************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval("\n\nvar formHelpers = __webpack_require__(/*! ./formErrors */ \"../storefront-reference-architecture-master/cartridges/app_storefront_base/cartridge/client/default/js/checkout/formErrors.js\");\nvar scrollAnimate = __webpack_require__(/*! ../components/scrollAnimate */ \"../storefront-reference-architecture-master/cartridges/app_storefront_base/cartridge/client/default/js/components/scrollAnimate.js\");\nvar createErrorNotification = __webpack_require__(/*! ../components/errorNotification */ \"../storefront-reference-architecture-master/cartridges/app_storefront_base/cartridge/client/default/js/components/errorNotification.js\");\nvar GUEST_FORM = '#guest-customer';\nvar REGISTERED_FORM = '#registered-customer';\nvar ERROR_SECTION = '.customer-error';\n\n/**\n * @returns {boolean} If guest is active, registered is not visible\n */\nfunction isGuestFormActive() {\n    return $(REGISTERED_FORM).hasClass('d-none');\n}\n\n/**\n * Clear any previous errors in the customer form.\n */\nfunction clearErrors() {\n    $(ERROR_SECTION).children().remove();\n    formHelpers.clearPreviousErrors('.customer-information-block');\n}\n\n/**\n * @param {Object} customerData - data includes checkout related customer information\n * @param {Object} orderData - data includes checkout related order information\n */\nfunction updateCustomerInformation(customerData, orderData) {\n    var $container = $('.customer-summary');\n    var $summaryDetails = $container.find('.summary-details');\n    var email = customerData.profile && customerData.profile.email ? customerData.profile.email : orderData.orderEmail;\n    $summaryDetails.find('.customer-summary-email').text(email);\n    if (customerData.registeredUser) {\n        $container.find('.edit-button').hide();\n    } else {\n        $container.find('.edit-button').show();\n    }\n}\n\n/**\n * Handle response from the server for valid or invalid form fields.\n * @param {Object} defer - the deferred object which will resolve on success or reject.\n * @param {Object} data - the response data with the invalid form fields or\n *  valid model data.\n */\nfunction customerFormResponse(defer, data) {\n    var parentForm = isGuestFormActive() ? GUEST_FORM : REGISTERED_FORM;\n    var formSelector = '.customer-section ' + parentForm;\n\n    // highlight fields with errors\n    if (data.error) {\n        if (data.fieldErrors.length) {\n            data.fieldErrors.forEach(function (error) {\n                if (Object.keys(error).length) {\n                    formHelpers.loadFormErrors(formSelector, error);\n                }\n            });\n        }\n\n        if (data.customerErrorMessage) {\n            createErrorNotification(ERROR_SECTION, data.customerErrorMessage);\n        }\n\n        if (data.fieldErrors.length || data.customerErrorMessage || (data.serverErrors && data.serverErrors.length)) {\n            defer.reject(data);\n        }\n\n        if (data.cartError) {\n            window.location.href = data.redirectUrl;\n            defer.reject();\n        }\n    } else {\n        // Populate the Address Summary\n\n        $('body').trigger('checkout:updateCheckoutView', {\n            order: data.order,\n            customer: data.customer,\n            csrfToken: data.csrfToken\n        });\n        scrollAnimate($('.shipping-form'));\n        defer.resolve(data);\n    }\n}\n\n/**\n *\n * @param {boolean} registered - wether a registered login block will be used\n */\nfunction chooseLoginBlock(registered) {\n    $(ERROR_SECTION).find('.alert').remove();\n    $('#password').val('');\n    if (registered) {\n        $(REGISTERED_FORM).removeClass('d-none');\n        $(GUEST_FORM).addClass('d-none');\n        $('#email').val($('#email-guest').val());\n    } else {\n        $(REGISTERED_FORM).addClass('d-none');\n        $(GUEST_FORM).removeClass('d-none');\n        $('#email').val('');\n    }\n}\n\nmodule.exports = {\n\n    /**\n     * Listeners for customer form\n     */\n    initListeners: function () {\n        // 1. password\n        var customerLogin = '.js-login-customer';\n        var cancelLogin = '.js-cancel-login';\n        var registered;\n        if (customerLogin.length !== 0) {\n            $('body').on('click', customerLogin, function (e) {\n                registered = true;\n                e.preventDefault();\n                chooseLoginBlock(registered);\n            });\n        }\n        if (cancelLogin.length !== 0) {\n            $('body').on('click', cancelLogin, function (e) {\n                registered = false;\n                e.preventDefault();\n                chooseLoginBlock(registered);\n            });\n        }\n    },\n\n    methods: {\n        clearErrors: clearErrors,\n        updateCustomerInformation: updateCustomerInformation,\n        customerFormResponse: customerFormResponse,\n        isGuestFormActive: isGuestFormActive\n    },\n\n    vars: {\n        GUEST_FORM: GUEST_FORM,\n        REGISTERED_FORM: REGISTERED_FORM\n    }\n\n};\n\n\n//# sourceURL=webpack://int_aurus_sfra/../storefront-reference-architecture-master/cartridges/app_storefront_base/cartridge/client/default/js/checkout/customer.js?");

/***/ }),

/***/ "../storefront-reference-architecture-master/cartridges/app_storefront_base/cartridge/client/default/js/checkout/formErrors.js":
/*!*************************************************************************************************************************************!*\
  !*** ../storefront-reference-architecture-master/cartridges/app_storefront_base/cartridge/client/default/js/checkout/formErrors.js ***!
  \*************************************************************************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval("\n\nvar scrollAnimate = __webpack_require__(/*! ../components/scrollAnimate */ \"../storefront-reference-architecture-master/cartridges/app_storefront_base/cartridge/client/default/js/components/scrollAnimate.js\");\n\n/**\n * Display error messages and highlight form fields with errors.\n * @param {string} parentSelector - the form which contains the fields\n * @param {Object} fieldErrors - the fields with errors\n */\nfunction loadFormErrors(parentSelector, fieldErrors) { // eslint-disable-line\n    // Display error messages and highlight form fields with errors.\n    $.each(fieldErrors, function (attr) {\n        $('*[name=' + attr + ']', parentSelector)\n            .addClass('is-invalid')\n            .siblings('.invalid-feedback')\n            .html(fieldErrors[attr]);\n    });\n    // Animate to top of form that has errors\n    scrollAnimate($(parentSelector));\n}\n\n/**\n * Clear the form errors.\n * @param {string} parentSelector - the parent form selector.\n */\nfunction clearPreviousErrors(parentSelector) {\n    $(parentSelector).find('.form-control.is-invalid').removeClass('is-invalid');\n    $('.error-message').hide();\n}\n\nmodule.exports = {\n    loadFormErrors: loadFormErrors,\n    clearPreviousErrors: clearPreviousErrors\n};\n\n\n//# sourceURL=webpack://int_aurus_sfra/../storefront-reference-architecture-master/cartridges/app_storefront_base/cartridge/client/default/js/checkout/formErrors.js?");

/***/ }),

/***/ "../storefront-reference-architecture-master/cartridges/app_storefront_base/cartridge/client/default/js/checkout/shipping.js":
/*!***********************************************************************************************************************************!*\
  !*** ../storefront-reference-architecture-master/cartridges/app_storefront_base/cartridge/client/default/js/checkout/shipping.js ***!
  \***********************************************************************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval("\n\nvar addressHelpers = __webpack_require__(/*! ./address */ \"../storefront-reference-architecture-master/cartridges/app_storefront_base/cartridge/client/default/js/checkout/address.js\");\nvar formHelpers = __webpack_require__(/*! ./formErrors */ \"../storefront-reference-architecture-master/cartridges/app_storefront_base/cartridge/client/default/js/checkout/formErrors.js\");\nvar scrollAnimate = __webpack_require__(/*! ../components/scrollAnimate */ \"../storefront-reference-architecture-master/cartridges/app_storefront_base/cartridge/client/default/js/components/scrollAnimate.js\");\n\n/**\n * updates the shipping address selector within shipping forms\n * @param {Object} productLineItem - the productLineItem model\n * @param {Object} shipping - the shipping (shipment model) model\n * @param {Object} order - the order model\n * @param {Object} customer - the customer model\n */\nfunction updateShippingAddressSelector(productLineItem, shipping, order, customer) {\n    var uuidEl = $('input[value=' + productLineItem.UUID + ']');\n    var shippings = order.shipping;\n\n    var form;\n    var $shippingAddressSelector;\n    var hasSelectedAddress = false;\n\n    if (uuidEl && uuidEl.length > 0) {\n        form = uuidEl[0].form;\n        $shippingAddressSelector = $('.addressSelector', form);\n    }\n\n    if ($shippingAddressSelector && $shippingAddressSelector.length === 1) {\n        $shippingAddressSelector.empty();\n        // Add New Address option\n        $shippingAddressSelector.append(addressHelpers.methods.optionValueForAddress(\n            null,\n            false,\n            order\n        ));\n\n        if (customer.addresses && customer.addresses.length > 0) {\n            $shippingAddressSelector.append(addressHelpers.methods.optionValueForAddress(\n                order.resources.accountAddresses,\n                false,\n                order\n            ));\n\n            customer.addresses.forEach(function (address) {\n                var isSelected = shipping.matchingAddressId === address.ID;\n                $shippingAddressSelector.append(\n                    addressHelpers.methods.optionValueForAddress(\n                        { UUID: 'ab_' + address.ID, shippingAddress: address },\n                        isSelected,\n                        order\n                    )\n                );\n            });\n        }\n        // Separator -\n        $shippingAddressSelector.append(addressHelpers.methods.optionValueForAddress(order.resources.shippingAddresses, false, order, { className: 'multi-shipping' }));\n        shippings.forEach(function (aShipping) {\n            var isSelected = shipping.UUID === aShipping.UUID;\n            hasSelectedAddress = hasSelectedAddress || isSelected;\n            var addressOption = addressHelpers.methods.optionValueForAddress(\n                aShipping,\n                isSelected,\n                order,\n                { className: 'multi-shipping' }\n            );\n\n            var newAddress = addressOption.html() === order.resources.addNewAddress;\n            var matchingUUID = aShipping.UUID === shipping.UUID;\n            if ((newAddress && matchingUUID) || (!newAddress && matchingUUID) || (!newAddress && !matchingUUID)) {\n                $shippingAddressSelector.append(addressOption);\n            }\n            if (newAddress && !matchingUUID) {\n                $(addressOption[0]).remove();\n            }\n        });\n    }\n\n    if (!hasSelectedAddress) {\n        // show\n        $(form).addClass('hide-details');\n    } else {\n        $(form).removeClass('hide-details');\n    }\n\n    $('body').trigger('shipping:updateShippingAddressSelector', {\n        productLineItem: productLineItem,\n        shipping: shipping,\n        order: order,\n        customer: customer\n    });\n}\n\n/**\n * updates the shipping address form values within shipping forms\n * @param {Object} shipping - the shipping (shipment model) model\n */\nfunction updateShippingAddressFormValues(shipping) {\n    var addressObject = $.extend({}, shipping.shippingAddress);\n\n    if (!addressObject) {\n        addressObject = {\n            firstName: null,\n            lastName: null,\n            address1: null,\n            address2: null,\n            city: null,\n            postalCode: null,\n            stateCode: null,\n            countryCode: null,\n            phone: null\n        };\n    }\n\n    addressObject.isGift = shipping.isGift;\n    addressObject.giftMessage = shipping.giftMessage;\n\n    $('input[value=' + shipping.UUID + ']').each(function (formIndex, el) {\n        var form = el.form;\n        if (!form) return;\n        var countryCode = addressObject.countryCode;\n\n        $('input[name$=_firstName]', form).val(addressObject.firstName);\n        $('input[name$=_lastName]', form).val(addressObject.lastName);\n        $('input[name$=_address1]', form).val(addressObject.address1);\n        $('input[name$=_address2]', form).val(addressObject.address2);\n        $('input[name$=_city]', form).val(addressObject.city);\n        $('input[name$=_postalCode]', form).val(addressObject.postalCode);\n        $('select[name$=_stateCode],input[name$=_stateCode]', form)\n            .val(addressObject.stateCode);\n\n        if (countryCode && typeof countryCode === 'object') {\n            $('select[name$=_country]', form).val(addressObject.countryCode.value);\n        } else {\n            $('select[name$=_country]', form).val(addressObject.countryCode);\n        }\n\n        $('input[name$=_phone]', form).val(addressObject.phone);\n\n        $('input[name$=_isGift]', form).prop('checked', addressObject.isGift);\n        $('textarea[name$=_giftMessage]', form).val(addressObject.isGift && addressObject.giftMessage ? addressObject.giftMessage : '');\n    });\n\n    $('body').trigger('shipping:updateShippingAddressFormValues', { shipping: shipping });\n}\n\n/**\n * updates the shipping method radio buttons within shipping forms\n * @param {Object} shipping - the shipping (shipment model) model\n */\nfunction updateShippingMethods(shipping) {\n    var uuidEl = $('input[value=' + shipping.UUID + ']');\n    if (uuidEl && uuidEl.length > 0) {\n        $.each(uuidEl, function (shipmentIndex, el) {\n            var form = el.form;\n            if (!form) return;\n\n            var $shippingMethodList = $('.shipping-method-list', form);\n\n            if ($shippingMethodList && $shippingMethodList.length > 0) {\n                $shippingMethodList.empty();\n                var shippingMethods = shipping.applicableShippingMethods;\n                var selected = shipping.selectedShippingMethod || {};\n                var shippingMethodFormID = form.name + '_shippingAddress_shippingMethodID';\n                //\n                // Create the new rows for each shipping method\n                //\n                $.each(shippingMethods, function (methodIndex, shippingMethod) {\n                    var tmpl = $('#shipping-method-template').clone();\n                    var lineItemUUIDPart = '';\n\n                    if ($(el).parents('.multi-shipping').length) {\n                        lineItemUUIDPart = '-' + shipping.productLineItems.items[0].UUID;\n                    }\n\n                    // set input\n                    $('input', tmpl)\n                        .prop('id', 'shippingMethod-' + shippingMethod.ID + '-' + shipping.UUID + lineItemUUIDPart)\n                        .prop('name', shippingMethodFormID)\n                        .prop('value', shippingMethod.ID)\n                        .attr('checked', shippingMethod.ID === selected.ID);\n\n                    $('label', tmpl)\n                        .prop('for', 'shippingMethod-' + shippingMethod.ID + '-' + shipping.UUID + lineItemUUIDPart);\n                    // set shipping method name\n                    $('.display-name', tmpl).text(shippingMethod.displayName);\n                    // set or hide arrival time\n                    if (shippingMethod.estimatedArrivalTime) {\n                        $('.arrival-time', tmpl)\n                            .text('(' + shippingMethod.estimatedArrivalTime + ')')\n                            .show();\n                    }\n                    // set shipping cost\n                    $('.shipping-cost', tmpl).text(shippingMethod.shippingCost);\n                    $shippingMethodList.append(tmpl.html());\n                });\n            }\n        });\n    }\n\n    $('body').trigger('shipping:updateShippingMethods', { shipping: shipping });\n}\n\n/**\n * Update list of available shipping methods whenever user modifies shipping address details.\n * @param {jQuery} $shippingForm - current shipping form\n */\nfunction updateShippingMethodList($shippingForm) {\n    // delay for autocomplete!\n    setTimeout(function () {\n        var $shippingMethodList = $shippingForm.find('.shipping-method-list');\n        var urlParams = addressHelpers.methods.getAddressFieldsFromUI($shippingForm);\n        var shipmentUUID = $shippingForm.find('[name=shipmentUUID]').val();\n        var url = $shippingMethodList.data('actionUrl');\n        urlParams.shipmentUUID = shipmentUUID;\n\n        $shippingMethodList.spinner().start();\n        $.ajax({\n            url: url,\n            type: 'post',\n            dataType: 'json',\n            data: urlParams,\n            success: function (data) {\n                if (data.error) {\n                    window.location.href = data.redirectUrl;\n                } else {\n                    $('body').trigger(\n                        'checkout:updateCheckoutView',\n                        {\n                            order: data.order,\n                            customer: data.customer,\n                            options: { keepOpen: true }\n                        }\n                    );\n\n                    $shippingMethodList.spinner().stop();\n                }\n            }\n        });\n    }, 300);\n}\n\n/**\n * updates the order shipping summary for an order shipment model\n * @param {Object} shipping - the shipping (shipment model) model\n * @param {Object} order - the order model\n */\nfunction updateShippingSummaryInformation(shipping, order) {\n    $('[data-shipment-summary=' + shipping.UUID + ']').each(function (i, el) {\n        var $container = $(el);\n        var $shippingAddressLabel = $container.find('.shipping-addr-label');\n        var $addressContainer = $container.find('.address-summary');\n        var $shippingPhone = $container.find('.shipping-phone');\n        var $methodTitle = $container.find('.shipping-method-title');\n        var $methodArrivalTime = $container.find('.shipping-method-arrival-time');\n        var $methodPrice = $container.find('.shipping-method-price');\n        var $shippingSummaryLabel = $container.find('.shipping-method-label');\n        var $summaryDetails = $container.find('.row.summary-details');\n        var giftMessageSummary = $container.find('.gift-summary');\n\n        var address = shipping.shippingAddress;\n        var selectedShippingMethod = shipping.selectedShippingMethod;\n        var isGift = shipping.isGift;\n\n        addressHelpers.methods.populateAddressSummary($addressContainer, address);\n\n        if (address && address.phone) {\n            $shippingPhone.text(address.phone);\n        } else {\n            $shippingPhone.empty();\n        }\n\n        if (selectedShippingMethod) {\n            $('body').trigger(\n                'shipping:updateAddressLabelText',\n                { selectedShippingMethod: selectedShippingMethod, resources: order.resources, shippingAddressLabel: $shippingAddressLabel }\n            );\n            $shippingSummaryLabel.show();\n            $summaryDetails.show();\n            $methodTitle.text(selectedShippingMethod.displayName);\n            if (selectedShippingMethod.estimatedArrivalTime) {\n                $methodArrivalTime.text(\n                    '( ' + selectedShippingMethod.estimatedArrivalTime + ' )'\n                );\n            } else {\n                $methodArrivalTime.empty();\n            }\n            $methodPrice.text(selectedShippingMethod.shippingCost);\n        }\n\n        if (isGift) {\n            giftMessageSummary.find('.gift-message-summary').text(shipping.giftMessage);\n            giftMessageSummary.removeClass('d-none');\n        } else {\n            giftMessageSummary.addClass('d-none');\n        }\n    });\n\n    $('body').trigger('shipping:updateShippingSummaryInformation', { shipping: shipping, order: order });\n}\n\n/**\n * Update the read-only portion of the shipment display (per PLI)\n * @param {Object} productLineItem - the productLineItem model\n * @param {Object} shipping - the shipping (shipment model) model\n * @param {Object} order - the order model\n * @param {Object} [options] - options for updating PLI summary info\n * @param {Object} [options.keepOpen] - if true, prevent changing PLI view mode to 'view'\n */\nfunction updatePLIShippingSummaryInformation(productLineItem, shipping, order, options) {\n    var $pli = $('input[value=' + productLineItem.UUID + ']');\n    var form = $pli && $pli.length > 0 ? $pli[0].form : null;\n\n    if (!form) return;\n\n    var $viewBlock = $('.view-address-block', form);\n\n    var address = shipping.shippingAddress || {};\n    var selectedMethod = shipping.selectedShippingMethod;\n\n    var nameLine = address.firstName ? address.firstName + ' ' : '';\n    if (address.lastName) nameLine += address.lastName;\n\n    var address1Line = address.address1;\n    var address2Line = address.address2;\n\n    var phoneLine = address.phone;\n\n    var shippingCost = selectedMethod ? selectedMethod.shippingCost : '';\n    var methodNameLine = selectedMethod ? selectedMethod.displayName : '';\n    var methodArrivalTime = selectedMethod && selectedMethod.estimatedArrivalTime\n        ? '(' + selectedMethod.estimatedArrivalTime + ')'\n        : '';\n\n    var tmpl = $('#pli-shipping-summary-template').clone();\n\n    $('.ship-to-name', tmpl).text(nameLine);\n    $('.ship-to-address1', tmpl).text(address1Line);\n    $('.ship-to-address2', tmpl).text(address2Line);\n    $('.ship-to-city', tmpl).text(address.city);\n    if (address.stateCode) {\n        $('.ship-to-st', tmpl).text(address.stateCode);\n    }\n    $('.ship-to-zip', tmpl).text(address.postalCode);\n    $('.ship-to-phone', tmpl).text(phoneLine);\n\n    if (!address2Line) {\n        $('.ship-to-address2', tmpl).hide();\n    }\n\n    if (!phoneLine) {\n        $('.ship-to-phone', tmpl).hide();\n    }\n\n    if (shipping.selectedShippingMethod) {\n        $('.display-name', tmpl).text(methodNameLine);\n        $('.arrival-time', tmpl).text(methodArrivalTime);\n        $('.price', tmpl).text(shippingCost);\n    }\n\n    if (shipping.isGift) {\n        $('.gift-message-summary', tmpl).text(shipping.giftMessage);\n        var shipment = $('.gift-message-' + shipping.UUID);\n        $(shipment).val(shipping.giftMessage);\n    } else {\n        $('.gift-summary', tmpl).addClass('d-none');\n    }\n    // checking h5 title shipping to or pickup\n    var $shippingAddressLabel = $('.shipping-header-text', tmpl);\n    $('body').trigger(\n        'shipping:updateAddressLabelText',\n        { selectedShippingMethod: selectedMethod, resources: order.resources, shippingAddressLabel: $shippingAddressLabel }\n    );\n\n    $viewBlock.html(tmpl.html());\n\n    $('body').trigger('shipping:updatePLIShippingSummaryInformation', {\n        productLineItem: productLineItem,\n        shipping: shipping,\n        order: order,\n        options: options\n    });\n}\n\n/**\n * Update the hidden form values that associate shipping info with product line items\n * @param {Object} productLineItem - the productLineItem model\n * @param {Object} shipping - the shipping (shipment model) model\n */\nfunction updateProductLineItemShipmentUUIDs(productLineItem, shipping) {\n    $('input[value=' + productLineItem.UUID + ']').each(function (key, pli) {\n        var form = pli.form;\n        $('[name=shipmentUUID]', form).val(shipping.UUID);\n        $('[name=originalShipmentUUID]', form).val(shipping.UUID);\n\n        $(form).closest('.card').attr('data-shipment-uuid', shipping.UUID);\n    });\n\n    $('body').trigger('shipping:updateProductLineItemShipmentUUIDs', {\n        productLineItem: productLineItem,\n        shipping: shipping\n    });\n}\n\n/**\n * Update the shipping UI for a single shipping info (shipment model)\n * @param {Object} shipping - the shipping (shipment model) model\n * @param {Object} order - the order/basket model\n * @param {Object} customer - the customer model\n * @param {Object} [options] - options for updating PLI summary info\n * @param {Object} [options.keepOpen] - if true, prevent changing PLI view mode to 'view'\n */\nfunction updateShippingInformation(shipping, order, customer, options) {\n    // First copy over shipmentUUIDs from response, to each PLI form\n    order.shipping.forEach(function (aShipping) {\n        aShipping.productLineItems.items.forEach(function (productLineItem) {\n            updateProductLineItemShipmentUUIDs(productLineItem, aShipping);\n        });\n    });\n\n    // Now update shipping information, based on those associations\n    updateShippingMethods(shipping);\n    updateShippingAddressFormValues(shipping);\n    updateShippingSummaryInformation(shipping, order);\n\n    // And update the PLI-based summary information as well\n    shipping.productLineItems.items.forEach(function (productLineItem) {\n        updateShippingAddressSelector(productLineItem, shipping, order, customer);\n        updatePLIShippingSummaryInformation(productLineItem, shipping, order, options);\n    });\n\n    $('body').trigger('shipping:updateShippingInformation', {\n        order: order,\n        shipping: shipping,\n        customer: customer,\n        options: options\n    });\n}\n\n/**\n * Update the checkout state (single vs. multi-ship)\n * @param {Object} order - checkout model to use as basis of new truth\n */\nfunction updateMultiShipInformation(order) {\n    var $checkoutMain = $('#checkout-main');\n    var $checkbox = $('[name=usingMultiShipping]');\n    var $submitShippingBtn = $('button.submit-shipping');\n    $('.shipping-error .alert-danger').remove();\n\n    if (order.usingMultiShipping) {\n        $checkoutMain.addClass('multi-ship');\n        $checkbox.prop('checked', true);\n    } else {\n        $checkoutMain.removeClass('multi-ship');\n        $checkbox.prop('checked', null);\n        $submitShippingBtn.prop('disabled', null);\n    }\n\n    $('body').trigger('shipping:updateMultiShipInformation', { order: order });\n}\n\n/**\n  * Create an alert to display the error message\n  * @param {Object} message - Error message to display\n  */\nfunction createErrorNotification(message) {\n    var errorHtml = '<div class=\"alert alert-danger alert-dismissible valid-cart-error '\n    + 'fade show\" role=\"alert\">'\n    + '<button type=\"button\" class=\"close\" data-dismiss=\"alert\" aria-label=\"Close\">'\n    + '<span aria-hidden=\"true\">&times;</span>'\n    + '</button>' + message + '</div>';\n\n    $('.shipping-error').append(errorHtml);\n    scrollAnimate($('.shipping-error'));\n}\n\n/**\n * Handle response from the server for valid or invalid form fields.\n * @param {Object} defer - the deferred object which will resolve on success or reject.\n * @param {Object} data - the response data with the invalid form fields or\n *  valid model data.\n */\nfunction shippingFormResponse(defer, data) {\n    var isMultiShip = $('#checkout-main').hasClass('multi-ship');\n    var formSelector = isMultiShip\n        ? '.multi-shipping .active form'\n        : '.single-shipping form';\n\n    // highlight fields with errors\n    if (data.error) {\n        if (data.fieldErrors.length) {\n            data.fieldErrors.forEach(function (error) {\n                if (Object.keys(error).length) {\n                    formHelpers.loadFormErrors(formSelector, error);\n                }\n            });\n            defer.reject(data);\n        }\n\n        if (data.serverErrors && data.serverErrors.length) {\n            $.each(data.serverErrors, function (index, element) {\n                createErrorNotification(element);\n            });\n\n            defer.reject(data);\n        }\n\n        if (data.cartError) {\n            window.location.href = data.redirectUrl;\n            defer.reject();\n        }\n    } else {\n        // Populate the Address Summary\n\n        $('body').trigger('checkout:updateCheckoutView', {\n            order: data.order,\n            customer: data.customer\n        });\n        scrollAnimate($('.payment-form'));\n        defer.resolve(data);\n    }\n}\n/**\n * Clear out all the shipping form values and select the new address in the drop down\n * @param {Object} order - the order object\n */\nfunction clearShippingForms(order) {\n    order.shipping.forEach(function (shipping) {\n        $('input[value=' + shipping.UUID + ']').each(function (formIndex, el) {\n            var form = el.form;\n            if (!form) return;\n\n            $('input[name$=_firstName]', form).val('');\n            $('input[name$=_lastName]', form).val('');\n            $('input[name$=_address1]', form).val('');\n            $('input[name$=_address2]', form).val('');\n            $('input[name$=_city]', form).val('');\n            $('input[name$=_postalCode]', form).val('');\n            $('select[name$=_stateCode],input[name$=_stateCode]', form).val('');\n            $('select[name$=_country]', form).val('');\n\n            $('input[name$=_phone]', form).val('');\n\n            $('input[name$=_isGift]', form).prop('checked', false);\n            $('textarea[name$=_giftMessage]', form).val('');\n            $(form).find('.gift-message').addClass('d-none');\n\n            $(form).attr('data-address-mode', 'new');\n            var addressSelectorDropDown = $('.addressSelector option[value=new]', form);\n            $(addressSelectorDropDown).prop('selected', true);\n        });\n    });\n\n    $('body').trigger('shipping:clearShippingForms', { order: order });\n}\n\n/**\n * Does Ajax call to create a server-side shipment w/ pliUUID & URL\n * @param {string} url - string representation of endpoint URL\n * @param {Object} shipmentData - product line item UUID\n * @returns {Object} - promise value for async call\n */\nfunction createNewShipment(url, shipmentData) {\n    $.spinner().start();\n    return $.ajax({\n        url: url,\n        type: 'post',\n        dataType: 'json',\n        data: shipmentData\n    });\n}\n\n/**\n * Does Ajax call to select shipping method\n * @param {string} url - string representation of endpoint URL\n * @param {Object} urlParams - url params\n * @param {Object} el - element that triggered this call\n */\nfunction selectShippingMethodAjax(url, urlParams, el) {\n    $.spinner().start();\n    $('body').trigger('checkout:beforeShippingMethodSelected');\n    $.ajax({\n        url: url,\n        type: 'post',\n        dataType: 'json',\n        data: urlParams\n    })\n        .done(function (data) {\n            if (data.error) {\n                window.location.href = data.redirectUrl;\n            } else {\n                $('body').trigger(\n                    'checkout:updateCheckoutView',\n                    {\n                        order: data.order,\n                        customer: data.customer,\n                        options: { keepOpen: true },\n                        urlParams: urlParams\n                    }\n                );\n                $('body').trigger(\n                    'checkout:postUpdateCheckoutView',\n                    {\n                        el: el\n                    }\n                );\n            }\n            $('body').trigger('checkout:shippingMethodSelected', data);\n            $.spinner().stop();\n        })\n        .fail(function () {\n            $.spinner().stop();\n        });\n}\n\n/**\n * Hide and show to appropriate elements to show the multi ship shipment cards in the enter view\n * @param {jQuery} element - The shipping content\n */\nfunction enterMultishipView(element) {\n    element.find('.btn-enter-multi-ship').removeClass('d-none');\n\n    element.find('.view-address-block').addClass('d-none');\n    element.find('.shipping-address').addClass('d-none');\n    element.find('.btn-save-multi-ship.save-shipment').addClass('d-none');\n    element.find('.btn-edit-multi-ship').addClass('d-none');\n    element.find('.multi-ship-address-actions').addClass('d-none');\n}\n\n/**\n * Hide and show to appropriate elements to show the multi ship shipment cards in the view mode\n * @param {jQuery} element - The shipping content\n */\nfunction viewMultishipAddress(element) {\n    element.find('.view-address-block').removeClass('d-none');\n    element.find('.btn-edit-multi-ship').removeClass('d-none');\n\n    element.find('.shipping-address').addClass('d-none');\n    element.find('.btn-save-multi-ship.save-shipment').addClass('d-none');\n    element.find('.btn-enter-multi-ship').addClass('d-none');\n    element.find('.multi-ship-address-actions').addClass('d-none');\n}\n\n/**\n * Hide and show to appropriate elements that allows the user to edit multi ship address information\n * @param {jQuery} element - The shipping content\n */\nfunction editMultiShipAddress(element) {\n    // Show\n    element.find('.shipping-address').removeClass('d-none');\n    element.find('.btn-save-multi-ship.save-shipment').removeClass('d-none');\n\n    // Hide\n    element.find('.view-address-block').addClass('d-none');\n    element.find('.btn-enter-multi-ship').addClass('d-none');\n    element.find('.btn-edit-multi-ship').addClass('d-none');\n    element.find('.multi-ship-address-actions').addClass('d-none');\n\n    $('body').trigger('shipping:editMultiShipAddress', { element: element, form: element.find('.shipping-form') });\n}\n\n/**\n * perform the proper actions once a user has clicked enter address or edit address for a shipment\n * @param {jQuery} element - The shipping content\n * @param {string} mode - the address mode\n */\nfunction editOrEnterMultiShipInfo(element, mode) {\n    var form = $(element).closest('form');\n    var root = $(element).closest('.shipping-content');\n\n    $('body').trigger('shipping:updateDataAddressMode', { form: form, mode: mode });\n\n    editMultiShipAddress(root);\n\n    var addressInfo = addressHelpers.methods.getAddressFieldsFromUI(form);\n\n    var savedState = {\n        UUID: $('input[name=shipmentUUID]', form).val(),\n        shippingAddress: addressInfo\n    };\n\n    root.data('saved-state', JSON.stringify(savedState));\n}\n\nmodule.exports = {\n    methods: {\n        updateShippingAddressSelector: updateShippingAddressSelector,\n        updateShippingAddressFormValues: updateShippingAddressFormValues,\n        updateShippingMethods: updateShippingMethods,\n        updateShippingSummaryInformation: updateShippingSummaryInformation,\n        updatePLIShippingSummaryInformation: updatePLIShippingSummaryInformation,\n        updateProductLineItemShipmentUUIDs: updateProductLineItemShipmentUUIDs,\n        updateShippingInformation: updateShippingInformation,\n        updateMultiShipInformation: updateMultiShipInformation,\n        shippingFormResponse: shippingFormResponse,\n        createNewShipment: createNewShipment,\n        selectShippingMethodAjax: selectShippingMethodAjax,\n        updateShippingMethodList: updateShippingMethodList,\n        clearShippingForms: clearShippingForms,\n        editMultiShipAddress: editMultiShipAddress,\n        editOrEnterMultiShipInfo: editOrEnterMultiShipInfo,\n        createErrorNotification: createErrorNotification,\n        viewMultishipAddress: viewMultishipAddress\n    },\n\n    selectShippingMethod: function () {\n        var baseObj = this;\n\n        $('.shipping-method-list').change(function () {\n            var $shippingForm = $(this).parents('form');\n            var methodID = $(':checked', this).val();\n            var shipmentUUID = $shippingForm.find('[name=shipmentUUID]').val();\n            var urlParams = addressHelpers.methods.getAddressFieldsFromUI($shippingForm);\n            urlParams.shipmentUUID = shipmentUUID;\n            urlParams.methodID = methodID;\n            urlParams.isGift = $shippingForm.find('.gift').prop('checked');\n            urlParams.giftMessage = $shippingForm.find('textarea[name$=_giftMessage]').val();\n\n            var url = $(this).data('select-shipping-method-url');\n\n            if (baseObj.methods && baseObj.methods.selectShippingMethodAjax) {\n                baseObj.methods.selectShippingMethodAjax(url, urlParams, $(this));\n            } else {\n                selectShippingMethodAjax(url, urlParams, $(this));\n            }\n        });\n    },\n\n    toggleMultiship: function () {\n        var baseObj = this;\n\n        $('input[name=\"usingMultiShipping\"]').on('change', function () {\n            var url = $('.multi-shipping-checkbox-block form').attr('action');\n            var usingMultiShip = this.checked;\n\n            $.ajax({\n                url: url,\n                type: 'post',\n                dataType: 'json',\n                data: { usingMultiShip: usingMultiShip },\n                success: function (response) {\n                    if (response.error) {\n                        window.location.href = response.redirectUrl;\n                    } else {\n                        $('body').trigger('checkout:updateCheckoutView', {\n                            order: response.order,\n                            customer: response.customer\n                        });\n\n                        if ($('#checkout-main').data('customer-type') === 'guest') {\n                            if (baseObj.methods && baseObj.methods.clearShippingForms) {\n                                baseObj.methods.clearShippingForms(response.order);\n                            } else {\n                                clearShippingForms(response.order);\n                            }\n                        } else {\n                            response.order.shipping.forEach(function (shipping) {\n                                $('input[value=' + shipping.UUID + ']').each(function (formIndex, el) {\n                                    var form = el.form;\n                                    if (!form) return;\n\n                                    $(form).attr('data-address-mode', 'edit');\n                                    var addressSelectorDropDown = $(form).find('.addressSelector option[value=\"ab_' + shipping.matchingAddressId + '\"]');\n                                    $(addressSelectorDropDown).prop('selected', true);\n                                    $('input[name$=_isGift]', form).prop('checked', false);\n                                    $('textarea[name$=_giftMessage]', form).val('');\n                                    $(form).find('.gift-message').addClass('d-none');\n                                });\n                            });\n                        }\n\n                        if (usingMultiShip) {\n                            $('body').trigger('shipping:selectMultiShipping', { data: response });\n                        } else {\n                            $('body').trigger('shipping:selectSingleShipping', { data: response });\n                        }\n                    }\n\n                    $.spinner().stop();\n                },\n                error: function () {\n                    $.spinner().stop();\n                }\n            });\n        });\n    },\n\n    selectSingleShipping: function () {\n        $('body').on('shipping:selectSingleShipping', function () {\n            $('.single-shipping .shipping-address').removeClass('d-none');\n        });\n    },\n\n    selectMultiShipping: function () {\n        var baseObj = this;\n\n        $('body').on('shipping:selectMultiShipping', function (e, data) {\n            $('.multi-shipping .shipping-address').addClass('d-none');\n\n            data.data.order.shipping.forEach(function (shipping) {\n                var element = $('.multi-shipping .card[data-shipment-uuid=\"' + shipping.UUID + '\"]');\n\n                if (shipping.shippingAddress) {\n                    if (baseObj.methods && baseObj.methods.viewMultishipAddress) {\n                        baseObj.methods.viewMultishipAddress($(element));\n                    } else {\n                        viewMultishipAddress($(element));\n                    }\n                } else {\n                    /* eslint-disable no-lonely-if */\n                    if (baseObj.methods && baseObj.methods.enterMultishipView) {\n                        baseObj.methods.enterMultishipView($(element));\n                    } else {\n                        enterMultishipView($(element));\n                    }\n                    /* eslint-enable no-lonely-if */\n                }\n            });\n        });\n    },\n\n    selectSingleShipAddress: function () {\n        $('.single-shipping .addressSelector').on('change', function () {\n            var form = $(this).parents('form')[0];\n            var selectedOption = $('option:selected', this);\n            var attrs = selectedOption.data();\n            var shipmentUUID = selectedOption[0].value;\n            var originalUUID = $('input[name=shipmentUUID]', form).val();\n            var element;\n            Object.keys(attrs).forEach(function (attr) {\n                element = attr === 'countryCode' ? 'country' : attr;\n                $('[name$=' + element + ']', form).val(attrs[attr]);\n            });\n            $('[name$=stateCode]', form).trigger('change');\n            if (shipmentUUID === 'new') {\n                $(form).attr('data-address-mode', 'new');\n                $(form).find('.shipping-address-block').removeClass('d-none');\n            } else if (shipmentUUID === originalUUID) {\n                $(form).attr('data-address-mode', 'shipment');\n            } else if (shipmentUUID.indexOf('ab_') === 0) {\n                $(form).attr('data-address-mode', 'customer');\n            } else {\n                $(form).attr('data-address-mode', 'edit');\n            }\n        });\n    },\n\n    selectMultiShipAddress: function () {\n        var baseObj = this;\n\n        $('.multi-shipping .addressSelector').on('change', function () {\n            var form = $(this).closest('form');\n            var selectedOption = $('option:selected', this);\n            var attrs = selectedOption.data();\n            var shipmentUUID = selectedOption[0].value;\n            var originalUUID = $('input[name=shipmentUUID]', form).val();\n            var pliUUID = $('input[name=productLineItemUUID]', form).val();\n            var createNewShipmentScoped = baseObj.methods && baseObj.methods.createNewShipment ? baseObj.methods.createNewShipment : createNewShipment;\n\n            var element;\n            Object.keys(attrs).forEach(function (attr) {\n                if (attr === 'isGift') {\n                    $('[name$=' + attr + ']', form).prop('checked', attrs[attr]);\n                    $('[name$=' + attr + ']', form).trigger('change');\n                } else {\n                    element = attr === 'countryCode' ? 'country' : attr;\n                    $('[name$=' + element + ']', form).val(attrs[attr]);\n                }\n            });\n\n            if (shipmentUUID === 'new' && pliUUID) {\n                var createShipmentUrl = $(this).attr('data-create-shipment-url');\n                createNewShipmentScoped(createShipmentUrl, { productLineItemUUID: pliUUID })\n                    .done(function (response) {\n                        $.spinner().stop();\n                        if (response.error) {\n                            if (response.redirectUrl) {\n                                window.location.href = response.redirectUrl;\n                            }\n                            return;\n                        }\n\n                        $('body').trigger(\n                            'checkout:updateCheckoutView',\n                            {\n                                order: response.order,\n                                customer: response.customer,\n                                options: { keepOpen: true }\n                            }\n                        );\n\n                        $(form).attr('data-address-mode', 'new');\n                    })\n                    .fail(function () {\n                        $.spinner().stop();\n                    });\n            } else if (shipmentUUID === originalUUID) {\n                $('select[name$=stateCode]', form).trigger('change');\n                $(form).attr('data-address-mode', 'shipment');\n            } else if (shipmentUUID.indexOf('ab_') === 0) {\n                var url = $(form).attr('action');\n                var serializedData = $(form).serialize();\n                createNewShipmentScoped(url, serializedData)\n                    .done(function (response) {\n                        $.spinner().stop();\n                        if (response.error) {\n                            if (response.redirectUrl) {\n                                window.location.href = response.redirectUrl;\n                            }\n                            return;\n                        }\n\n                        $('body').trigger(\n                            'checkout:updateCheckoutView',\n                            {\n                                order: response.order,\n                                customer: response.customer,\n                                options: { keepOpen: true }\n                            }\n                        );\n\n                        $(form).attr('data-address-mode', 'customer');\n                        var $rootEl = $(form).closest('.shipping-content');\n                        editMultiShipAddress($rootEl);\n                    })\n                    .fail(function () {\n                        $.spinner().stop();\n                    });\n            } else {\n                var updatePLIShipmentUrl = $(form).attr('action');\n                var serializedAddress = $(form).serialize();\n                createNewShipmentScoped(updatePLIShipmentUrl, serializedAddress)\n                    .done(function (response) {\n                        $.spinner().stop();\n                        if (response.error) {\n                            if (response.redirectUrl) {\n                                window.location.href = response.redirectUrl;\n                            }\n                            return;\n                        }\n\n                        $('body').trigger(\n                            'checkout:updateCheckoutView',\n                            {\n                                order: response.order,\n                                customer: response.customer,\n                                options: { keepOpen: true }\n                            }\n                        );\n\n                        $(form).attr('data-address-mode', 'edit');\n                    })\n                    .fail(function () {\n                        $.spinner().stop();\n                    });\n            }\n        });\n    },\n\n    updateShippingList: function () {\n        var baseObj = this;\n\n        $('select[name$=\"shippingAddress_addressFields_states_stateCode\"]')\n            .on('change', function (e) {\n                if (baseObj.methods && baseObj.methods.updateShippingMethodList) {\n                    baseObj.methods.updateShippingMethodList($(e.currentTarget.form));\n                } else {\n                    updateShippingMethodList($(e.currentTarget.form));\n                }\n            });\n    },\n\n    updateDataAddressMode: function () {\n        $('body').on('shipping:updateDataAddressMode', function (e, data) {\n            $(data.form).attr('data-address-mode', data.mode);\n        });\n    },\n\n    enterMultiShipInfo: function () {\n        var baseObj = this;\n\n        $('.btn-enter-multi-ship').on('click', function (e) {\n            e.preventDefault();\n\n            if (baseObj.methods && baseObj.methods.editOrEnterMultiShipInfo) {\n                baseObj.methods.editOrEnterMultiShipInfo($(this), 'new');\n            } else {\n                editOrEnterMultiShipInfo($(this), 'new');\n            }\n        });\n    },\n\n    editMultiShipInfo: function () {\n        var baseObj = this;\n\n        $('.btn-edit-multi-ship').on('click', function (e) {\n            e.preventDefault();\n\n            if (baseObj.methods && baseObj.methods.editOrEnterMultiShipInfo) {\n                baseObj.methods.editOrEnterMultiShipInfo($(this), 'edit');\n            } else {\n                editOrEnterMultiShipInfo($(this), 'edit');\n            }\n        });\n    },\n\n    saveMultiShipInfo: function () {\n        var baseObj = this;\n\n        $('.btn-save-multi-ship').on('click', function (e) {\n            e.preventDefault();\n\n            // Save address to checkoutAddressBook\n            var form = $(this).closest('form');\n            var $rootEl = $(this).closest('.shipping-content');\n            var data = $(form).serialize();\n            var url = $(form).attr('action');\n\n            $rootEl.spinner().start();\n            $.ajax({\n                url: url,\n                type: 'post',\n                dataType: 'json',\n                data: data\n            })\n                .done(function (response) {\n                    formHelpers.clearPreviousErrors(form);\n                    if (response.error) {\n                        if (response.fieldErrors && response.fieldErrors.length) {\n                            response.fieldErrors.forEach(function (error) {\n                                if (Object.keys(error).length) {\n                                    formHelpers.loadFormErrors(form, error);\n                                }\n                            });\n                        } else if (response.serverErrors && response.serverErrors.length) {\n                            $.each(response.serverErrors, function (index, element) {\n                                createErrorNotification(element);\n                            });\n                        } else if (response.redirectUrl) {\n                            window.location.href = response.redirectUrl;\n                        }\n                    } else {\n                        // Update UI from response\n                        $('body').trigger(\n                            'checkout:updateCheckoutView',\n                            {\n                                order: response.order,\n                                customer: response.customer\n                            }\n                        );\n\n                        if (baseObj.methods && baseObj.methods.viewMultishipAddress) {\n                            baseObj.methods.viewMultishipAddress($rootEl);\n                        } else {\n                            viewMultishipAddress($rootEl);\n                        }\n                    }\n\n                    if (response.order && response.order.shippable) {\n                        $('button.submit-shipping').attr('disabled', null);\n                    }\n\n                    $rootEl.spinner().stop();\n                })\n                .fail(function (err) {\n                    if (err.responseJSON.redirectUrl) {\n                        window.location.href = err.responseJSON.redirectUrl;\n                    }\n\n                    $rootEl.spinner().stop();\n                });\n\n            return false;\n        });\n    },\n\n    cancelMultiShipAddress: function () {\n        var baseObj = this;\n\n        $('.btn-cancel-multi-ship-address').on('click', function (e) {\n            e.preventDefault();\n\n            var form = $(this).closest('form');\n            var $rootEl = $(this).closest('.shipping-content');\n            var restoreState = $rootEl.data('saved-state');\n\n            // Should clear out changes / restore previous state\n            if (restoreState) {\n                var restoreStateObj = JSON.parse(restoreState);\n                var originalStateCode = restoreStateObj.shippingAddress.stateCode;\n                var stateCode = $('[name$=_stateCode]', form).val();\n\n                if (baseObj.methods && baseObj.methods.updateShippingAddressFormValues) {\n                    baseObj.methods.updateShippingAddressFormValues(restoreStateObj);\n                } else {\n                    updateShippingAddressFormValues(restoreStateObj);\n                }\n\n                if (stateCode !== originalStateCode) {\n                    $('[data-action=save]', form).trigger('click');\n                } else {\n                    $(form).attr('data-address-mode', 'edit');\n                    if (baseObj.methods && baseObj.methods.editMultiShipAddress) {\n                        baseObj.methods.editMultiShipAddress($rootEl);\n                    } else {\n                        editMultiShipAddress($rootEl);\n                    }\n                }\n            }\n\n            return false;\n        });\n    },\n\n    isGift: function () {\n        $('.gift').on('change', function (e) {\n            e.preventDefault();\n            var form = $(this).closest('form');\n\n            if (this.checked) {\n                $(form).find('.gift-message').removeClass('d-none');\n            } else {\n                $(form).find('.gift-message').addClass('d-none');\n                $(form).find('.gift-message').val('');\n            }\n        });\n    }\n};\n\n\n//# sourceURL=webpack://int_aurus_sfra/../storefront-reference-architecture-master/cartridges/app_storefront_base/cartridge/client/default/js/checkout/shipping.js?");

/***/ }),

/***/ "../storefront-reference-architecture-master/cartridges/app_storefront_base/cartridge/client/default/js/checkout/summary.js":
/*!**********************************************************************************************************************************!*\
  !*** ../storefront-reference-architecture-master/cartridges/app_storefront_base/cartridge/client/default/js/checkout/summary.js ***!
  \**********************************************************************************************************************************/
/***/ (function(module) {

"use strict";
eval("\n\n/**\n * updates the totals summary\n * @param {Array} totals - the totals data\n */\nfunction updateTotals(totals) {\n    $('.shipping-total-cost').text(totals.totalShippingCost);\n    $('.tax-total').text(totals.totalTax);\n    $('.sub-total').text(totals.subTotal);\n    $('.grand-total-sum').text(totals.grandTotal);\n\n    if (totals.orderLevelDiscountTotal.value > 0) {\n        $('.order-discount').removeClass('hide-order-discount');\n        $('.order-discount-total').text('- ' + totals.orderLevelDiscountTotal.formatted);\n    } else {\n        $('.order-discount').addClass('hide-order-discount');\n    }\n\n    if (totals.shippingLevelDiscountTotal.value > 0) {\n        $('.shipping-discount').removeClass('hide-shipping-discount');\n        $('.shipping-discount-total').text('- '\n            + totals.shippingLevelDiscountTotal.formatted);\n    } else {\n        $('.shipping-discount').addClass('hide-shipping-discount');\n    }\n}\n\n/**\n * updates the order product shipping summary for an order model\n * @param {Object} order - the order model\n */\nfunction updateOrderProductSummaryInformation(order) {\n    var $productSummary = $('<div />');\n    order.shipping.forEach(function (shipping) {\n        shipping.productLineItems.items.forEach(function (lineItem) {\n            var pli = $('[data-product-line-item=' + lineItem.UUID + ']');\n            $productSummary.append(pli);\n        });\n\n        var address = shipping.shippingAddress || {};\n        var selectedMethod = shipping.selectedShippingMethod;\n\n        var nameLine = address.firstName ? address.firstName + ' ' : '';\n        if (address.lastName) nameLine += address.lastName;\n\n        var address1Line = address.address1;\n        var address2Line = address.address2;\n\n        var phoneLine = address.phone;\n\n        var shippingCost = selectedMethod ? selectedMethod.shippingCost : '';\n        var methodNameLine = selectedMethod ? selectedMethod.displayName : '';\n        var methodArrivalTime = selectedMethod && selectedMethod.estimatedArrivalTime\n            ? '( ' + selectedMethod.estimatedArrivalTime + ' )'\n            : '';\n\n        var tmpl = $('#pli-shipping-summary-template').clone();\n\n        if (shipping.productLineItems.items && shipping.productLineItems.items.length > 1) {\n            $('h5 > span').text(' - ' + shipping.productLineItems.items.length + ' '\n                + order.resources.items);\n        } else {\n            $('h5 > span').text('');\n        }\n\n        var stateRequiredAttr = $('#shippingState').attr('required');\n        var isRequired = stateRequiredAttr !== undefined && stateRequiredAttr !== false;\n        var stateExists = (shipping.shippingAddress && shipping.shippingAddress.stateCode)\n            ? shipping.shippingAddress.stateCode\n            : false;\n        var stateBoolean = false;\n        if ((isRequired && stateExists) || (!isRequired)) {\n            stateBoolean = true;\n        }\n\n        var shippingForm = $('.multi-shipping input[name=\"shipmentUUID\"][value=\"' + shipping.UUID + '\"]').parent();\n\n        if (shipping.shippingAddress\n            && shipping.shippingAddress.firstName\n            && shipping.shippingAddress.address1\n            && shipping.shippingAddress.city\n            && stateBoolean\n            && shipping.shippingAddress.countryCode\n            && (shipping.shippingAddress.phone || shipping.productLineItems.items[0].fromStoreId)) {\n            $('.ship-to-name', tmpl).text(nameLine);\n            $('.ship-to-address1', tmpl).text(address1Line);\n            $('.ship-to-address2', tmpl).text(address2Line);\n            $('.ship-to-city', tmpl).text(address.city);\n            if (address.stateCode) {\n                $('.ship-to-st', tmpl).text(address.stateCode);\n            }\n            $('.ship-to-zip', tmpl).text(address.postalCode);\n            $('.ship-to-phone', tmpl).text(phoneLine);\n\n            if (!address2Line) {\n                $('.ship-to-address2', tmpl).hide();\n            }\n\n            if (!phoneLine) {\n                $('.ship-to-phone', tmpl).hide();\n            }\n\n            shippingForm.find('.ship-to-message').text('');\n        } else {\n            shippingForm.find('.ship-to-message').text(order.resources.addressIncomplete);\n        }\n\n        if (shipping.isGift) {\n            $('.gift-message-summary', tmpl).text(shipping.giftMessage);\n        } else {\n            $('.gift-summary', tmpl).addClass('d-none');\n        }\n\n        // checking h5 title shipping to or pickup\n        var $shippingAddressLabel = $('.shipping-header-text', tmpl);\n        $('body').trigger(\n            'shipping:updateAddressLabelText',\n            { selectedShippingMethod: selectedMethod, resources: order.resources, shippingAddressLabel: $shippingAddressLabel }\n        );\n\n        if (shipping.selectedShippingMethod) {\n            $('.display-name', tmpl).text(methodNameLine);\n            $('.arrival-time', tmpl).text(methodArrivalTime);\n            $('.price', tmpl).text(shippingCost);\n        }\n\n        var $shippingSummary = $('<div class=\"multi-shipping\" data-shipment-summary=\"'\n            + shipping.UUID + '\" />');\n        $shippingSummary.html(tmpl.html());\n        $productSummary.append($shippingSummary);\n    });\n\n    $('.product-summary-block').html($productSummary.html());\n\n    // Also update the line item prices, as they might have been altered\n    $('.grand-total-price').text(order.totals.subTotal);\n    order.items.items.forEach(function (item) {\n        if (item.priceTotal && item.priceTotal.renderedPrice) {\n            $('.item-total-' + item.UUID).empty().append(item.priceTotal.renderedPrice);\n        }\n    });\n}\n\nmodule.exports = {\n    updateTotals: updateTotals,\n    updateOrderProductSummaryInformation: updateOrderProductSummaryInformation\n};\n\n\n//# sourceURL=webpack://int_aurus_sfra/../storefront-reference-architecture-master/cartridges/app_storefront_base/cartridge/client/default/js/checkout/summary.js?");

/***/ }),

/***/ "../storefront-reference-architecture-master/cartridges/app_storefront_base/cartridge/client/default/js/components/cleave.js":
/*!***********************************************************************************************************************************!*\
  !*** ../storefront-reference-architecture-master/cartridges/app_storefront_base/cartridge/client/default/js/components/cleave.js ***!
  \***********************************************************************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval("\n\nvar Cleave = (__webpack_require__(/*! cleave.js */ \"../storefront-reference-architecture-master/node_modules/cleave.js/dist/cleave-esm.js\")[\"default\"]);\n\nmodule.exports = {\n    handleCreditCardNumber: function (cardFieldSelector, cardTypeSelector) {\n        var cleave = new Cleave(cardFieldSelector, {\n            creditCard: true,\n            onCreditCardTypeChanged: function (type) {\n                var creditCardTypes = {\n                    visa: 'Visa',\n                    mastercard: 'Master Card',\n                    amex: 'Amex',\n                    discover: 'Discover',\n                    unknown: 'Unknown'\n                };\n\n                var cardType = creditCardTypes[Object.keys(creditCardTypes).indexOf(type) > -1\n                    ? type\n                    : 'unknown'];\n                $(cardTypeSelector).val(cardType);\n                $('.card-number-wrapper').attr('data-type', type);\n                if (type === 'visa' || type === 'mastercard' || type === 'discover') {\n                    $('#securityCode').attr('maxlength', 3);\n                } else {\n                    $('#securityCode').attr('maxlength', 4);\n                }\n            }\n        });\n\n        $(cardFieldSelector).data('cleave', cleave);\n    },\n\n    serializeData: function (form) {\n        var serializedArray = form.serializeArray();\n\n        serializedArray.forEach(function (item) {\n            if (item.name.indexOf('cardNumber') > -1) {\n                item.value = $('#cardNumber').data('cleave').getRawValue(); // eslint-disable-line\n            }\n        });\n\n        return $.param(serializedArray);\n    }\n};\n\n\n//# sourceURL=webpack://int_aurus_sfra/../storefront-reference-architecture-master/cartridges/app_storefront_base/cartridge/client/default/js/components/cleave.js?");

/***/ }),

/***/ "../storefront-reference-architecture-master/cartridges/app_storefront_base/cartridge/client/default/js/components/errorNotification.js":
/*!**********************************************************************************************************************************************!*\
  !*** ../storefront-reference-architecture-master/cartridges/app_storefront_base/cartridge/client/default/js/components/errorNotification.js ***!
  \**********************************************************************************************************************************************/
/***/ (function(module) {

"use strict";
eval("\n\nmodule.exports = function (element, message) {\n    var errorHtml = '<div class=\"alert alert-danger alert-dismissible '\n        + 'fade show\" role=\"alert\">'\n        + '<button type=\"button\" class=\"close\" data-dismiss=\"alert\" aria-label=\"Close\">'\n        + '<span aria-hidden=\"true\">&times;</span>'\n        + '</button>' + message + '</div>';\n\n    $(element).append(errorHtml);\n};\n\n\n//# sourceURL=webpack://int_aurus_sfra/../storefront-reference-architecture-master/cartridges/app_storefront_base/cartridge/client/default/js/components/errorNotification.js?");

/***/ }),

/***/ "../storefront-reference-architecture-master/cartridges/app_storefront_base/cartridge/client/default/js/components/scrollAnimate.js":
/*!******************************************************************************************************************************************!*\
  !*** ../storefront-reference-architecture-master/cartridges/app_storefront_base/cartridge/client/default/js/components/scrollAnimate.js ***!
  \******************************************************************************************************************************************/
/***/ (function(module) {

"use strict";
eval("\n\nmodule.exports = function (element) {\n    var position = element && element.length ? element.offset().top : 0;\n    $('html, body').animate({\n        scrollTop: position\n    }, 500);\n    if (!element) {\n        $('.logo-home').focus();\n    }\n};\n\n\n//# sourceURL=webpack://int_aurus_sfra/../storefront-reference-architecture-master/cartridges/app_storefront_base/cartridge/client/default/js/components/scrollAnimate.js?");

/***/ }),

/***/ "../storefront-reference-architecture-master/cartridges/app_storefront_base/cartridge/client/default/js/util.js":
/*!**********************************************************************************************************************!*\
  !*** ../storefront-reference-architecture-master/cartridges/app_storefront_base/cartridge/client/default/js/util.js ***!
  \**********************************************************************************************************************/
/***/ (function(module) {

"use strict";
eval("\n\nmodule.exports = function (include) {\n    if (typeof include === 'function') {\n        include();\n    } else if (typeof include === 'object') {\n        Object.keys(include).forEach(function (key) {\n            if (typeof include[key] === 'function') {\n                include[key]();\n            }\n        });\n    }\n};\n\n\n//# sourceURL=webpack://int_aurus_sfra/../storefront-reference-architecture-master/cartridges/app_storefront_base/cartridge/client/default/js/util.js?");

/***/ }),

/***/ "../storefront-reference-architecture-master/node_modules/cleave.js/dist/cleave-esm.js":
/*!*********************************************************************************************!*\
  !*** ../storefront-reference-architecture-master/node_modules/cleave.js/dist/cleave-esm.js ***!
  \*********************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\nvar commonjsGlobal = typeof window !== 'undefined' ? window : typeof __webpack_require__.g !== 'undefined' ? __webpack_require__.g : typeof self !== 'undefined' ? self : {};\n\nvar NumeralFormatter = function (numeralDecimalMark,\n                                 numeralIntegerScale,\n                                 numeralDecimalScale,\n                                 numeralThousandsGroupStyle,\n                                 numeralPositiveOnly,\n                                 stripLeadingZeroes,\n                                 prefix,\n                                 signBeforePrefix,\n                                 tailPrefix,\n                                 delimiter) {\n    var owner = this;\n\n    owner.numeralDecimalMark = numeralDecimalMark || '.';\n    owner.numeralIntegerScale = numeralIntegerScale > 0 ? numeralIntegerScale : 0;\n    owner.numeralDecimalScale = numeralDecimalScale >= 0 ? numeralDecimalScale : 2;\n    owner.numeralThousandsGroupStyle = numeralThousandsGroupStyle || NumeralFormatter.groupStyle.thousand;\n    owner.numeralPositiveOnly = !!numeralPositiveOnly;\n    owner.stripLeadingZeroes = stripLeadingZeroes !== false;\n    owner.prefix = (prefix || prefix === '') ? prefix : '';\n    owner.signBeforePrefix = !!signBeforePrefix;\n    owner.tailPrefix = !!tailPrefix;\n    owner.delimiter = (delimiter || delimiter === '') ? delimiter : ',';\n    owner.delimiterRE = delimiter ? new RegExp('\\\\' + delimiter, 'g') : '';\n};\n\nNumeralFormatter.groupStyle = {\n    thousand: 'thousand',\n    lakh:     'lakh',\n    wan:      'wan',\n    none:     'none'    \n};\n\nNumeralFormatter.prototype = {\n    getRawValue: function (value) {\n        return value.replace(this.delimiterRE, '').replace(this.numeralDecimalMark, '.');\n    },\n\n    format: function (value) {\n        var owner = this, parts, partSign, partSignAndPrefix, partInteger, partDecimal = '';\n\n        // strip alphabet letters\n        value = value.replace(/[A-Za-z]/g, '')\n            // replace the first decimal mark with reserved placeholder\n            .replace(owner.numeralDecimalMark, 'M')\n\n            // strip non numeric letters except minus and \"M\"\n            // this is to ensure prefix has been stripped\n            .replace(/[^\\dM-]/g, '')\n\n            // replace the leading minus with reserved placeholder\n            .replace(/^\\-/, 'N')\n\n            // strip the other minus sign (if present)\n            .replace(/\\-/g, '')\n\n            // replace the minus sign (if present)\n            .replace('N', owner.numeralPositiveOnly ? '' : '-')\n\n            // replace decimal mark\n            .replace('M', owner.numeralDecimalMark);\n\n        // strip any leading zeros\n        if (owner.stripLeadingZeroes) {\n            value = value.replace(/^(-)?0+(?=\\d)/, '$1');\n        }\n\n        partSign = value.slice(0, 1) === '-' ? '-' : '';\n        if (typeof owner.prefix != 'undefined') {\n            if (owner.signBeforePrefix) {\n                partSignAndPrefix = partSign + owner.prefix;\n            } else {\n                partSignAndPrefix = owner.prefix + partSign;\n            }\n        } else {\n            partSignAndPrefix = partSign;\n        }\n        \n        partInteger = value;\n\n        if (value.indexOf(owner.numeralDecimalMark) >= 0) {\n            parts = value.split(owner.numeralDecimalMark);\n            partInteger = parts[0];\n            partDecimal = owner.numeralDecimalMark + parts[1].slice(0, owner.numeralDecimalScale);\n        }\n\n        if(partSign === '-') {\n            partInteger = partInteger.slice(1);\n        }\n\n        if (owner.numeralIntegerScale > 0) {\n          partInteger = partInteger.slice(0, owner.numeralIntegerScale);\n        }\n\n        switch (owner.numeralThousandsGroupStyle) {\n        case NumeralFormatter.groupStyle.lakh:\n            partInteger = partInteger.replace(/(\\d)(?=(\\d\\d)+\\d$)/g, '$1' + owner.delimiter);\n\n            break;\n\n        case NumeralFormatter.groupStyle.wan:\n            partInteger = partInteger.replace(/(\\d)(?=(\\d{4})+$)/g, '$1' + owner.delimiter);\n\n            break;\n\n        case NumeralFormatter.groupStyle.thousand:\n            partInteger = partInteger.replace(/(\\d)(?=(\\d{3})+$)/g, '$1' + owner.delimiter);\n\n            break;\n        }\n\n        if (owner.tailPrefix) {\n            return partSign + partInteger.toString() + (owner.numeralDecimalScale > 0 ? partDecimal.toString() : '') + owner.prefix;\n        }\n\n        return partSignAndPrefix + partInteger.toString() + (owner.numeralDecimalScale > 0 ? partDecimal.toString() : '');\n    }\n};\n\nvar NumeralFormatter_1 = NumeralFormatter;\n\nvar DateFormatter = function (datePattern, dateMin, dateMax) {\n    var owner = this;\n\n    owner.date = [];\n    owner.blocks = [];\n    owner.datePattern = datePattern;\n    owner.dateMin = dateMin\n      .split('-')\n      .reverse()\n      .map(function(x) {\n        return parseInt(x, 10);\n      });\n    if (owner.dateMin.length === 2) owner.dateMin.unshift(0);\n\n    owner.dateMax = dateMax\n      .split('-')\n      .reverse()\n      .map(function(x) {\n        return parseInt(x, 10);\n      });\n    if (owner.dateMax.length === 2) owner.dateMax.unshift(0);\n    \n    owner.initBlocks();\n};\n\nDateFormatter.prototype = {\n    initBlocks: function () {\n        var owner = this;\n        owner.datePattern.forEach(function (value) {\n            if (value === 'Y') {\n                owner.blocks.push(4);\n            } else {\n                owner.blocks.push(2);\n            }\n        });\n    },\n\n    getISOFormatDate: function () {\n        var owner = this,\n            date = owner.date;\n\n        return date[2] ? (\n            date[2] + '-' + owner.addLeadingZero(date[1]) + '-' + owner.addLeadingZero(date[0])\n        ) : '';\n    },\n\n    getBlocks: function () {\n        return this.blocks;\n    },\n\n    getValidatedDate: function (value) {\n        var owner = this, result = '';\n\n        value = value.replace(/[^\\d]/g, '');\n\n        owner.blocks.forEach(function (length, index) {\n            if (value.length > 0) {\n                var sub = value.slice(0, length),\n                    sub0 = sub.slice(0, 1),\n                    rest = value.slice(length);\n\n                switch (owner.datePattern[index]) {\n                case 'd':\n                    if (sub === '00') {\n                        sub = '01';\n                    } else if (parseInt(sub0, 10) > 3) {\n                        sub = '0' + sub0;\n                    } else if (parseInt(sub, 10) > 31) {\n                        sub = '31';\n                    }\n\n                    break;\n\n                case 'm':\n                    if (sub === '00') {\n                        sub = '01';\n                    } else if (parseInt(sub0, 10) > 1) {\n                        sub = '0' + sub0;\n                    } else if (parseInt(sub, 10) > 12) {\n                        sub = '12';\n                    }\n\n                    break;\n                }\n\n                result += sub;\n\n                // update remaining string\n                value = rest;\n            }\n        });\n\n        return this.getFixedDateString(result);\n    },\n\n    getFixedDateString: function (value) {\n        var owner = this, datePattern = owner.datePattern, date = [],\n            dayIndex = 0, monthIndex = 0, yearIndex = 0,\n            dayStartIndex = 0, monthStartIndex = 0, yearStartIndex = 0,\n            day, month, year, fullYearDone = false;\n\n        // mm-dd || dd-mm\n        if (value.length === 4 && datePattern[0].toLowerCase() !== 'y' && datePattern[1].toLowerCase() !== 'y') {\n            dayStartIndex = datePattern[0] === 'd' ? 0 : 2;\n            monthStartIndex = 2 - dayStartIndex;\n            day = parseInt(value.slice(dayStartIndex, dayStartIndex + 2), 10);\n            month = parseInt(value.slice(monthStartIndex, monthStartIndex + 2), 10);\n\n            date = this.getFixedDate(day, month, 0);\n        }\n\n        // yyyy-mm-dd || yyyy-dd-mm || mm-dd-yyyy || dd-mm-yyyy || dd-yyyy-mm || mm-yyyy-dd\n        if (value.length === 8) {\n            datePattern.forEach(function (type, index) {\n                switch (type) {\n                case 'd':\n                    dayIndex = index;\n                    break;\n                case 'm':\n                    monthIndex = index;\n                    break;\n                default:\n                    yearIndex = index;\n                    break;\n                }\n            });\n\n            yearStartIndex = yearIndex * 2;\n            dayStartIndex = (dayIndex <= yearIndex) ? dayIndex * 2 : (dayIndex * 2 + 2);\n            monthStartIndex = (monthIndex <= yearIndex) ? monthIndex * 2 : (monthIndex * 2 + 2);\n\n            day = parseInt(value.slice(dayStartIndex, dayStartIndex + 2), 10);\n            month = parseInt(value.slice(monthStartIndex, monthStartIndex + 2), 10);\n            year = parseInt(value.slice(yearStartIndex, yearStartIndex + 4), 10);\n\n            fullYearDone = value.slice(yearStartIndex, yearStartIndex + 4).length === 4;\n\n            date = this.getFixedDate(day, month, year);\n        }\n\n        // mm-yy || yy-mm\n        if (value.length === 4 && (datePattern[0] === 'y' || datePattern[1] === 'y')) {\n            monthStartIndex = datePattern[0] === 'm' ? 0 : 2;\n            yearStartIndex = 2 - monthStartIndex;\n            month = parseInt(value.slice(monthStartIndex, monthStartIndex + 2), 10);\n            year = parseInt(value.slice(yearStartIndex, yearStartIndex + 2), 10);\n\n            fullYearDone = value.slice(yearStartIndex, yearStartIndex + 2).length === 2;\n\n            date = [0, month, year];\n        }\n\n        // mm-yyyy || yyyy-mm\n        if (value.length === 6 && (datePattern[0] === 'Y' || datePattern[1] === 'Y')) {\n            monthStartIndex = datePattern[0] === 'm' ? 0 : 4;\n            yearStartIndex = 2 - 0.5 * monthStartIndex;\n            month = parseInt(value.slice(monthStartIndex, monthStartIndex + 2), 10);\n            year = parseInt(value.slice(yearStartIndex, yearStartIndex + 4), 10);\n\n            fullYearDone = value.slice(yearStartIndex, yearStartIndex + 4).length === 4;\n\n            date = [0, month, year];\n        }\n\n        date = owner.getRangeFixedDate(date);\n        owner.date = date;\n\n        var result = date.length === 0 ? value : datePattern.reduce(function (previous, current) {\n            switch (current) {\n            case 'd':\n                return previous + (date[0] === 0 ? '' : owner.addLeadingZero(date[0]));\n            case 'm':\n                return previous + (date[1] === 0 ? '' : owner.addLeadingZero(date[1]));\n            case 'y':\n                return previous + (fullYearDone ? owner.addLeadingZeroForYear(date[2], false) : '');\n            case 'Y':\n                return previous + (fullYearDone ? owner.addLeadingZeroForYear(date[2], true) : '');\n            }\n        }, '');\n\n        return result;\n    },\n\n    getRangeFixedDate: function (date) {\n        var owner = this,\n            datePattern = owner.datePattern,\n            dateMin = owner.dateMin || [],\n            dateMax = owner.dateMax || [];\n\n        if (!date.length || (dateMin.length < 3 && dateMax.length < 3)) return date;\n\n        if (\n          datePattern.find(function(x) {\n            return x.toLowerCase() === 'y';\n          }) &&\n          date[2] === 0\n        ) return date;\n\n        if (dateMax.length && (dateMax[2] < date[2] || (\n          dateMax[2] === date[2] && (dateMax[1] < date[1] || (\n            dateMax[1] === date[1] && dateMax[0] < date[0]\n          ))\n        ))) return dateMax;\n\n        if (dateMin.length && (dateMin[2] > date[2] || (\n          dateMin[2] === date[2] && (dateMin[1] > date[1] || (\n            dateMin[1] === date[1] && dateMin[0] > date[0]\n          ))\n        ))) return dateMin;\n\n        return date;\n    },\n\n    getFixedDate: function (day, month, year) {\n        day = Math.min(day, 31);\n        month = Math.min(month, 12);\n        year = parseInt((year || 0), 10);\n\n        if ((month < 7 && month % 2 === 0) || (month > 8 && month % 2 === 1)) {\n            day = Math.min(day, month === 2 ? (this.isLeapYear(year) ? 29 : 28) : 30);\n        }\n\n        return [day, month, year];\n    },\n\n    isLeapYear: function (year) {\n        return ((year % 4 === 0) && (year % 100 !== 0)) || (year % 400 === 0);\n    },\n\n    addLeadingZero: function (number) {\n        return (number < 10 ? '0' : '') + number;\n    },\n\n    addLeadingZeroForYear: function (number, fullYearMode) {\n        if (fullYearMode) {\n            return (number < 10 ? '000' : (number < 100 ? '00' : (number < 1000 ? '0' : ''))) + number;\n        }\n\n        return (number < 10 ? '0' : '') + number;\n    }\n};\n\nvar DateFormatter_1 = DateFormatter;\n\nvar TimeFormatter = function (timePattern, timeFormat) {\n    var owner = this;\n\n    owner.time = [];\n    owner.blocks = [];\n    owner.timePattern = timePattern;\n    owner.timeFormat = timeFormat;\n    owner.initBlocks();\n};\n\nTimeFormatter.prototype = {\n    initBlocks: function () {\n        var owner = this;\n        owner.timePattern.forEach(function () {\n            owner.blocks.push(2);\n        });\n    },\n\n    getISOFormatTime: function () {\n        var owner = this,\n            time = owner.time;\n\n        return time[2] ? (\n            owner.addLeadingZero(time[0]) + ':' + owner.addLeadingZero(time[1]) + ':' + owner.addLeadingZero(time[2])\n        ) : '';\n    },\n\n    getBlocks: function () {\n        return this.blocks;\n    },\n\n    getTimeFormatOptions: function () {\n        var owner = this;\n        if (String(owner.timeFormat) === '12') {\n            return {\n                maxHourFirstDigit: 1,\n                maxHours: 12,\n                maxMinutesFirstDigit: 5,\n                maxMinutes: 60\n            };\n        }\n\n        return {\n            maxHourFirstDigit: 2,\n            maxHours: 23,\n            maxMinutesFirstDigit: 5,\n            maxMinutes: 60\n        };\n    },\n\n    getValidatedTime: function (value) {\n        var owner = this, result = '';\n\n        value = value.replace(/[^\\d]/g, '');\n\n        var timeFormatOptions = owner.getTimeFormatOptions();\n\n        owner.blocks.forEach(function (length, index) {\n            if (value.length > 0) {\n                var sub = value.slice(0, length),\n                    sub0 = sub.slice(0, 1),\n                    rest = value.slice(length);\n\n                switch (owner.timePattern[index]) {\n\n                case 'h':\n                    if (parseInt(sub0, 10) > timeFormatOptions.maxHourFirstDigit) {\n                        sub = '0' + sub0;\n                    } else if (parseInt(sub, 10) > timeFormatOptions.maxHours) {\n                        sub = timeFormatOptions.maxHours + '';\n                    }\n\n                    break;\n\n                case 'm':\n                case 's':\n                    if (parseInt(sub0, 10) > timeFormatOptions.maxMinutesFirstDigit) {\n                        sub = '0' + sub0;\n                    } else if (parseInt(sub, 10) > timeFormatOptions.maxMinutes) {\n                        sub = timeFormatOptions.maxMinutes + '';\n                    }\n                    break;\n                }\n\n                result += sub;\n\n                // update remaining string\n                value = rest;\n            }\n        });\n\n        return this.getFixedTimeString(result);\n    },\n\n    getFixedTimeString: function (value) {\n        var owner = this, timePattern = owner.timePattern, time = [],\n            secondIndex = 0, minuteIndex = 0, hourIndex = 0,\n            secondStartIndex = 0, minuteStartIndex = 0, hourStartIndex = 0,\n            second, minute, hour;\n\n        if (value.length === 6) {\n            timePattern.forEach(function (type, index) {\n                switch (type) {\n                case 's':\n                    secondIndex = index * 2;\n                    break;\n                case 'm':\n                    minuteIndex = index * 2;\n                    break;\n                case 'h':\n                    hourIndex = index * 2;\n                    break;\n                }\n            });\n\n            hourStartIndex = hourIndex;\n            minuteStartIndex = minuteIndex;\n            secondStartIndex = secondIndex;\n\n            second = parseInt(value.slice(secondStartIndex, secondStartIndex + 2), 10);\n            minute = parseInt(value.slice(minuteStartIndex, minuteStartIndex + 2), 10);\n            hour = parseInt(value.slice(hourStartIndex, hourStartIndex + 2), 10);\n\n            time = this.getFixedTime(hour, minute, second);\n        }\n\n        if (value.length === 4 && owner.timePattern.indexOf('s') < 0) {\n            timePattern.forEach(function (type, index) {\n                switch (type) {\n                case 'm':\n                    minuteIndex = index * 2;\n                    break;\n                case 'h':\n                    hourIndex = index * 2;\n                    break;\n                }\n            });\n\n            hourStartIndex = hourIndex;\n            minuteStartIndex = minuteIndex;\n\n            second = 0;\n            minute = parseInt(value.slice(minuteStartIndex, minuteStartIndex + 2), 10);\n            hour = parseInt(value.slice(hourStartIndex, hourStartIndex + 2), 10);\n\n            time = this.getFixedTime(hour, minute, second);\n        }\n\n        owner.time = time;\n\n        return time.length === 0 ? value : timePattern.reduce(function (previous, current) {\n            switch (current) {\n            case 's':\n                return previous + owner.addLeadingZero(time[2]);\n            case 'm':\n                return previous + owner.addLeadingZero(time[1]);\n            case 'h':\n                return previous + owner.addLeadingZero(time[0]);\n            }\n        }, '');\n    },\n\n    getFixedTime: function (hour, minute, second) {\n        second = Math.min(parseInt(second || 0, 10), 60);\n        minute = Math.min(minute, 60);\n        hour = Math.min(hour, 60);\n\n        return [hour, minute, second];\n    },\n\n    addLeadingZero: function (number) {\n        return (number < 10 ? '0' : '') + number;\n    }\n};\n\nvar TimeFormatter_1 = TimeFormatter;\n\nvar PhoneFormatter = function (formatter, delimiter) {\n    var owner = this;\n\n    owner.delimiter = (delimiter || delimiter === '') ? delimiter : ' ';\n    owner.delimiterRE = delimiter ? new RegExp('\\\\' + delimiter, 'g') : '';\n\n    owner.formatter = formatter;\n};\n\nPhoneFormatter.prototype = {\n    setFormatter: function (formatter) {\n        this.formatter = formatter;\n    },\n\n    format: function (phoneNumber) {\n        var owner = this;\n\n        owner.formatter.clear();\n\n        // only keep number and +\n        phoneNumber = phoneNumber.replace(/[^\\d+]/g, '');\n\n        // strip non-leading +\n        phoneNumber = phoneNumber.replace(/^\\+/, 'B').replace(/\\+/g, '').replace('B', '+');\n\n        // strip delimiter\n        phoneNumber = phoneNumber.replace(owner.delimiterRE, '');\n\n        var result = '', current, validated = false;\n\n        for (var i = 0, iMax = phoneNumber.length; i < iMax; i++) {\n            current = owner.formatter.inputDigit(phoneNumber.charAt(i));\n\n            // has ()- or space inside\n            if (/[\\s()-]/g.test(current)) {\n                result = current;\n\n                validated = true;\n            } else {\n                if (!validated) {\n                    result = current;\n                }\n                // else: over length input\n                // it turns to invalid number again\n            }\n        }\n\n        // strip ()\n        // e.g. US: 7161234567 returns (716) 123-4567\n        result = result.replace(/[()]/g, '');\n        // replace library delimiter with user customized delimiter\n        result = result.replace(/[\\s-]/g, owner.delimiter);\n\n        return result;\n    }\n};\n\nvar PhoneFormatter_1 = PhoneFormatter;\n\nvar CreditCardDetector = {\n    blocks: {\n        uatp:          [4, 5, 6],\n        amex:          [4, 6, 5],\n        diners:        [4, 6, 4],\n        discover:      [4, 4, 4, 4],\n        mastercard:    [4, 4, 4, 4],\n        dankort:       [4, 4, 4, 4],\n        instapayment:  [4, 4, 4, 4],\n        jcb15:         [4, 6, 5],\n        jcb:           [4, 4, 4, 4],\n        maestro:       [4, 4, 4, 4],\n        visa:          [4, 4, 4, 4],\n        mir:           [4, 4, 4, 4],\n        unionPay:      [4, 4, 4, 4],\n        general:       [4, 4, 4, 4]\n    },\n\n    re: {\n        // starts with 1; 15 digits, not starts with 1800 (jcb card)\n        uatp: /^(?!1800)1\\d{0,14}/,\n\n        // starts with 34/37; 15 digits\n        amex: /^3[47]\\d{0,13}/,\n\n        // starts with 6011/65/644-649; 16 digits\n        discover: /^(?:6011|65\\d{0,2}|64[4-9]\\d?)\\d{0,12}/,\n\n        // starts with 300-305/309 or 36/38/39; 14 digits\n        diners: /^3(?:0([0-5]|9)|[689]\\d?)\\d{0,11}/,\n\n        // starts with 51-55/2221–2720; 16 digits\n        mastercard: /^(5[1-5]\\d{0,2}|22[2-9]\\d{0,1}|2[3-7]\\d{0,2})\\d{0,12}/,\n\n        // starts with 5019/4175/4571; 16 digits\n        dankort: /^(5019|4175|4571)\\d{0,12}/,\n\n        // starts with 637-639; 16 digits\n        instapayment: /^63[7-9]\\d{0,13}/,\n\n        // starts with 2131/1800; 15 digits\n        jcb15: /^(?:2131|1800)\\d{0,11}/,\n\n        // starts with 2131/1800/35; 16 digits\n        jcb: /^(?:35\\d{0,2})\\d{0,12}/,\n\n        // starts with 50/56-58/6304/67; 16 digits\n        maestro: /^(?:5[0678]\\d{0,2}|6304|67\\d{0,2})\\d{0,12}/,\n\n        // starts with 22; 16 digits\n        mir: /^220[0-4]\\d{0,12}/,\n\n        // starts with 4; 16 digits\n        visa: /^4\\d{0,15}/,\n\n        // starts with 62/81; 16 digits\n        unionPay: /^(62|81)\\d{0,14}/\n    },\n\n    getStrictBlocks: function (block) {\n      var total = block.reduce(function (prev, current) {\n        return prev + current;\n      }, 0);\n\n      return block.concat(19 - total);\n    },\n\n    getInfo: function (value, strictMode) {\n        var blocks = CreditCardDetector.blocks,\n            re = CreditCardDetector.re;\n\n        // Some credit card can have up to 19 digits number.\n        // Set strictMode to true will remove the 16 max-length restrain,\n        // however, I never found any website validate card number like\n        // this, hence probably you don't want to enable this option.\n        strictMode = !!strictMode;\n\n        for (var key in re) {\n            if (re[key].test(value)) {\n                var matchedBlocks = blocks[key];\n                return {\n                    type: key,\n                    blocks: strictMode ? this.getStrictBlocks(matchedBlocks) : matchedBlocks\n                };\n            }\n        }\n\n        return {\n            type: 'unknown',\n            blocks: strictMode ? this.getStrictBlocks(blocks.general) : blocks.general\n        };\n    }\n};\n\nvar CreditCardDetector_1 = CreditCardDetector;\n\nvar Util = {\n    noop: function () {\n    },\n\n    strip: function (value, re) {\n        return value.replace(re, '');\n    },\n\n    getPostDelimiter: function (value, delimiter, delimiters) {\n        // single delimiter\n        if (delimiters.length === 0) {\n            return value.slice(-delimiter.length) === delimiter ? delimiter : '';\n        }\n\n        // multiple delimiters\n        var matchedDelimiter = '';\n        delimiters.forEach(function (current) {\n            if (value.slice(-current.length) === current) {\n                matchedDelimiter = current;\n            }\n        });\n\n        return matchedDelimiter;\n    },\n\n    getDelimiterREByDelimiter: function (delimiter) {\n        return new RegExp(delimiter.replace(/([.?*+^$[\\]\\\\(){}|-])/g, '\\\\$1'), 'g');\n    },\n\n    getNextCursorPosition: function (prevPos, oldValue, newValue, delimiter, delimiters) {\n      // If cursor was at the end of value, just place it back.\n      // Because new value could contain additional chars.\n      if (oldValue.length === prevPos) {\n          return newValue.length;\n      }\n\n      return prevPos + this.getPositionOffset(prevPos, oldValue, newValue, delimiter ,delimiters);\n    },\n\n    getPositionOffset: function (prevPos, oldValue, newValue, delimiter, delimiters) {\n        var oldRawValue, newRawValue, lengthOffset;\n\n        oldRawValue = this.stripDelimiters(oldValue.slice(0, prevPos), delimiter, delimiters);\n        newRawValue = this.stripDelimiters(newValue.slice(0, prevPos), delimiter, delimiters);\n        lengthOffset = oldRawValue.length - newRawValue.length;\n\n        return (lengthOffset !== 0) ? (lengthOffset / Math.abs(lengthOffset)) : 0;\n    },\n\n    stripDelimiters: function (value, delimiter, delimiters) {\n        var owner = this;\n\n        // single delimiter\n        if (delimiters.length === 0) {\n            var delimiterRE = delimiter ? owner.getDelimiterREByDelimiter(delimiter) : '';\n\n            return value.replace(delimiterRE, '');\n        }\n\n        // multiple delimiters\n        delimiters.forEach(function (current) {\n            current.split('').forEach(function (letter) {\n                value = value.replace(owner.getDelimiterREByDelimiter(letter), '');\n            });\n        });\n\n        return value;\n    },\n\n    headStr: function (str, length) {\n        return str.slice(0, length);\n    },\n\n    getMaxLength: function (blocks) {\n        return blocks.reduce(function (previous, current) {\n            return previous + current;\n        }, 0);\n    },\n\n    // strip prefix\n    // Before type  |   After type    |     Return value\n    // PEFIX-...    |   PEFIX-...     |     ''\n    // PREFIX-123   |   PEFIX-123     |     123\n    // PREFIX-123   |   PREFIX-23     |     23\n    // PREFIX-123   |   PREFIX-1234   |     1234\n    getPrefixStrippedValue: function (value, prefix, prefixLength, prevResult, delimiter, delimiters, noImmediatePrefix, tailPrefix, signBeforePrefix) {\n        // No prefix\n        if (prefixLength === 0) {\n          return value;\n        }\n\n        // Value is prefix\n        if (value === prefix && value !== '') {\n          return '';\n        }\n\n        if (signBeforePrefix && (value.slice(0, 1) == '-')) {\n            var prev = (prevResult.slice(0, 1) == '-') ? prevResult.slice(1) : prevResult;\n            return '-' + this.getPrefixStrippedValue(value.slice(1), prefix, prefixLength, prev, delimiter, delimiters, noImmediatePrefix, tailPrefix, signBeforePrefix);\n        }\n\n        // Pre result prefix string does not match pre-defined prefix\n        if (prevResult.slice(0, prefixLength) !== prefix && !tailPrefix) {\n            // Check if the first time user entered something\n            if (noImmediatePrefix && !prevResult && value) return value;\n            return '';\n        } else if (prevResult.slice(-prefixLength) !== prefix && tailPrefix) {\n            // Check if the first time user entered something\n            if (noImmediatePrefix && !prevResult && value) return value;\n            return '';\n        }\n\n        var prevValue = this.stripDelimiters(prevResult, delimiter, delimiters);\n\n        // New value has issue, someone typed in between prefix letters\n        // Revert to pre value\n        if (value.slice(0, prefixLength) !== prefix && !tailPrefix) {\n            return prevValue.slice(prefixLength);\n        } else if (value.slice(-prefixLength) !== prefix && tailPrefix) {\n            return prevValue.slice(0, -prefixLength - 1);\n        }\n\n        // No issue, strip prefix for new value\n        return tailPrefix ? value.slice(0, -prefixLength) : value.slice(prefixLength);\n    },\n\n    getFirstDiffIndex: function (prev, current) {\n        var index = 0;\n\n        while (prev.charAt(index) === current.charAt(index)) {\n            if (prev.charAt(index++) === '') {\n                return -1;\n            }\n        }\n\n        return index;\n    },\n\n    getFormattedValue: function (value, blocks, blocksLength, delimiter, delimiters, delimiterLazyShow) {\n        var result = '',\n            multipleDelimiters = delimiters.length > 0,\n            currentDelimiter = '';\n\n        // no options, normal input\n        if (blocksLength === 0) {\n            return value;\n        }\n\n        blocks.forEach(function (length, index) {\n            if (value.length > 0) {\n                var sub = value.slice(0, length),\n                    rest = value.slice(length);\n\n                if (multipleDelimiters) {\n                    currentDelimiter = delimiters[delimiterLazyShow ? (index - 1) : index] || currentDelimiter;\n                } else {\n                    currentDelimiter = delimiter;\n                }\n\n                if (delimiterLazyShow) {\n                    if (index > 0) {\n                        result += currentDelimiter;\n                    }\n\n                    result += sub;\n                } else {\n                    result += sub;\n\n                    if (sub.length === length && index < blocksLength - 1) {\n                        result += currentDelimiter;\n                    }\n                }\n\n                // update remaining string\n                value = rest;\n            }\n        });\n\n        return result;\n    },\n\n    // move cursor to the end\n    // the first time user focuses on an input with prefix\n    fixPrefixCursor: function (el, prefix, delimiter, delimiters) {\n        if (!el) {\n            return;\n        }\n\n        var val = el.value,\n            appendix = delimiter || (delimiters[0] || ' ');\n\n        if (!el.setSelectionRange || !prefix || (prefix.length + appendix.length) <= val.length) {\n            return;\n        }\n\n        var len = val.length * 2;\n\n        // set timeout to avoid blink\n        setTimeout(function () {\n            el.setSelectionRange(len, len);\n        }, 1);\n    },\n\n    // Check if input field is fully selected\n    checkFullSelection: function(value) {\n      try {\n        var selection = window.getSelection() || document.getSelection() || {};\n        return selection.toString().length === value.length;\n      } catch (ex) {\n        // Ignore\n      }\n\n      return false;\n    },\n\n    setSelection: function (element, position, doc) {\n        if (element !== this.getActiveElement(doc)) {\n            return;\n        }\n\n        // cursor is already in the end\n        if (element && element.value.length <= position) {\n          return;\n        }\n\n        if (element.createTextRange) {\n            var range = element.createTextRange();\n\n            range.move('character', position);\n            range.select();\n        } else {\n            try {\n                element.setSelectionRange(position, position);\n            } catch (e) {\n                // eslint-disable-next-line\n                console.warn('The input element type does not support selection');\n            }\n        }\n    },\n\n    getActiveElement: function(parent) {\n        var activeElement = parent.activeElement;\n        if (activeElement && activeElement.shadowRoot) {\n            return this.getActiveElement(activeElement.shadowRoot);\n        }\n        return activeElement;\n    },\n\n    isAndroid: function () {\n        return navigator && /android/i.test(navigator.userAgent);\n    },\n\n    // On Android chrome, the keyup and keydown events\n    // always return key code 229 as a composition that\n    // buffers the user’s keystrokes\n    // see https://github.com/nosir/cleave.js/issues/147\n    isAndroidBackspaceKeydown: function (lastInputValue, currentInputValue) {\n        if (!this.isAndroid() || !lastInputValue || !currentInputValue) {\n            return false;\n        }\n\n        return currentInputValue === lastInputValue.slice(0, -1);\n    }\n};\n\nvar Util_1 = Util;\n\n/**\n * Props Assignment\n *\n * Separate this, so react module can share the usage\n */\nvar DefaultProperties = {\n    // Maybe change to object-assign\n    // for now just keep it as simple\n    assign: function (target, opts) {\n        target = target || {};\n        opts = opts || {};\n\n        // credit card\n        target.creditCard = !!opts.creditCard;\n        target.creditCardStrictMode = !!opts.creditCardStrictMode;\n        target.creditCardType = '';\n        target.onCreditCardTypeChanged = opts.onCreditCardTypeChanged || (function () {});\n\n        // phone\n        target.phone = !!opts.phone;\n        target.phoneRegionCode = opts.phoneRegionCode || 'AU';\n        target.phoneFormatter = {};\n\n        // time\n        target.time = !!opts.time;\n        target.timePattern = opts.timePattern || ['h', 'm', 's'];\n        target.timeFormat = opts.timeFormat || '24';\n        target.timeFormatter = {};\n\n        // date\n        target.date = !!opts.date;\n        target.datePattern = opts.datePattern || ['d', 'm', 'Y'];\n        target.dateMin = opts.dateMin || '';\n        target.dateMax = opts.dateMax || '';\n        target.dateFormatter = {};\n\n        // numeral\n        target.numeral = !!opts.numeral;\n        target.numeralIntegerScale = opts.numeralIntegerScale > 0 ? opts.numeralIntegerScale : 0;\n        target.numeralDecimalScale = opts.numeralDecimalScale >= 0 ? opts.numeralDecimalScale : 2;\n        target.numeralDecimalMark = opts.numeralDecimalMark || '.';\n        target.numeralThousandsGroupStyle = opts.numeralThousandsGroupStyle || 'thousand';\n        target.numeralPositiveOnly = !!opts.numeralPositiveOnly;\n        target.stripLeadingZeroes = opts.stripLeadingZeroes !== false;\n        target.signBeforePrefix = !!opts.signBeforePrefix;\n        target.tailPrefix = !!opts.tailPrefix;\n\n        // others\n        target.swapHiddenInput = !!opts.swapHiddenInput;\n        \n        target.numericOnly = target.creditCard || target.date || !!opts.numericOnly;\n\n        target.uppercase = !!opts.uppercase;\n        target.lowercase = !!opts.lowercase;\n\n        target.prefix = (target.creditCard || target.date) ? '' : (opts.prefix || '');\n        target.noImmediatePrefix = !!opts.noImmediatePrefix;\n        target.prefixLength = target.prefix.length;\n        target.rawValueTrimPrefix = !!opts.rawValueTrimPrefix;\n        target.copyDelimiter = !!opts.copyDelimiter;\n\n        target.initValue = (opts.initValue !== undefined && opts.initValue !== null) ? opts.initValue.toString() : '';\n\n        target.delimiter =\n            (opts.delimiter || opts.delimiter === '') ? opts.delimiter :\n                (opts.date ? '/' :\n                    (opts.time ? ':' :\n                        (opts.numeral ? ',' :\n                            (opts.phone ? ' ' :\n                                ' '))));\n        target.delimiterLength = target.delimiter.length;\n        target.delimiterLazyShow = !!opts.delimiterLazyShow;\n        target.delimiters = opts.delimiters || [];\n\n        target.blocks = opts.blocks || [];\n        target.blocksLength = target.blocks.length;\n\n        target.root = (typeof commonjsGlobal === 'object' && commonjsGlobal) ? commonjsGlobal : window;\n        target.document = opts.document || target.root.document;\n\n        target.maxLength = 0;\n\n        target.backspace = false;\n        target.result = '';\n\n        target.onValueChanged = opts.onValueChanged || (function () {});\n\n        return target;\n    }\n};\n\nvar DefaultProperties_1 = DefaultProperties;\n\n/**\n * Construct a new Cleave instance by passing the configuration object\n *\n * @param {String | HTMLElement} element\n * @param {Object} opts\n */\nvar Cleave = function (element, opts) {\n    var owner = this;\n    var hasMultipleElements = false;\n\n    if (typeof element === 'string') {\n        owner.element = document.querySelector(element);\n        hasMultipleElements = document.querySelectorAll(element).length > 1;\n    } else {\n      if (typeof element.length !== 'undefined' && element.length > 0) {\n        owner.element = element[0];\n        hasMultipleElements = element.length > 1;\n      } else {\n        owner.element = element;\n      }\n    }\n\n    if (!owner.element) {\n        throw new Error('[cleave.js] Please check the element');\n    }\n\n    if (hasMultipleElements) {\n      try {\n        // eslint-disable-next-line\n        console.warn('[cleave.js] Multiple input fields matched, cleave.js will only take the first one.');\n      } catch (e) {\n        // Old IE\n      }\n    }\n\n    opts.initValue = owner.element.value;\n\n    owner.properties = Cleave.DefaultProperties.assign({}, opts);\n\n    owner.init();\n};\n\nCleave.prototype = {\n    init: function () {\n        var owner = this, pps = owner.properties;\n\n        // no need to use this lib\n        if (!pps.numeral && !pps.phone && !pps.creditCard && !pps.time && !pps.date && (pps.blocksLength === 0 && !pps.prefix)) {\n            owner.onInput(pps.initValue);\n\n            return;\n        }\n\n        pps.maxLength = Cleave.Util.getMaxLength(pps.blocks);\n\n        owner.isAndroid = Cleave.Util.isAndroid();\n        owner.lastInputValue = '';\n        owner.isBackward = '';\n\n        owner.onChangeListener = owner.onChange.bind(owner);\n        owner.onKeyDownListener = owner.onKeyDown.bind(owner);\n        owner.onFocusListener = owner.onFocus.bind(owner);\n        owner.onCutListener = owner.onCut.bind(owner);\n        owner.onCopyListener = owner.onCopy.bind(owner);\n\n        owner.initSwapHiddenInput();\n\n        owner.element.addEventListener('input', owner.onChangeListener);\n        owner.element.addEventListener('keydown', owner.onKeyDownListener);\n        owner.element.addEventListener('focus', owner.onFocusListener);\n        owner.element.addEventListener('cut', owner.onCutListener);\n        owner.element.addEventListener('copy', owner.onCopyListener);\n\n\n        owner.initPhoneFormatter();\n        owner.initDateFormatter();\n        owner.initTimeFormatter();\n        owner.initNumeralFormatter();\n\n        // avoid touch input field if value is null\n        // otherwise Firefox will add red box-shadow for <input required />\n        if (pps.initValue || (pps.prefix && !pps.noImmediatePrefix)) {\n            owner.onInput(pps.initValue);\n        }\n    },\n\n    initSwapHiddenInput: function () {\n        var owner = this, pps = owner.properties;\n        if (!pps.swapHiddenInput) return;\n\n        var inputFormatter = owner.element.cloneNode(true);\n        owner.element.parentNode.insertBefore(inputFormatter, owner.element);\n\n        owner.elementSwapHidden = owner.element;\n        owner.elementSwapHidden.type = 'hidden';\n\n        owner.element = inputFormatter;\n        owner.element.id = '';\n    },\n\n    initNumeralFormatter: function () {\n        var owner = this, pps = owner.properties;\n\n        if (!pps.numeral) {\n            return;\n        }\n\n        pps.numeralFormatter = new Cleave.NumeralFormatter(\n            pps.numeralDecimalMark,\n            pps.numeralIntegerScale,\n            pps.numeralDecimalScale,\n            pps.numeralThousandsGroupStyle,\n            pps.numeralPositiveOnly,\n            pps.stripLeadingZeroes,\n            pps.prefix,\n            pps.signBeforePrefix,\n            pps.tailPrefix,\n            pps.delimiter\n        );\n    },\n\n    initTimeFormatter: function() {\n        var owner = this, pps = owner.properties;\n\n        if (!pps.time) {\n            return;\n        }\n\n        pps.timeFormatter = new Cleave.TimeFormatter(pps.timePattern, pps.timeFormat);\n        pps.blocks = pps.timeFormatter.getBlocks();\n        pps.blocksLength = pps.blocks.length;\n        pps.maxLength = Cleave.Util.getMaxLength(pps.blocks);\n    },\n\n    initDateFormatter: function () {\n        var owner = this, pps = owner.properties;\n\n        if (!pps.date) {\n            return;\n        }\n\n        pps.dateFormatter = new Cleave.DateFormatter(pps.datePattern, pps.dateMin, pps.dateMax);\n        pps.blocks = pps.dateFormatter.getBlocks();\n        pps.blocksLength = pps.blocks.length;\n        pps.maxLength = Cleave.Util.getMaxLength(pps.blocks);\n    },\n\n    initPhoneFormatter: function () {\n        var owner = this, pps = owner.properties;\n\n        if (!pps.phone) {\n            return;\n        }\n\n        // Cleave.AsYouTypeFormatter should be provided by\n        // external google closure lib\n        try {\n            pps.phoneFormatter = new Cleave.PhoneFormatter(\n                new pps.root.Cleave.AsYouTypeFormatter(pps.phoneRegionCode),\n                pps.delimiter\n            );\n        } catch (ex) {\n            throw new Error('[cleave.js] Please include phone-type-formatter.{country}.js lib');\n        }\n    },\n\n    onKeyDown: function (event) {\n        var owner = this,\n            charCode = event.which || event.keyCode;\n\n        owner.lastInputValue = owner.element.value;\n        owner.isBackward = charCode === 8;\n    },\n\n    onChange: function (event) {\n        var owner = this, pps = owner.properties,\n            Util = Cleave.Util;\n\n        owner.isBackward = owner.isBackward || event.inputType === 'deleteContentBackward';\n\n        var postDelimiter = Util.getPostDelimiter(owner.lastInputValue, pps.delimiter, pps.delimiters);\n\n        if (owner.isBackward && postDelimiter) {\n            pps.postDelimiterBackspace = postDelimiter;\n        } else {\n            pps.postDelimiterBackspace = false;\n        }\n\n        this.onInput(this.element.value);\n    },\n\n    onFocus: function () {\n        var owner = this,\n            pps = owner.properties;\n        owner.lastInputValue = owner.element.value;\n\n        if (pps.prefix && pps.noImmediatePrefix && !owner.element.value) {\n            this.onInput(pps.prefix);\n        }\n\n        Cleave.Util.fixPrefixCursor(owner.element, pps.prefix, pps.delimiter, pps.delimiters);\n    },\n\n    onCut: function (e) {\n        if (!Cleave.Util.checkFullSelection(this.element.value)) return;\n        this.copyClipboardData(e);\n        this.onInput('');\n    },\n\n    onCopy: function (e) {\n        if (!Cleave.Util.checkFullSelection(this.element.value)) return;\n        this.copyClipboardData(e);\n    },\n\n    copyClipboardData: function (e) {\n        var owner = this,\n            pps = owner.properties,\n            Util = Cleave.Util,\n            inputValue = owner.element.value,\n            textToCopy = '';\n\n        if (!pps.copyDelimiter) {\n            textToCopy = Util.stripDelimiters(inputValue, pps.delimiter, pps.delimiters);\n        } else {\n            textToCopy = inputValue;\n        }\n\n        try {\n            if (e.clipboardData) {\n                e.clipboardData.setData('Text', textToCopy);\n            } else {\n                window.clipboardData.setData('Text', textToCopy);\n            }\n\n            e.preventDefault();\n        } catch (ex) {\n            //  empty\n        }\n    },\n\n    onInput: function (value) {\n        var owner = this, pps = owner.properties,\n            Util = Cleave.Util;\n\n        // case 1: delete one more character \"4\"\n        // 1234*| -> hit backspace -> 123|\n        // case 2: last character is not delimiter which is:\n        // 12|34* -> hit backspace -> 1|34*\n        // note: no need to apply this for numeral mode\n        var postDelimiterAfter = Util.getPostDelimiter(value, pps.delimiter, pps.delimiters);\n        if (!pps.numeral && pps.postDelimiterBackspace && !postDelimiterAfter) {\n            value = Util.headStr(value, value.length - pps.postDelimiterBackspace.length);\n        }\n\n        // phone formatter\n        if (pps.phone) {\n            if (pps.prefix && (!pps.noImmediatePrefix || value.length)) {\n                pps.result = pps.prefix + pps.phoneFormatter.format(value).slice(pps.prefix.length);\n            } else {\n                pps.result = pps.phoneFormatter.format(value);\n            }\n            owner.updateValueState();\n\n            return;\n        }\n\n        // numeral formatter\n        if (pps.numeral) {\n            // Do not show prefix when noImmediatePrefix is specified\n            // This mostly because we need to show user the native input placeholder\n            if (pps.prefix && pps.noImmediatePrefix && value.length === 0) {\n                pps.result = '';\n            } else {\n                pps.result = pps.numeralFormatter.format(value);\n            }\n            owner.updateValueState();\n\n            return;\n        }\n\n        // date\n        if (pps.date) {\n            value = pps.dateFormatter.getValidatedDate(value);\n        }\n\n        // time\n        if (pps.time) {\n            value = pps.timeFormatter.getValidatedTime(value);\n        }\n\n        // strip delimiters\n        value = Util.stripDelimiters(value, pps.delimiter, pps.delimiters);\n\n        // strip prefix\n        value = Util.getPrefixStrippedValue(value, pps.prefix, pps.prefixLength, pps.result, pps.delimiter, pps.delimiters, pps.noImmediatePrefix, pps.tailPrefix, pps.signBeforePrefix);\n\n        // strip non-numeric characters\n        value = pps.numericOnly ? Util.strip(value, /[^\\d]/g) : value;\n\n        // convert case\n        value = pps.uppercase ? value.toUpperCase() : value;\n        value = pps.lowercase ? value.toLowerCase() : value;\n\n        // prevent from showing prefix when no immediate option enabled with empty input value\n        if (pps.prefix) {\n            if (pps.tailPrefix) {\n                value = value + pps.prefix;\n            } else {\n                value = pps.prefix + value;\n            }\n\n\n            // no blocks specified, no need to do formatting\n            if (pps.blocksLength === 0) {\n                pps.result = value;\n                owner.updateValueState();\n\n                return;\n            }\n        }\n\n        // update credit card props\n        if (pps.creditCard) {\n            owner.updateCreditCardPropsByValue(value);\n        }\n\n        // strip over length characters\n        value = Util.headStr(value, pps.maxLength);\n\n        // apply blocks\n        pps.result = Util.getFormattedValue(\n            value,\n            pps.blocks, pps.blocksLength,\n            pps.delimiter, pps.delimiters, pps.delimiterLazyShow\n        );\n\n        owner.updateValueState();\n    },\n\n    updateCreditCardPropsByValue: function (value) {\n        var owner = this, pps = owner.properties,\n            Util = Cleave.Util,\n            creditCardInfo;\n\n        // At least one of the first 4 characters has changed\n        if (Util.headStr(pps.result, 4) === Util.headStr(value, 4)) {\n            return;\n        }\n\n        creditCardInfo = Cleave.CreditCardDetector.getInfo(value, pps.creditCardStrictMode);\n\n        pps.blocks = creditCardInfo.blocks;\n        pps.blocksLength = pps.blocks.length;\n        pps.maxLength = Util.getMaxLength(pps.blocks);\n\n        // credit card type changed\n        if (pps.creditCardType !== creditCardInfo.type) {\n            pps.creditCardType = creditCardInfo.type;\n\n            pps.onCreditCardTypeChanged.call(owner, pps.creditCardType);\n        }\n    },\n\n    updateValueState: function () {\n        var owner = this,\n            Util = Cleave.Util,\n            pps = owner.properties;\n\n        if (!owner.element) {\n            return;\n        }\n\n        var endPos = owner.element.selectionEnd;\n        var oldValue = owner.element.value;\n        var newValue = pps.result;\n\n        endPos = Util.getNextCursorPosition(endPos, oldValue, newValue, pps.delimiter, pps.delimiters);\n\n        // fix Android browser type=\"text\" input field\n        // cursor not jumping issue\n        if (owner.isAndroid) {\n            window.setTimeout(function () {\n                owner.element.value = newValue;\n                Util.setSelection(owner.element, endPos, pps.document, false);\n                owner.callOnValueChanged();\n            }, 1);\n\n            return;\n        }\n\n        owner.element.value = newValue;\n        if (pps.swapHiddenInput) owner.elementSwapHidden.value = owner.getRawValue();\n\n        Util.setSelection(owner.element, endPos, pps.document, false);\n        owner.callOnValueChanged();\n    },\n\n    callOnValueChanged: function () {\n        var owner = this,\n            pps = owner.properties;\n\n        pps.onValueChanged.call(owner, {\n            target: {\n                name: owner.element.name,\n                value: pps.result,\n                rawValue: owner.getRawValue()\n            }\n        });\n    },\n\n    setPhoneRegionCode: function (phoneRegionCode) {\n        var owner = this, pps = owner.properties;\n\n        pps.phoneRegionCode = phoneRegionCode;\n        owner.initPhoneFormatter();\n        owner.onChange();\n    },\n\n    setRawValue: function (value) {\n        var owner = this, pps = owner.properties;\n\n        value = value !== undefined && value !== null ? value.toString() : '';\n\n        if (pps.numeral) {\n            value = value.replace('.', pps.numeralDecimalMark);\n        }\n\n        pps.postDelimiterBackspace = false;\n\n        owner.element.value = value;\n        owner.onInput(value);\n    },\n\n    getRawValue: function () {\n        var owner = this,\n            pps = owner.properties,\n            Util = Cleave.Util,\n            rawValue = owner.element.value;\n\n        if (pps.rawValueTrimPrefix) {\n            rawValue = Util.getPrefixStrippedValue(rawValue, pps.prefix, pps.prefixLength, pps.result, pps.delimiter, pps.delimiters, pps.noImmediatePrefix, pps.tailPrefix, pps.signBeforePrefix);\n        }\n\n        if (pps.numeral) {\n            rawValue = pps.numeralFormatter.getRawValue(rawValue);\n        } else {\n            rawValue = Util.stripDelimiters(rawValue, pps.delimiter, pps.delimiters);\n        }\n\n        return rawValue;\n    },\n\n    getISOFormatDate: function () {\n        var owner = this,\n            pps = owner.properties;\n\n        return pps.date ? pps.dateFormatter.getISOFormatDate() : '';\n    },\n\n    getISOFormatTime: function () {\n        var owner = this,\n            pps = owner.properties;\n\n        return pps.time ? pps.timeFormatter.getISOFormatTime() : '';\n    },\n\n    getFormattedValue: function () {\n        return this.element.value;\n    },\n\n    destroy: function () {\n        var owner = this;\n\n        owner.element.removeEventListener('input', owner.onChangeListener);\n        owner.element.removeEventListener('keydown', owner.onKeyDownListener);\n        owner.element.removeEventListener('focus', owner.onFocusListener);\n        owner.element.removeEventListener('cut', owner.onCutListener);\n        owner.element.removeEventListener('copy', owner.onCopyListener);\n    },\n\n    toString: function () {\n        return '[Cleave Object]';\n    }\n};\n\nCleave.NumeralFormatter = NumeralFormatter_1;\nCleave.DateFormatter = DateFormatter_1;\nCleave.TimeFormatter = TimeFormatter_1;\nCleave.PhoneFormatter = PhoneFormatter_1;\nCleave.CreditCardDetector = CreditCardDetector_1;\nCleave.Util = Util_1;\nCleave.DefaultProperties = DefaultProperties_1;\n\n// for angular directive\n((typeof commonjsGlobal === 'object' && commonjsGlobal) ? commonjsGlobal : window)['Cleave'] = Cleave;\n\n// CommonJS\nvar Cleave_1 = Cleave;\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (Cleave_1);\n\n\n//# sourceURL=webpack://int_aurus_sfra/../storefront-reference-architecture-master/node_modules/cleave.js/dist/cleave-esm.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/global */
/******/ 	!function() {
/******/ 		__webpack_require__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	!function() {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = function(exports) {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	}();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./cartridges/int_aurus_sfra/cartridge/client/default/js/checkout.js");
/******/ 	
/******/ })()
;